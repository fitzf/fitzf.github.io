{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/README.md","path":"README.md","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/images/pasted-11.png","path":"images/pasted-11.png","modified":0,"renderable":0},{"_id":"source/images/pasted-12.png","path":"images/pasted-12.png","modified":0,"renderable":0},{"_id":"source/images/pasted-13.png","path":"images/pasted-13.png","modified":0,"renderable":0},{"_id":"source/images/pasted-18.png","path":"images/pasted-18.png","modified":0,"renderable":0},{"_id":"source/images/pasted-17.png","path":"images/pasted-17.png","modified":0,"renderable":0},{"_id":"source/images/pasted-15.png","path":"images/pasted-15.png","modified":0,"renderable":0},{"_id":"source/images/pasted-25.png","path":"images/pasted-25.png","modified":0,"renderable":0},{"_id":"source/images/pasted-23.png","path":"images/pasted-23.png","modified":0,"renderable":0},{"_id":"source/images/pasted-22.png","path":"images/pasted-22.png","modified":0,"renderable":0},{"_id":"source/images/pasted-26.png","path":"images/pasted-26.png","modified":0,"renderable":0},{"_id":"source/images/pasted-30.png","path":"images/pasted-30.png","modified":0,"renderable":0},{"_id":"source/images/pasted-38.png","path":"images/pasted-38.png","modified":0,"renderable":0},{"_id":"source/images/pasted-27.png","path":"images/pasted-27.png","modified":0,"renderable":0},{"_id":"source/images/pasted-43.png","path":"images/pasted-43.png","modified":0,"renderable":0},{"_id":"source/images/pasted-5.png","path":"images/pasted-5.png","modified":0,"renderable":0},{"_id":"source/images/pasted-7.png","path":"images/pasted-7.png","modified":0,"renderable":0},{"_id":"source/images/timg.jpeg","path":"images/timg.jpeg","modified":0,"renderable":0},{"_id":"source/images/pasted-8.png","path":"images/pasted-8.png","modified":0,"renderable":0},{"_id":"source/images/pasted-37.png","path":"images/pasted-37.png","modified":0,"renderable":0},{"_id":"source/images/pasted-14.png","path":"images/pasted-14.png","modified":0,"renderable":0},{"_id":"source/images/pasted-0.png","path":"images/pasted-0.png","modified":0,"renderable":0},{"_id":"source/images/pasted-1.png","path":"images/pasted-1.png","modified":0,"renderable":0},{"_id":"source/images/pasted-16.png","path":"images/pasted-16.png","modified":0,"renderable":0},{"_id":"source/images/pasted-20.png","path":"images/pasted-20.png","modified":0,"renderable":0},{"_id":"source/images/pasted-21.png","path":"images/pasted-21.png","modified":0,"renderable":0},{"_id":"source/images/pasted-2.png","path":"images/pasted-2.png","modified":0,"renderable":0},{"_id":"source/images/pasted-24.png","path":"images/pasted-24.png","modified":0,"renderable":0},{"_id":"source/images/pasted-32.png","path":"images/pasted-32.png","modified":0,"renderable":0},{"_id":"source/images/pasted-36.png","path":"images/pasted-36.png","modified":0,"renderable":0},{"_id":"source/images/pasted-35.png","path":"images/pasted-35.png","modified":0,"renderable":0},{"_id":"source/images/pasted-39.png","path":"images/pasted-39.png","modified":0,"renderable":0},{"_id":"source/images/pasted-4.png","path":"images/pasted-4.png","modified":0,"renderable":0},{"_id":"source/images/pasted-40.png","path":"images/pasted-40.png","modified":0,"renderable":0},{"_id":"source/images/pasted-41.png","path":"images/pasted-41.png","modified":0,"renderable":0},{"_id":"source/images/pasted-42.png","path":"images/pasted-42.png","modified":0,"renderable":0},{"_id":"source/images/pasted-44.png","path":"images/pasted-44.png","modified":0,"renderable":0},{"_id":"source/images/pasted-6.png","path":"images/pasted-6.png","modified":0,"renderable":0},{"_id":"source/images/pasted-9.png","path":"images/pasted-9.png","modified":0,"renderable":0},{"_id":"source/images/pasted-3.png","path":"images/pasted-3.png","modified":0,"renderable":0},{"_id":"source/images/pasted-29.png","path":"images/pasted-29.png","modified":0,"renderable":0},{"_id":"source/images/pasted-45.png","path":"images/pasted-45.png","modified":0,"renderable":0},{"_id":"source/images/pasted-46.png","path":"images/pasted-46.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"source/images/pasted-10.png","path":"images/pasted-10.png","modified":0,"renderable":0},{"_id":"source/images/pasted-28.png","path":"images/pasted-28.png","modified":0,"renderable":0},{"_id":"source/images/pasted-31.png","path":"images/pasted-31.png","modified":0,"renderable":0},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"source/images/pasted-34.png","path":"images/pasted-34.png","modified":0,"renderable":0},{"_id":"source/images/pasted-33.png","path":"images/pasted-33.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"source/images/pasted-49.png","path":"images/pasted-49.png","modified":0,"renderable":0},{"_id":"source/images/pasted-19.png","path":"images/pasted-19.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"source/images/pasted-47.png","path":"images/pasted-47.png","modified":0,"renderable":0},{"_id":"source/images/pasted-48.png","path":"images/pasted-48.png","modified":0,"renderable":0},{"_id":"source/LICENSE","path":"LICENSE","modified":1,"renderable":0}],"Cache":[{"_id":"source/404.html","hash":"d6cd47ba4ab178269d9e7be773e521a3f74a738b","modified":1524660419492},{"_id":"source/CNAME","hash":"561346d522a806009694d6c62a96f64e0aac8132","modified":1524660419492},{"_id":"source/README.md","hash":"1ab64c41e82002770eb3c57744ff8cee19dfd47b","modified":1524660419492},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1569143493242},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1569143493242},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1569143493247},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1569143493242},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1569143493247},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1569143493247},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1572530170809},{"_id":"themes/next/README.md","hash":"cf9c999578085b9c8a20a13d19d9d8660926f847","modified":1574732461516},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1569143493248},{"_id":"themes/next/_config.yml","hash":"5bff4d9a8d46430bf1994af448064b72ed4e11b9","modified":1574732637711},{"_id":"themes/next/gulpfile.js","hash":"72e6d5a6e32d5f95d82e4c4d0c963d39555bb760","modified":1571637313644},{"_id":"themes/next/package.json","hash":"a2caa6dcace053aeaec9b3555ce2a29fbf878fa0","modified":1574732461526},{"_id":"source/favicon.ico","hash":"493ffa1d03bc7949e2d95b0cabc343802bcc98c9","modified":1524660419501},{"_id":"source/about/index.md","hash":"a05f4ac596b907a2261703e2d8ddfe2d1124cf1e","modified":1569123046575},{"_id":"source/_posts/Docker-Swarm-入门.md","hash":"5f96012b4c91322d582de3737d0ead54c459e366","modified":1524660419493},{"_id":"source/_posts/Docker可视化管理工具Shipyard安装与配置.md","hash":"b53ec035886b3f41138a17ffdb5458e1b1ca8ac0","modified":1524660419493},{"_id":"source/_posts/EL表达式fn-endsWith函数的bug.md","hash":"670c5e12323166126a4ccbac016e9729564578a4","modified":1524660419493},{"_id":"source/_posts/ElasticSearch-Canal-开发千万级的实时搜索系统.md","hash":"61aa88edd8041c6fa08109cef73e55cbbf8d67ad","modified":1524660419494},{"_id":"source/_posts/Docker的Secrets管理.md","hash":"df6f06130b3eff6a08f6767a5195859f02bd3b19","modified":1524660419493},{"_id":"source/_posts/Git-Commit-message-的写法规范之《Angular-规范》.md","hash":"29810449e6a74098b211f0a0f9323394ff1825dd","modified":1524660419494},{"_id":"source/_posts/IDEA中非常用的几款插件，分享.md","hash":"653457bdfc1cdf4211738732334ebdfeb1f0e1c9","modified":1524660419494},{"_id":"source/_posts/JAVA不借助中间变量交换2个变量的值.md","hash":"1c8cdfd182a30d9dbadf60a97a1d5932e27c18f5","modified":1524660419495},{"_id":"source/_posts/Java-9-中的-9-个新特性.md","hash":"fb62ebe5753c5d0e96ffdd76ae59b532fe1a29ff","modified":1524660419495},{"_id":"source/_posts/Java中创建对象的5种不同方法.md","hash":"b54406a241ae0aa2ea17b568ed97c85e3c8da429","modified":1524660419495},{"_id":"source/_posts/Java动态代理与Cglib库.md","hash":"0a5c36b1c27b6e24ec33d6883b4c639e7ded93c6","modified":1524660419495},{"_id":"source/_posts/MYSQL建表规约.md","hash":"995a957ee2fd1ee5381304b1303a56767e3218f0","modified":1524660419496},{"_id":"source/_posts/MySQL常见性能优化.md","hash":"5c927b002e249060835177a5a4dffcb61474d35d","modified":1524660419496},{"_id":"source/_posts/Java-线上-CPU100-排查思路.md","hash":"56318054ca26ddf0579fda36de18d4825233c694","modified":1572516217084},{"_id":"source/_posts/MyCLI：一个支持自动补全和语法高亮的MySQL客户端.md","hash":"cb900bf07698a4c1bb9962c4151828b282b73ff5","modified":1524660419496},{"_id":"source/_posts/MySQL里面这五个非常非常有用的东西.md","hash":"00b5b830b41ee2d569f0cdd3a21695a89a76b164","modified":1524660419496},{"_id":"source/_posts/Springboot快速重启.md","hash":"5dc0adf38e78d4a509452476ad524f7c34eb819e","modified":1524660419498},{"_id":"source/_posts/Sequences-in-MySQL.md","hash":"9e32c83559bb6c28084bcfe49b89abcd3dd695c3","modified":1524660419497},{"_id":"source/_posts/Spring-boot添加admin监控.md","hash":"c6631ca84f29dd836e97cadb6020debcaa7a8961","modified":1524660419497},{"_id":"source/_posts/Spring-Retry.md","hash":"4f2e8e155d7208d4576e9783e21cb3bf7fbcf8a4","modified":1524660419497},{"_id":"source/_posts/Spring模块及生态支持汇总.md","hash":"55d2c9c0c7710189f18616881b8b3f6e02624fda","modified":1524660419498},{"_id":"source/_posts/spring-中使用-logback打印日志，替换其他日志如log4j-commons-logging.md","hash":"fcf7399f22ac3eab7aac08a71803225a3e4a4808","modified":1524660419498},{"_id":"source/_posts/java开源项目.md","hash":"c986c301c96f868696f9268268b0de759b976af0","modified":1524660419498},{"_id":"source/_posts/从地址栏输入URL到页面加载完成发生了什么？.md","hash":"e3478f1caabd3a0fcf1c3baa6dd313752858415e","modified":1524660419499},{"_id":"source/_posts/你应该知道的5个Docker实用工具.md","hash":"7e9abca3aee2548b6e8fd5f7f76c8b2eb4b2db98","modified":1524660419499},{"_id":"source/_posts/四个Kubernetes集群管理工具.md","hash":"ab84a878c88493989fefa099f708f531bae47e35","modified":1524660419499},{"_id":"source/_posts/基于Docker的CI-CD流水线实践.md","hash":"a0cf0afdf1e763d4b8fb9463462f9831179a1755","modified":1524660419500},{"_id":"source/_posts/快速切换hosts文件的开源程序SwitchHosts.md","hash":"2bb719de02f713e5a8145bc044ad7f0c8380bda4","modified":1524660419500},{"_id":"source/categories/index.md","hash":"4559288e933b68895ff2cce6ff69686fb0c2040c","modified":1524660419500},{"_id":"source/_posts/怎样在复杂代码中找bug？.md","hash":"edadf07b5941bf1edaa7271d22f1dea46f3fca38","modified":1524660419500},{"_id":"source/tags/index.md","hash":"514659931541fcd4c5a6f82768a40de43513b5e1","modified":1524660419540},{"_id":"source/_posts/Spring为REST API实现异常处理.md","hash":"79691ab27edc00e828c112af69cbe13b33c3cfb2","modified":1524660419498},{"_id":"source/images/pasted-11.png","hash":"ac1aafd2009a5614617fb635f1cc5342f192b5ae","modified":1524660419505},{"_id":"source/images/pasted-12.png","hash":"15b41f429b74d945de03c1bf863ac1c3a504a175","modified":1524660419506},{"_id":"source/images/pasted-13.png","hash":"2ba7ca91d6350893a011f0d0adb7e8a0e0e474e5","modified":1524660419507},{"_id":"source/images/pasted-18.png","hash":"1a4e6cbaaf51296a1ab0ff3c1c6c3445cbfa7ba7","modified":1524660419510},{"_id":"source/images/pasted-17.png","hash":"1a4e6cbaaf51296a1ab0ff3c1c6c3445cbfa7ba7","modified":1524660419510},{"_id":"source/images/pasted-15.png","hash":"3c351ad07922d9105538336d3b6949014a921b66","modified":1524660419508},{"_id":"source/images/pasted-25.png","hash":"58459a1158ecad4d93d87d3170326fa487765060","modified":1524660419518},{"_id":"source/images/pasted-23.png","hash":"af8f44d2e0ef52e5623884d627883b7d978bcee2","modified":1524660419517},{"_id":"source/images/pasted-22.png","hash":"6266465f13bcce0d74c2b559394fc25ee1f6b33f","modified":1524660419516},{"_id":"source/images/pasted-26.png","hash":"b3c43767d0d662a571c44a2df7dd3829ab4cdd8b","modified":1524660419519},{"_id":"source/images/pasted-30.png","hash":"f9bdb62ba2ec36d9fcfad29edd4478c9a336245e","modified":1524660419522},{"_id":"source/images/pasted-38.png","hash":"4e82b7ef3215999420928f37701a431ec9c59364","modified":1524660419530},{"_id":"source/images/pasted-27.png","hash":"b3c43767d0d662a571c44a2df7dd3829ab4cdd8b","modified":1524660419519},{"_id":"source/images/pasted-43.png","hash":"42e2698bac9b914dd24a94db3cf4b61413101c1b","modified":1524660419534},{"_id":"source/images/pasted-5.png","hash":"47bf4df386b753b71afc487b07bfb36d520f358f","modified":1524660419537},{"_id":"source/images/pasted-7.png","hash":"47bf4df386b753b71afc487b07bfb36d520f358f","modified":1524660419538},{"_id":"source/images/timg.jpeg","hash":"7ca4486edcbcde0902f93e07f836cef9a779472f","modified":1524660419540},{"_id":"source/images/pasted-8.png","hash":"47bf4df386b753b71afc487b07bfb36d520f358f","modified":1524660419539},{"_id":"themes/next/.git/COMMIT_EDITMSG","hash":"8ffa4210d6186b41da1dc37c99d89b7d8d87062e","modified":1574732638080},{"_id":"themes/next/.git/FETCH_HEAD","hash":"ed50d6c5ce20f423d4e81cb48495c5489d0caa31","modified":1574732461485},{"_id":"themes/next/.git/ORIG_HEAD","hash":"be5d97812b6cf85471828c82621b43a496255389","modified":1574732461499},{"_id":"themes/next/.git/config","hash":"167559d3912dc1dfd6f77f753565aa4adac0de05","modified":1569143493239},{"_id":"source/images/pasted-37.png","hash":"8bf6708f21fcf6585df5f61b6e3606fe546a9e19","modified":1524660419530},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1569143478005},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1569143493237},{"_id":"themes/next/.git/packed-refs","hash":"53ebcf780badaa056d318d1b0668840b44ee4e86","modified":1569143493235},{"_id":"themes/next/.git/index","hash":"7727fd350b0c6d9b1f390e31e3faac3fe36dcd12","modified":1574732638075},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"f4825dd07e8c524f4be3fe99d36069828c1b8535","modified":1574232862958},{"_id":"themes/next/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1569143493244},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1571637313631},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"2a4ff75ccb91d9001032c08e22489096b850bf4f","modified":1571637313636},{"_id":"themes/next/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1569143493245},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"b09c85aa449f46bc025317ed196ec33a877f7c23","modified":1569143493245},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1569143493245},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1572769137363},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1569143493246},{"_id":"themes/next/.github/stale.yml","hash":"941209526c2f7d916c76163c9e1ac1af9d956679","modified":1571637313637},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1571637313636},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1569143493246},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"5b4c013e0598b3211ebd899265936cfdaf7c139f","modified":1571637313638},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1569143493248},{"_id":"themes/next/docs/DATA-FILES.md","hash":"d0d46cb265f0efceffce82214cd36d8b82ddce13","modified":1571637313638},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1571637313638},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1571637313639},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1569143493251},{"_id":"themes/next/docs/MATH.md","hash":"f520b336f16665e164d6edf075bdcc6aa17b31bc","modified":1572769137364},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"08cda41b4bcf687facfda19ab39718ec7a05ae54","modified":1571637313639},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"199e9ef3cb5928af0fe801d03d2d1aeea704cea4","modified":1571637313640},{"_id":"themes/next/.idea/$CACHE_FILE$","hash":"52134e9930f2eb86dd506509f2ac9c0f26c5ae25","modified":1571637137117},{"_id":"themes/next/.idea/$PRODUCT_WORKSPACE_FILE$","hash":"bb473a625784d10d03dcc2d2e773947c991283e0","modified":1571637137116},{"_id":"themes/next/.idea/dictionaries","hash":"00a3bf2468283557278d3f243070837aba358e21","modified":1571637137117},{"_id":"themes/next/.idea/encodings.xml","hash":"4f0663a31ba8aa2a7581c3829591cbca1ecb8dc7","modified":1571637137116},{"_id":"themes/next/.idea/misc.xml","hash":"7df46872d1421797d543d0323da2e81710cc573d","modified":1571637157381},{"_id":"themes/next/.idea/modules.xml","hash":"f12d89dcb3533c7be5aee037c75aa5bec585a817","modified":1571637157398},{"_id":"themes/next/.idea/next.iml","hash":"4240dabdc746a36bae8a56eeec04a3a3fc59d842","modified":1571637157371},{"_id":"themes/next/.idea/workspace.xml","hash":"983237e3ad1c2d1533208644025969d7a0f3e534","modified":1574732657647},{"_id":"themes/next/.idea/vcs.xml","hash":"c92f3eb0ad1c70371e177a4d7d741f90af3f902c","modified":1571637157390},{"_id":"themes/next/languages/en.yml","hash":"ed4c633c9bbf792edeb0923afe7071ef881f571d","modified":1574232862964},{"_id":"themes/next/languages/default.yml","hash":"ed4c633c9bbf792edeb0923afe7071ef881f571d","modified":1574232862964},{"_id":"themes/next/languages/es.yml","hash":"5d58eabdace2dda0ac2a1ec134dd53307ba558f6","modified":1574232862965},{"_id":"themes/next/languages/de.yml","hash":"1b129c08abea18a0533b973d8d81bb8cdf4757f1","modified":1574232862964},{"_id":"themes/next/languages/fa.yml","hash":"5096f3926d8ee8de774b2f4635cc6dfe15e5027b","modified":1574232862965},{"_id":"themes/next/languages/hu.yml","hash":"030788cbed906d686f84b874853278379564f8c3","modified":1574232862966},{"_id":"themes/next/languages/fr.yml","hash":"c62b46c6958650773475e161f0c22a7416923ea9","modified":1574232862966},{"_id":"themes/next/languages/id.yml","hash":"76c16e3333c0cfb67f7a6edb35b3cca0ae691c47","modified":1574232862966},{"_id":"themes/next/languages/it.yml","hash":"b9916c4726a9e866fa6cc8c3b30e57e9f453be4b","modified":1574232862966},{"_id":"themes/next/languages/ja.yml","hash":"9dfc048c0b9b890ee566ce1f8e815f159bf08a48","modified":1574232862967},{"_id":"themes/next/languages/ko.yml","hash":"432ef2f303734504ec35d2fb06094c2df6edae9c","modified":1574232862967},{"_id":"themes/next/languages/nl.yml","hash":"e3ab0efc2af598e235e3a9e7c34ef270e191253f","modified":1574232862967},{"_id":"themes/next/languages/pt-BR.yml","hash":"ccbc616e498334ae70fbd5f874b8b956acfcf288","modified":1574232862967},{"_id":"themes/next/languages/ru.yml","hash":"45bfcee9ab4dc7c0ae64218f806d8f65399e2c24","modified":1574232862968},{"_id":"themes/next/languages/pt.yml","hash":"6d13eb616547006cd151b78256b878b2832b7130","modified":1574232862968},{"_id":"themes/next/languages/uk.yml","hash":"398467fd2904e03b0f4c256888fb480ee3f88f13","modified":1574232862969},{"_id":"themes/next/languages/tr.yml","hash":"d7af0671d965e49dd6de1e4c3afd50e89843ca4a","modified":1574232862968},{"_id":"themes/next/languages/zh-CN.yml","hash":"f7b5981e911ec37b6ed5b16910a680f0e49de062","modified":1574232862969},{"_id":"themes/next/languages/zh-HK.yml","hash":"10451f308b62cfffed09329feedc78651bd2a16f","modified":1574232862970},{"_id":"themes/next/languages/zh-TW.yml","hash":"4420d2457b1153f37799dc20f1ee72cf1bade70e","modified":1574232862970},{"_id":"themes/next/languages/vi.yml","hash":"ff3c6d906bc22e65b6862c5ed017038f99f64112","modified":1574232862969},{"_id":"themes/next/layout/_layout.swig","hash":"512bdf6787b5d9fb1d40b126b0fa8e6f1018d1cd","modified":1572530170815},{"_id":"themes/next/layout/archive.swig","hash":"59155648f6306888077d1f1d635f63177b36148d","modified":1571637313664},{"_id":"themes/next/layout/category.swig","hash":"c55debb2588e4746b02d31ec249bf0a84fdea260","modified":1571637313664},{"_id":"themes/next/layout/index.swig","hash":"3bc6fb1e9707d74b96e1346d3f03fe6584f764f4","modified":1571637313665},{"_id":"themes/next/layout/post.swig","hash":"382d9f9a9b35e1f369585f7f9f9b5dd6fa58d2f0","modified":1571637313665},{"_id":"themes/next/layout/page.swig","hash":"e61d64c055b6497a04affc143f47fdd0a6dc495b","modified":1571637313665},{"_id":"themes/next/layout/tag.swig","hash":"7ff6e34d557a3da1c6a29ecd97842bf73ff213dc","modified":1571637313666},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1572530170828},{"_id":"source/images/pasted-14.png","hash":"2c603a03e60b10b255b78cfa269e993dc1c3c04e","modified":1524660419507},{"_id":"source/images/pasted-0.png","hash":"294dec29d4c865922229f28b73d2fba94a7df13f","modified":1524660419502},{"_id":"source/images/pasted-1.png","hash":"7bd23688e2a09bbe92ebc0adcfd19196bc150fd6","modified":1524660419503},{"_id":"source/images/pasted-16.png","hash":"4bd6807055023d9a9e481faf849ee8bc62518048","modified":1524660419509},{"_id":"source/images/pasted-20.png","hash":"4617b1ad507cf2e0beb3371ace234e47890ff8de","modified":1524660419514},{"_id":"source/images/pasted-21.png","hash":"9d030eb9bd44c056ce5d7cc8bb88622bfab0eea0","modified":1524660419515},{"_id":"source/images/pasted-2.png","hash":"2c6c9886be296c7446b68a13c1e773554ae91ccd","modified":1524660419513},{"_id":"source/images/pasted-24.png","hash":"bbf5aa85bd484a6d2ff3ea26275c4210e87a1cf4","modified":1524660419517},{"_id":"source/images/pasted-32.png","hash":"ba2afd6403098c8e20c729537cfe17129bcc761c","modified":1524660419524},{"_id":"source/images/pasted-36.png","hash":"da7945eb6af20943aff9b7cc3c3b659d2314d585","modified":1524660419529},{"_id":"source/images/pasted-35.png","hash":"fcd4cc393b8fbd058e83a0faf9f6fbd1b9dec775","modified":1524660419528},{"_id":"source/images/pasted-39.png","hash":"89c3b15dc1912debbb07ae07b5b05b04ec496eed","modified":1524660419531},{"_id":"source/images/pasted-4.png","hash":"dfd74cda87326e76ffb012d90a4a2ca4f8ef21ac","modified":1524660419531},{"_id":"source/images/pasted-40.png","hash":"ddbb24da3b3adbadadeba1d390283a56b04297fb","modified":1524660419532},{"_id":"source/images/pasted-41.png","hash":"014ff2a3caa684b71cab33e46444ea0245fcd93e","modified":1524660419533},{"_id":"source/images/pasted-42.png","hash":"014ff2a3caa684b71cab33e46444ea0245fcd93e","modified":1524660419534},{"_id":"source/images/pasted-44.png","hash":"38bdb67fbc654a35494184cbcc8a298f26598310","modified":1524660419535},{"_id":"source/images/pasted-6.png","hash":"3393e9bcd8d1bc456ca4bc6b22f49cbb027acf23","modified":1524660419538},{"_id":"source/images/pasted-9.png","hash":"3393e9bcd8d1bc456ca4bc6b22f49cbb027acf23","modified":1524660419539},{"_id":"source/images/pasted-3.png","hash":"f635e36e67673df69e442cbb744494ca8d6845a0","modified":1524660419522},{"_id":"source/images/pasted-29.png","hash":"a9a5dba9060eaaf00b822019a156f4d1b8f3531b","modified":1524660419521},{"_id":"source/images/pasted-45.png","hash":"9a8a1b7d315537edad5015b2aab408e7afe9b9ee","modified":1524660419536},{"_id":"source/images/pasted-46.png","hash":"a5e4a83c019c2a0fc7186ddaa0061b0083dd0c28","modified":1524660419537},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1569143478006},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1569143478007},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1569143478005},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1569143478008},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1569143478008},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1569143478006},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1569143478007},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1569143478006},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1569143478006},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1569143478005},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1569143478009},{"_id":"themes/next/.git/logs/HEAD","hash":"152c1beffa87e09077a3432a2755cb662996168f","modified":1574732638107},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1569143478007},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"2f85f500781124b1848cc419f864797399fcdabc","modified":1574232862961},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"80c31b258f404a16ffc19706c5e5aa3ccb8c887e","modified":1574232862961},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6d79701dd0bb3757722650d9df30eeaacd83344e","modified":1572530170807},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"bf8b10715f5529cc6997501d821307895710ba58","modified":1572530170807},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"2665f6a9d72090f9452a8811544ff2596e8899be","modified":1571637313640},{"_id":"themes/next/docs/ru/README.md","hash":"a8fa084606a00eb5139e7675d9cf49c5209e063d","modified":1574732461517},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1571637313640},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"4245fe9472647226692fcbdd5a52d6e6dcd251bc","modified":1571637313641},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"fe3f5cda1975114884d84bef384a562920d70335","modified":1571637313641},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"ebacdc94f6f9724a7c6ef7c3cdde41ff7c37931a","modified":1571637313642},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"3b4dbf0d2ca12ab442b7e0e227769ce100b8a444","modified":1571637313642},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1571637313642},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bc159df1260e0c912c509090d54dd20a08201100","modified":1574232862962},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"264d131b8865bae069f8e4d78a33a0f59d28e36b","modified":1571637313643},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"2d60a18340c9260cd4dc81fe8acc7983d6b2d011","modified":1572769137365},{"_id":"themes/next/docs/zh-CN/README.md","hash":"4754aa33010eba137deda39a81b8f1160c8e38bd","modified":1574732461517},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"8109a531d3a7f5a306e36d4304c11f0c7c180c87","modified":1571637313644},{"_id":"themes/next/.idea/codeStyles/codeStyleConfig.xml","hash":"eb61e0b2d1d03323c5dece04bf9fb9e9de029d8a","modified":1571637157414},{"_id":"themes/next/.idea/inspectionProfiles/Project_Default.xml","hash":"1bf9da79ce2b05fbd07ef1a56a6e15b44e002507","modified":1571637157266},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"815676d904f92748ddf4f529bed2baf066997bc6","modified":1571637313645},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e2c9db54cc9e154e882008fde6588b065fadc9a7","modified":1574232862972},{"_id":"themes/next/layout/_partials/comments.swig","hash":"3a72e3d72980fa0944008b36b284b044d0e84b2a","modified":1572769137366},{"_id":"themes/next/layout/_macro/post.swig","hash":"04c19d48a14cc10e5b21295a874647d3c5b584bf","modified":1574732461518},{"_id":"themes/next/layout/_partials/footer.swig","hash":"434a4979c376c1ff27380c778d0261fea8d0a0a4","modified":1574232862973},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1571637313656},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"b9d3f6534efb9e637ac46318fa07c2e5607bf830","modified":1571637313654},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1569143493276},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"9675acc599ffa546f05a60375c1637b0327be4fd","modified":1571637313658},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1571637313659},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1572530170819},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1571637313657},{"_id":"themes/next/scripts/filters/locals.js","hash":"2601d05d44ad2b59370477cb8f61dd95898a1a9c","modified":1574232862977},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1569143493294},{"_id":"themes/next/scripts/events/index.js","hash":"9047d8ae2670e43429b16a7919a08a0a0a81afe0","modified":1574732461526},{"_id":"themes/next/scripts/filters/post.js","hash":"3c1e483c2c4a1c5a2f9a99b81ce0fda5fd21926b","modified":1571637313669},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1572530170821},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1569143493281},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"dd6bd817cb69b5ad5e9746498146314b54054ff8","modified":1574232862976},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"da6a9d14ed10203e378c6e2c00a7b5e7afabca58","modified":1569143493285},{"_id":"themes/next/scripts/helpers/engine.js","hash":"c8c8afde59df587f883dd9b47a3c629042bc4c6e","modified":1574732461527},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"e60e6c0aaa979d42b01685ba2a03a76fa6e059e2","modified":1571637313670},{"_id":"themes/next/scripts/helpers/font.js","hash":"32268fb4c59c5b37c1eb1c9582ab630e09e5cc7d","modified":1571637313670},{"_id":"themes/next/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1569143493296},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1569143493296},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"8f86694a57d30685c4ced381f1ed09e8114dbb6e","modified":1574232862978},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"20e392b8583ba6ae5037449c2c7e191d3927641b","modified":1569143493296},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"fad54f0e9e225a70390209f63d9b3cc566a5ebcb","modified":1571637313670},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1569143493297},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1569143493298},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1569143493297},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1569143493298},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1569143493298},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1569143493298},{"_id":"themes/next/source/css/main.styl","hash":"68c3377b643162aeaae2b60c196486fdb3b509c3","modified":1569143493323},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1569143493323},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1569143493324},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1569143493325},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1569143493323},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1569143493323},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1569143493325},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1569143493325},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1569143493325},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1569143493324},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1569143493326},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1569143493324},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1569143493325},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1569143493326},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1569143493326},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1569143493326},{"_id":"themes/next/source/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1569143493327},{"_id":"themes/next/source/js/bookmark.js","hash":"c9acb262acf0cf127497b570fa9479fb32f34547","modified":1571637313705},{"_id":"themes/next/source/js/local-search.js","hash":"fda0f761ae20577f22c1528dde7ae059368fe9a8","modified":1571637313706},{"_id":"themes/next/source/js/utils.js","hash":"ba4c1cb25071a9fe0b94dd001d2413307bbaeb80","modified":1574732461530},{"_id":"themes/next/source/js/motion.js","hash":"9ac69597315b5b7b4c8900b7949d2a31387d6284","modified":1574232862985},{"_id":"themes/next/source/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1574232862986},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1569143493329},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1571637313669},{"_id":"source/images/pasted-10.png","hash":"b42ddaadccb80e70d5cb481e3952bf030b4a885a","modified":1524660419505},{"_id":"source/images/pasted-28.png","hash":"a9a5dba9060eaaf00b822019a156f4d1b8f3531b","modified":1524660419520},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1569143493316},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1569143493316},{"_id":"source/images/pasted-31.png","hash":"6a4a84f49155d807e9e9def744d0e0fe6ab8df64","modified":1524660419523},{"_id":"themes/next/.git/objects/00/c2b952f5fe605eb9f695a4c31823f537687144","hash":"445a5e72266f2a99c05287ebb381ac4f18d01d2c","modified":1572530170749},{"_id":"themes/next/.git/objects/00/fd99f327ded77f097a180c9e1de7b96927389f","hash":"bfdb9e4861e87771af462b8f821cccfe364b8393","modified":1572530505000},{"_id":"themes/next/.git/objects/04/0ac7ff3803a7d94fcbc52ddb4dc0f512ba77c8","hash":"bb86c43e5c6eb2287ee76b09450130149d75e981","modified":1571637441891},{"_id":"themes/next/.git/objects/04/0e3fe562baeb31cdf1f8505e16549b7ab12d1c","hash":"c1dda45f8d24e30efc56376eceb01d4e4f21bbe0","modified":1572530170096},{"_id":"themes/next/.git/objects/16/4e6f66ea372d4cf34f700d3ec4349c678bbd9c","hash":"6d59491c64cc195eb1be3d5f22399af982ec5ccd","modified":1571637296758},{"_id":"themes/next/.git/objects/0b/3190eae6a3630ca7af1f6c4fb2f3bafa67ea2f","hash":"47d136ec94f440ad7de5b8dc4bd4b00b8ab3297e","modified":1572530505000},{"_id":"themes/next/.git/objects/07/77b786372f1ef291f1f3535487fc68c96a4393","hash":"6ec30bf6090b8b9ff86021d007c7aa89c5e6fcd2","modified":1572530170750},{"_id":"themes/next/.git/objects/07/21c7b12574ff871f685a2cc4784f05f6b779cf","hash":"d5348f680d9e84886ed9de21016f132846016f0e","modified":1572530094074},{"_id":"themes/next/.git/objects/09/93b1c27035595c4ec3337413a739de8aeea7cd","hash":"d4e366a414e9b809174c3d189d6e7a4fe8c3d955","modified":1572530505000},{"_id":"themes/next/.git/objects/17/40c1fb191f9d5c8036ae3eaa9ce53fcf667aba","hash":"652542203de7aa3f4fe5f34ce4422b888430938f","modified":1572530505000},{"_id":"themes/next/.git/objects/23/1d070f1ad02c0f2db8c6f2152a3cf9587e9920","hash":"bf96e587dfb2cb6bba88b05a4da90e96f7450afb","modified":1572530170138},{"_id":"themes/next/.git/objects/10/e05e787d2b6b6299e8eed2aabb91322131e792","hash":"397d8ff4cdc5de3860fa40c7aacaa64bc60d0714","modified":1572530170116},{"_id":"themes/next/.git/objects/28/c70b0d61aa3d987064f8ac470c63c80d17b3f9","hash":"23ecf985ad0b74d0f04564d5c1e4ef6a94da319a","modified":1572530170100},{"_id":"themes/next/.git/objects/1f/3e78f709e0e5200e3a5af2f0a685ed230c28b5","hash":"cf1e777ccbb0d92ae641df91d6888592a3ef9c6f","modified":1572530170144},{"_id":"themes/next/.git/objects/28/e50796ee3d7c5e35ce644644a0f523007c816f","hash":"0377ffe5ae2dece1df6fbd69006dc28c9df7d2e2","modified":1572530170753},{"_id":"themes/next/.git/objects/28/da4c95ec822960e8a5f7de530cd30c8f8c6f65","hash":"feb5146526356df2d617830dd22f2e98efd74342","modified":1572530170137},{"_id":"themes/next/.git/objects/29/644418fe83f0bf03e501884dc80e0213548eda","hash":"ec0db725aaa9d6b2379519ee26f53758640e9058","modified":1572530170093},{"_id":"themes/next/.git/objects/32/4f1e9f9a70dbdb88662aac66fdb9c92265b91d","hash":"d69b02fc9942947fa0c38f2d9912cacfd5dca122","modified":1572530505000},{"_id":"themes/next/.git/objects/2b/f5a062f52db8cac0f498348f67edb5cb4118cd","hash":"0730ffdb07ff607435eaae75face646d27504d49","modified":1572530505000},{"_id":"themes/next/.git/objects/3b/e12a2aeb9cb0b56104e6766f38b917a78cea3f","hash":"79a529d1884aedef694c0dd3cc3577e66180b880","modified":1572530505000},{"_id":"themes/next/.git/objects/4f/c4e1073cbc430cad35089adab5769d294c1326","hash":"b6e25d5bcd3baa23f8f497ac53ad28a2a027e015","modified":1572530170134},{"_id":"themes/next/.git/objects/49/46fbc14e79baa17a08ac726e7f14c7bfac32d0","hash":"e5ce358f30c09a736e32cc6b4aa31b9d360e3529","modified":1572530170139},{"_id":"themes/next/.git/objects/50/1cf7a03324c8e7ff44121454c0d1c333358120","hash":"adf72f9f1cd1194a483ed98abcca9b4e5d9b9140","modified":1572530170591},{"_id":"themes/next/.git/objects/3e/f427c5ce9e8171fc415906f4f87b7df1bf3eba","hash":"6f47c49826a0a3ae54f409c2129676b6325442de","modified":1572530170185},{"_id":"themes/next/.git/objects/4a/3d138d5965c4e8baaa047c832ff28cec0c1d41","hash":"5cfd7650e336e6dcbfee4de43c17b9c2d6d28568","modified":1572530170151},{"_id":"themes/next/.git/objects/52/50058eae85f3e34649ef9a883150034c20dbe8","hash":"fa8de084518a232f9a4904baf2a6340e3963f946","modified":1572530505000},{"_id":"themes/next/.git/objects/23/3d1486602fe7bd9c0c8452f70dabe4d602f19d","hash":"337a2ea3f6cd3a3112a1ef71f9b1ddd62e833caa","modified":1572530505000},{"_id":"themes/next/.git/objects/51/4faedb2ee495d44f6da8ab0ebc270fdb872df9","hash":"6c2f1554e9ade94edc8901d53ae27bfaaa30e10a","modified":1572530505000},{"_id":"themes/next/.git/objects/59/8032979b86971533aed81c6392af64e5de8d76","hash":"64dbfd644c8e72f3d17022528a4a9ee9eb8d5a2e","modified":1572530170150},{"_id":"themes/next/.git/objects/5a/7d99525d939acdf1133d642da572227b0bbba1","hash":"e725e507bc15f6f7f198512af72b7f9a13a9de3d","modified":1572530505000},{"_id":"themes/next/.git/objects/5c/9295788f5dc664f50032863ceaa814405929df","hash":"232996929badec5b1cee7a0fae0b481649b59c3a","modified":1572530170148},{"_id":"themes/next/.git/objects/5c/82ba355867f0694f6541d946a24f0db5630067","hash":"516c940642c6653c5abd112b152efb9aeef1c97a","modified":1572530170184},{"_id":"themes/next/.git/objects/5f/8b4a2c3652f47519a217755d5cd0c5c8bfbd74","hash":"d8db07f2a551eeb261aaab1e0fbc0aa158b7c5d1","modified":1572530094079},{"_id":"themes/next/.git/objects/5f/b38ec8e0a7f83da1bce8c49ad7adea7531dedb","hash":"839915051196c6f40699c872bfb8f091634bca86","modified":1572530170146},{"_id":"themes/next/.git/objects/64/aef636c34a4da10666f5e0711e4113b681df78","hash":"57442945fce69944f049c0f02979dfd6cd8f4a2d","modified":1572530505000},{"_id":"themes/next/.git/objects/66/7dfdd8a5cdc40ca979c03de6b43cc8fdf71548","hash":"3d88f4120b3d768e14458dccd411494011e0f6d8","modified":1572530505000},{"_id":"themes/next/.git/objects/5d/4afb70b544cb432425a5009bc4aa3d13db5d02","hash":"80ff2c2e29f54e560c814b3b9ef8bd1c8e35d305","modified":1572530170593},{"_id":"themes/next/.git/objects/6c/5ef7ee750acaaff9a8c5153d453c8936528805","hash":"34ac9894e0e8465f93592368602cc64a430c6ba0","modified":1572530170134},{"_id":"themes/next/.git/objects/61/1fc7176c63b09bf7bffb110346d38d9f6ce77c","hash":"30268a31227f73f81273d23a11b503d0f0c4212d","modified":1572530170091},{"_id":"themes/next/.git/objects/64/e5b3fecf7f004e058a850cbde81724f7d9a013","hash":"aea3208df5f044e856fb1ea69801474379b0c88d","modified":1572530170587},{"_id":"themes/next/.git/objects/6f/0c0f5344c5a8af6440791ac20f437d3f1b1d9a","hash":"e40bd808a576a19a96771997dd7457dc0c4e7d4e","modified":1572530170135},{"_id":"themes/next/.git/objects/7b/6a936c6329d593c503060f081ebde61e2d2637","hash":"442af980fd104291b7a40ad01e03d5f12e52a036","modified":1572530170129},{"_id":"themes/next/.git/objects/6f/b30812f4a7665f0e5610ef0e345bbdd3d31aa3","hash":"58308c6308b5366760ce452fc5e0650b3ff9140a","modified":1572530170145},{"_id":"themes/next/.git/objects/73/63dbf4fcbbb62356c84af37407167d53b258f0","hash":"f72e0840289a687f1ab6c08257ee3542abcb1792","modified":1572530170120},{"_id":"themes/next/.git/objects/7b/f4d0d0090bd7860ce46352d7f5f76c2295bf08","hash":"9d5169a4adfc01d84cc3a6d2ea79598df570d51b","modified":1572530170121},{"_id":"themes/next/.git/objects/87/0a3a07602fab4af4f78ad53abc38afa04599c4","hash":"040e136935938e9fae48618a1dbe8bec47025535","modified":1572530170095},{"_id":"themes/next/.git/objects/81/5ce0379e2b8287e21e6d27d11719833dafe6c6","hash":"5aa7ed1fe141f614338b22c99b48dbfaba779e12","modified":1572530170147},{"_id":"themes/next/.git/objects/87/7aa7e9cd1e233541d31f9b6e656a4c6371a5ce","hash":"d9b7aa4fd0d825c30f10792e35875ca8b6752945","modified":1572530170118},{"_id":"themes/next/.git/objects/81/b17b492921490f1f9e5f5f50be77b595d2542a","hash":"7b7cd6d0a5c35970a7df1d9960614040a04d1681","modified":1572530170143},{"_id":"themes/next/.git/objects/89/745c7831678f49eff836ee9ae9b7fcd69de3d4","hash":"746f28932d44c97d27b0902178fcf07062537ff0","modified":1572530505000},{"_id":"themes/next/.git/objects/88/b184ce32425ce9a4b0e7d8f8e0c49b8bfe917a","hash":"cd733ca9745404635c69bc8d4d23958c90429b84","modified":1572530170095},{"_id":"themes/next/.git/objects/8b/64bcdabecb639c447326d4c6db090f7b14f850","hash":"5ca83f476988eba888f4b9edccd49e1c12948478","modified":1572530170151},{"_id":"themes/next/.git/objects/89/014c3150f68845b6d72592fa4078006c2c6116","hash":"bd8cff4bfd4f0ced4e36009e5085663e4cd0a1d2","modified":1572530170094},{"_id":"themes/next/.git/objects/8c/2529f1d3d43d27602b04c9930e9b11a6354628","hash":"e68fdbcc75b17edac5891a99c436aae566ac51a3","modified":1572530170114},{"_id":"themes/next/.git/objects/8c/a885077ac3f687a0caa0a7acca0cdc8416d486","hash":"f4449532087c36853cab7e2a40633d6d6855e384","modified":1572530505000},{"_id":"themes/next/.git/objects/8e/fd696b5d3d89b33819c86172ab60f5dc961fc0","hash":"12a3ba2320c34578c47b98203b9d659c6bf1653d","modified":1572530170145},{"_id":"themes/next/.git/objects/91/f23f539d1aeaedcbb65bb391b782f0b925775b","hash":"b83e4cda0c0eb55f3bc13a486cb6a901dc4c6364","modified":1572530170092},{"_id":"themes/next/.git/objects/8f/d39474cd17908ebd55129e278bb568823bddc7","hash":"dbb0944513aa5364c61c12bcaed4058c2e0e7e5e","modified":1572530505000},{"_id":"themes/next/.git/objects/9c/9097f5de219d7d94fcbc1881eece7a1baf3515","hash":"62e2102ec05bb8a2cd9f61d9919534b6fb99ea07","modified":1572530170149},{"_id":"themes/next/.git/objects/aa/c6f5e900605e88b4db2c377a03f964bb336cd3","hash":"85afe85aba6392666276fe21990258f6c882963e","modified":1572530170122},{"_id":"themes/next/.git/objects/a5/717bc679f8e170b566f9ad9503e4e378f735fc","hash":"3281db55cd8225fa4a65201cab2a024d8b9253ce","modified":1572530170845},{"_id":"themes/next/.git/objects/98/11fc442ad18a5ec0e1f05b9d2ded5a8a5c0dff","hash":"bf9a50416d67bc9ba670a2f0042a00f46421ebf8","modified":1571637313752},{"_id":"themes/next/.git/objects/ab/83e9067893ce1c3a7ff5b938d1025ccf8e5e0d","hash":"b849dab3b9979de8977411332c9ef4e1797b99f8","modified":1572530170744},{"_id":"themes/next/.git/objects/ad/8b3ad1fbc2cec78086a8da30afd9c432ef389f","hash":"05faa13e46aaaeb1ec4908918818dbc3bef5b58f","modified":1572530505000},{"_id":"themes/next/.git/objects/ae/966aa635daa8ff58eac5e78dfb04439a10aa6a","hash":"258f14218e972d3ca5c9dc170831d9f7109326ef","modified":1572530505000},{"_id":"themes/next/.git/objects/af/251d924b6123c8180ac76505ba8be0e0987c02","hash":"666a348e964d42a739118e09b0c7ccc0de31f16e","modified":1572530505000},{"_id":"themes/next/.git/objects/af/e2fc1c54020df55e56e6f087bb3a374b1384bb","hash":"c007c869c470a134a2c5461b75b236232b620aeb","modified":1572530170141},{"_id":"themes/next/.git/objects/b1/2d10d063a4f5879014a2fabdccd59f456c6c86","hash":"2e5b9a0cf355112cc6bb29d3638a3f1c7a943659","modified":1572530170140},{"_id":"themes/next/.git/objects/b3/2a9896676f51b3ed300c9fd37ec8ced205277b","hash":"5c5725aa45603aa4f8aca83367705972cb902833","modified":1571637296755},{"_id":"themes/next/.git/objects/b9/201f3d4b9c675732b6e386caff576a9ae2c463","hash":"9bc8406ac0561462e4cdcfddc2a620deb2a5b932","modified":1572530170147},{"_id":"themes/next/.git/objects/b5/da6673a5278140e72b1c5d49896d1843df186a","hash":"08843d65748935c2812ecd96354e2c68fb8c8986","modified":1572530170748},{"_id":"themes/next/.git/objects/c1/9e7053b2f1963ac56bbfc19e0fae45df80adab","hash":"017a292a6be57e47114f86019b2bd8a2cc806d1f","modified":1572530505000},{"_id":"themes/next/.git/objects/be/5c75a09a0f6c5df2fa0acf30074cd398a1eeaf","hash":"4c8b60eb9b756bcb879467cd12891ab73020f955","modified":1572530170119},{"_id":"themes/next/.git/objects/bf/e7e23c4d62752e47c3e5387a83efbef46d9574","hash":"9dd42932b09882c449458f706f38375ed46d972d","modified":1572530170186},{"_id":"themes/next/.git/objects/cd/ad71cd8005bdf58ad5c124668441450f621913","hash":"6e0c0174d9638bc9ce849c7d3c5cc8d72283b299","modified":1572530170097},{"_id":"themes/next/.git/objects/c5/49525ce08e2669f66bf0f3717bfa9a0f0136db","hash":"ae23e187efb3ac429902dc9b56cdecff7122d9f8","modified":1572530505000},{"_id":"themes/next/.git/objects/d6/ee0035b4e6d0cca6b516f3c620a8598053b413","hash":"d1943d24f0cf9956e047ea98b95e392ca59e42da","modified":1572530505000},{"_id":"themes/next/.git/objects/dd/a5eb32ffbe60707649284e06331ce1effdb619","hash":"8424f82010ccd5ad7c009a30e2e1bbc859ba9dad","modified":1572530170111},{"_id":"themes/next/.git/objects/c9/86a5f5537763b44152c27ef078816b925aae04","hash":"904e4a5a458c6fc0e56b9e7d98e87278e4a16b77","modified":1572530514000},{"_id":"themes/next/.git/objects/e4/b0e43aa9c89149ef30f114d72cca8b8eff2380","hash":"505babf78c062776fed99bd8e03ca6e9a45a89b1","modified":1572530170104},{"_id":"themes/next/.git/objects/e5/5f8a0943674f8a5b04f6babd34a7316a4a7bf7","hash":"f8de3b4f74437ff1656eae028c6c9382e02a1c04","modified":1572530505000},{"_id":"themes/next/.git/objects/e7/cabb9ccde433eb66f3146d7b2d7fbb0cd2f0b1","hash":"979cec85efc943a211285f3c80521c7a5c221b4e","modified":1572530170136},{"_id":"themes/next/.git/objects/ee/6f4490e8d7ea746f987d19dc4c64ded1f77c51","hash":"aa9cfd3e9a51639aaa49533f86670922883c8ab8","modified":1572530170139},{"_id":"themes/next/.git/objects/f3/8446a8a4cb3eb9d9c9798a3af380f0b015ccc6","hash":"6a6b52e291097b5b521907e6e05e6fc9c26f3200","modified":1572530170752},{"_id":"themes/next/.git/objects/f3/eb3789519583dc5e85b47415b3dec42fe69ebc","hash":"2d63bc22709047669b01618998801fdd2d85e02e","modified":1572530505511},{"_id":"themes/next/.git/objects/e7/7270d30b01d677da6f06f6ac5cd53931fd3835","hash":"885ca506ce7676cf637e4c0e2ea7ea71643daa92","modified":1571637274245},{"_id":"themes/next/.git/objects/ed/d6f793ec0007b00327eb3c234159a13211ed04","hash":"b703ec3639445fb715c640ed3b7c18e229993d65","modified":1572530170746},{"_id":"themes/next/.git/objects/f5/f0a72489ebb347e280db24a47fe01fddb12fba","hash":"a1aac61d599490381c59ffab8da228f47c1dea52","modified":1572530170149},{"_id":"themes/next/.git/objects/f6/2fb97ab3bc2c2d8f0bae8aa4107dfaaca13943","hash":"0b8d93fd4c3168f689a03a75370a98838dad2040","modified":1572530170142},{"_id":"themes/next/.git/objects/f5/ec90ad0ee1b74dabb5ea9a2aed789f2dc4ceea","hash":"f8373916232b4ed29b2302c19d0fdbc335c23860","modified":1572530170591},{"_id":"themes/next/.git/objects/fa/51d638cd1aa640371639bf4054e39dfb6f2d33","hash":"5a8057480afac5f758c14de2a55b0faa4ba42c69","modified":1572530170098},{"_id":"themes/next/.git/objects/fb/e24212d79bf71f4461cc762920f6a05748a87d","hash":"27465381ac9c59f4299672de4ee0a82ca710a921","modified":1572530505000},{"_id":"themes/next/.git/objects/fa/dfdd475df23fa8802b910b0ab36cb46b0da5fb","hash":"2b9077030077881b2150d0628bc5e606875c720d","modified":1572530085581},{"_id":"themes/next/.git/objects/fd/6ce331bb05b6ad0eb8168e3ce56e24d157a068","hash":"60249426489c656ea5402ef8120448b2ec6979da","modified":1572530505000},{"_id":"themes/next/.git/objects/pack/pack-34b7ca70955bc0d87bfc16265c6e31012179767f.idx","hash":"5ce899fc0befe4e9f6988212f65a6161a3753da2","modified":1571637252755},{"_id":"themes/next/.git/refs/heads/master","hash":"d2fd0fbac43bb83f860f50278864cc8864944458","modified":1574732638106},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"f5d2c5a3421ae52888be62e2c837459d1175cc93","modified":1571637313649},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"4b1d3582dcc6c9bad6b9b2ec25cca7bc9a3aee5e","modified":1574732461519},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"7487ca8f0e4b16351ea0d6b35dc52b0d32176d57","modified":1571637313651},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"fbec9f77139e1f300509c38446416b4b26350cfa","modified":1571637313653},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"30528a8da30994b1ef9355a72b09b2cd85a7c0e9","modified":1571637313651},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"ff33b5797f5e4b5cbcb3c222c17bc636c6b88df6","modified":1571637313652},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"a56e4f6ad95c106f361d354f828d1ef4810b1d76","modified":1571637313653},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1571637313655},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1572530170818},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"78cb2077f50bc3b81130a516ffc04bc1fcea5834","modified":1574232862974},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d488664bc16608b5f829f959c2058b4381be244a","modified":1571637313652},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1569143493272},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"7fa01334a0ba84500e920bb9202baa08067d2ee1","modified":1569143493275},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1569143493275},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"733d6874aa4f50d1071e670a554508a5a0094eb3","modified":1569143493275},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"becfa683c3e5409e20cdb7b1dc8a6db331bddefe","modified":1571637313654},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"d4f94b643ac87d4d858cd8a6f70e030613f98b48","modified":1574232862975},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"246ff123cbaa507f23514c0c51c6cc006685898e","modified":1571637313657},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1571637313659},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1569143493278},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1569143493278},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1571637313658},{"_id":"themes/next/scripts/events/lib/config.js","hash":"246e55d48f2f3ef510c11594c7c08ddb93ac0928","modified":1571637313667},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1574732461527},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1569143493289},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"1fc2a94b94108175848ba9541d05898c071386d0","modified":1571637313667},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1569143493290},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1569143493291},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"d2ce60980fc148bfb877981aabd07bf45d2cdcda","modified":1571637313667},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"c081166868e6428a07c51c5674b86b7a4cc9c2a8","modified":1571637313668},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1569143493292},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"3c4bdc2a682f9889a532e1cb856bc5caeb4208e1","modified":1569143493292},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"5201cd09a5e263282ccbf205f07d46f4c6d3f700","modified":1571637313668},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1574732461523},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1569143493280},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1572530170820},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1572530170820},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"fdcf006e1ba2e53eab65e901b6c63159538307ef","modified":1569143493281},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1569143493281},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"1130b8bd60f3b84397974486e6586d7f0afaf836","modified":1569143493282},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"fe3cdd70224bd0c8171513a5dfed7b85deb7f23d","modified":1571637313660},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"9719cb5858896aef86c2e0bec0ace259936680c4","modified":1572530170821},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"8063f65cdaae80840fcf427b875ae606f678dfa5","modified":1571637313661},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"a9c8e7987b63b9ef66e47b966aea05ac77ff920a","modified":1571637313661},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1572530170821},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"6f95bc4d7ffaddc3c0df0ef3eeeaac58ff83f560","modified":1569143493283},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1571637313662},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"fb27a38f9a4b8fcba4f637b03904f7a83cc73416","modified":1571637313662},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"e456d7a2aaabe55447f78cd952b30d70a6c1e742","modified":1571637313663},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1569143493286},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1569143493285},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1572530170841},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"0ea0bac09b0747bc16fde852164c0eaab2efe02c","modified":1574732461524},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1572530170841},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1574732461524},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"693819ef652b211167f35f26fb90750531826a64","modified":1574732461525},{"_id":"themes/next/layout/_third-party/statistics/tencent-analytics.swig","hash":"493a1ef6c8f475d4dd3156a6ab37690dc75695ea","modified":1572530170839},{"_id":"themes/next/layout/_third-party/statistics/tencent-mta.swig","hash":"198813a3f382bda4278fe3759bf0f18a5769bb33","modified":1572530170839},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"7fa72dc60c078842979861622839b109683e05a3","modified":1571637313664},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"4958fa997ff6df2b2ce05341f40cc3a81b0f91bb","modified":1571637313663},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"52550138127ae9ebbe049bcdacd94d767c003855","modified":1571637313700},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"b9d7058db61df7bbd2b58779efe45621a06ffc18","modified":1571637313701},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c261d685c5ed0df34718d94bb2ba977c0ed443e6","modified":1571637313703},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"50bc57e66331c0f15a4527010b4ca3316ac92403","modified":1571637313703},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e76e0e411c9892004e73e1bb7b3c1cca2191eedc","modified":1571637313704},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1569143493315},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"644c1f0b02be9bf59955ebdf496136b3fa4b660b","modified":1569143493316},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0a25f3df1b5c39794365efde387647da81da884a","modified":1571637313695},{"_id":"themes/next/source/js/schemes/muse.js","hash":"792f4522a3b0b96584a041a4aca20fcded410079","modified":1571637313707},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"dccbb1be3938050e13277251ab5d88c736edf396","modified":1571637313707},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1569143493330},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1569143493330},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1569143493330},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1569143493331},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1569143493330},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1569143493337},{"_id":"source/images/pasted-34.png","hash":"d5802ff33aac83051b050a100eb7e48c42e26429","modified":1524660419527},{"_id":"source/images/pasted-33.png","hash":"2203801fb2705e369d0d19dbb8138a851e4b99d9","modified":1524660419526},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1569143493337},{"_id":"themes/next/.git/objects/07/17f4e6e46533302af0a2f542b8ac0c68303548","hash":"46b2becdc78ef331578bf68daa86d03098b66130","modified":1572530510000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"152c1beffa87e09077a3432a2755cb662996168f","modified":1574732638107},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1569143493237},{"_id":"themes/next/.git/refs/remotes/origin/master","hash":"7a3e246fad3e4f0e234c1fc229f5c9cff09f0ae4","modified":1574732461482},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"112f5e8f1fe5cec4419e87acfbdef0e615ed23f3","modified":1572530170829},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"80d359661d08b80ad561b97f8508766b3e1f6d01","modified":1571637313671},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"47ee915d7b0a97e74140a25fbfc01c04d6781534","modified":1571637313671},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"41c7cd1b63d49476ed5fbdd26ab9411d8f44bd05","modified":1571637313677},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"170c4598cbbe49cd1527f94158d97d2320a6b906","modified":1571637313678},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"29d865f18f904b23a182d2f3c1e077e663d5874b","modified":1574232862981},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"d8ba44b8e1a0332c5c1079ff65fc83d2918a5865","modified":1571637313741},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1571637313738},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1571637313740},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1571637313691},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1571637313692},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"2b52b0eb4c66e06762cf115450da0ca1dd435e75","modified":1574232862982},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1571637313694},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"990bd301ce2de0a6b936781c58318f3945d81bc2","modified":1571637313744},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"44fe82eadbdbb2f66adda37ac83ebd0f85876bfc","modified":1571637313682},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"48743ac61af37a4de2026667e15a65de5e8cf542","modified":1571637313696},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"4fb385d8533877678440c8faa08b68fa793cb1a2","modified":1574232862984},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"1693ec6b53758ac15d2c7798c789d6ae8af913ea","modified":1574732461529},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"24a086a6904bbf5355a354403c9b0e6069f7eb01","modified":1571637313696},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e321bd62f5e04d1fdc101a470ec13604e99816a5","modified":1571637313696},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1571637313696},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"f1f81bca31e82ccbd375f0cb9fb8dbb3beac810d","modified":1571637313733},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"c0ed534696ed86560c95ab2a3541b2b42a41ed39","modified":1571637313699},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"f5abb2ea7746586738fb4e82107fceed041708ee","modified":1571637313699},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c59226767164285d6708d8762f937f93bab264ca","modified":1571637313699},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0424a1fcffa1ae82fe70935972a894aca885bf9a","modified":1571637313700},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1571637313734},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1571637313700},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1571637313697},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"316ee13fc26d327c8862c2455211144c180cf9c1","modified":1571637313697},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1571637313698},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"eeab294e14abbae231107e1a327e907b25323136","modified":1569143493319},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1571637313698},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1569143493331},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1569143493332},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1569143493332},{"_id":"source/images/pasted-49.png","hash":"ae478121d910e95d1fff65d78d10aa3af47d9d30","modified":1572513064497},{"_id":"source/images/pasted-19.png","hash":"a31520f419b64d9ec8912d6666a8bd611d703df9","modified":1524660419512},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"05692aa0f2aaa1659f7abaefa0f341973aed5ae6","modified":1569143493237},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1569143493336},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1569143493335},{"_id":"themes/next/.git/logs/refs/remotes/origin/master","hash":"4ef9a2566814aae97e3ccd3110936641b35a09fc","modified":1574732461483},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1569143493304},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1569143493304},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1569143493304},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6336c2b129db802221b1fd75e5fbe8aab85c0a1f","modified":1571637313672},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1569143493305},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"98227b4de364b48b11e21efcf4f1beb2ed3ab329","modified":1571637313672},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"4b84f35e7040f9adb5cc540c366d7f9eb4c48bcc","modified":1571637313672},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"d557a0de91a428330b43cdae9f1ec7167d24e2e4","modified":1571637313673},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"e3ade812b5541eca5b863ad3ff234ea95925bf31","modified":1571637313672},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"602a3c3d2785965b23412b5c219dfe74b5fb0844","modified":1569143493306},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"bcba503e956e4b737b062faa66341bd880f16c10","modified":1574232862979},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1574232862980},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9df5ba77e6cf36129bddc270407215c23c60ff38","modified":1574732461529},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1569143493307},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1571637313674},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1572530170830},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"284249dcfa3b49c5d76210bbb0f74f65fc2f12ea","modified":1574232862980},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1569143493312},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1569143493312},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1571637313678},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"2d9d68a431a334626d463bb1bdfbcd2ea8242e94","modified":1571637313679},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1572769137369},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"b492a45422773ab2af06ee345d527ba4c6bbc608","modified":1574232862982},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1571637313739},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"ae13712e313aacfce989d97ed6cba0606c776fb3","modified":1574232862982},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1571637313739},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1571637313738},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"42a12c718b5832cd535a4631759376910c549d94","modified":1574232862983},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"5bf28a03ef021c27cfd713971caca5a0b9466fd1","modified":1571637313693},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"068b304be305fbfd0220276d56b93cefd968f0b6","modified":1571637313737},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1571637313737},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"0746320211c11e48e43c3446ac9767e5ffb60fd3","modified":1574232862983},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1571637313736},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"5528a755b180312d008054653633d857aeeb6780","modified":1571637313747},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1571637313744},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"9b3ff4aa24069eab0e9771437013f45e450d4217","modified":1571637313744},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"95339b71ac90553fb1634c536c9749055e0c788a","modified":1571637313743},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"cc4beedb56c37246d9e0f74e4b2cc34231dabc65","modified":1571637313743},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"1db4ce981fe9fcb9ee4279395c29553efbb43947","modified":1571637313742},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1571637313743},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"e2ad7ccf1865a45548e3f31c70fac2c65d6ef534","modified":1571637313742},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1571637313742},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"eaa62b5de4ddb18378c1a4049a172d4fa4b655d8","modified":1571637313741},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"9a18b186b08ec220d1b17cf83812bcdd06077814","modified":1571637313741},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1571637313746},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"0672ea2acf28dcc2cfc5244da36d3387d71a17cb","modified":1571637313746},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"4b237e2344f35e9d1f6dbc3842d5e432d478ebfd","modified":1571637313746},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1571637313745},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"d5d85d3646d184e0340924addcfd2523fb289d00","modified":1571637313680},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a7ed54e2f52185a7b6bb9a8201f6c3aa74b0cb00","modified":1571637313745},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b5ba1b3d5535ccf1e5df6f4cd8ee0147d7278be9","modified":1571637313745},{"_id":"themes/next/.git/objects/pack/pack-9d456ea5d016592916959b32095bd8536cc84dad.idx","hash":"ff4e823328552b70344ef8ba8a7687e2c6aa9a47","modified":1569143493224},{"_id":"themes/next/.git/objects/pack/pack-34b7ca70955bc0d87bfc16265c6e31012179767f.pack","hash":"c761a6d5ff1b1d7135dab1d633570c31fdc53ffb","modified":1571637441000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1569143493334},{"_id":"source/images/pasted-47.png","hash":"677cf3f19e1f07d395ea1eeaf967353be50eb2c3","modified":1572512994821},{"_id":"source/images/pasted-48.png","hash":"1f00fbbcb470b6d31268d83c278138e6cb767b6c","modified":1572513037618},{"_id":"themes/next/.git/objects/pack/pack-9d456ea5d016592916959b32095bd8536cc84dad.pack","hash":"30a3f5379d66ee90c1052ed2073d05d1995e92a6","modified":1569143493219},{"_id":"public/baidusitemap.xml","hash":"5c572c5d2effcf4165d0b6a7cdb2567d083e2286","modified":1574770351202},{"_id":"public/atom.xml","hash":"db482e2027b04ed2ff0373888eba9d190d1b1151","modified":1574770351202},{"_id":"public/search.xml","hash":"3360dba0291ab2d7d55d09f66348567b14e732e0","modified":1574770351202},{"_id":"public/sitemap.xml","hash":"58a2401b6f0eaa3a889707ffd322cf7824081bdc","modified":1574770351202},{"_id":"public/404.html","hash":"1f337ab01d553591488e24c1abced19c164fe240","modified":1574770351202},{"_id":"public/about/index.html","hash":"bdbbbf9b633158fe95e8c5c70c06a1f2858ebfd9","modified":1574770351202},{"_id":"public/categories/index.html","hash":"552236cab189f7f9544fbe5d8d8c1719cd6179d1","modified":1574770351202},{"_id":"public/tags/index.html","hash":"0cde1a82f2bf1671bcca178df8d000506527d41d","modified":1574770351202},{"_id":"public/2019/10/31/Java-线上-CPU100-排查思路/index.html","hash":"d6c53afd31b4b9aacc0754018a6b5e791d390b73","modified":1574770351202},{"_id":"public/2017/08/17/Spring-boot添加admin监控/index.html","hash":"20ed9b905a92942e5d52fc061cdb319885f206e0","modified":1574770351202},{"_id":"public/2017/08/14/Spring-Retry/index.html","hash":"3b269915477ce6cff72439c88a93fbc18665b4b2","modified":1574770351202},{"_id":"public/2017/08/13/Spring为REST API实现异常处理/index.html","hash":"4829eda345514d4ccf6f0ae425f6b03e27b75f39","modified":1574770351202},{"_id":"public/2017/08/09/Springboot快速重启/index.html","hash":"3b24fef4dc8bbf40bec4fac9a3c50480b69d0acc","modified":1574770351202},{"_id":"public/2017/07/07/基于Docker的CI-CD流水线实践/index.html","hash":"8d9d0ce1ccece022c499433dbdda3c4f5ebbab39","modified":1574770351202},{"_id":"public/2017/07/07/快速切换hosts文件的开源程序SwitchHosts/index.html","hash":"32f9dbafec3e527d445cb9a43c95f4b270395a07","modified":1574770351202},{"_id":"public/2017/07/06/Docker-Swarm-入门/index.html","hash":"2b55cddb9bbef86d251c36c33c3a8701ca0506db","modified":1574770351202},{"_id":"public/2017/06/07/MyCLI：一个支持自动补全和语法高亮的MySQL客户端/index.html","hash":"12b529d1e4f83cf88ca31f8200cef759bdbfba5d","modified":1574770351202},{"_id":"public/2017/05/27/你应该知道的5个Docker实用工具/index.html","hash":"39f8415706500ae94fa693a190e498cbe22c859a","modified":1574770351202},{"_id":"public/2017/05/18/Docker的Secrets管理/index.html","hash":"cea3a027e0759e060fbad15fe3ada7c84e02ab3f","modified":1574770351202},{"_id":"public/2017/05/18/四个Kubernetes集群管理工具/index.html","hash":"65af57f9178906f0eecf76dcc1fb8d7dfa5322ab","modified":1574770351202},{"_id":"public/2017/05/16/Java-9-中的-9-个新特性/index.html","hash":"a202747da06511f95fdbdf5b88af21db1d9aef68","modified":1574770351202},{"_id":"public/2017/05/04/java开源项目/index.html","hash":"55e3a9599932b879faa81adc1d0ad72c15461b8d","modified":1574770351202},{"_id":"public/2017/04/20/怎样在复杂代码中找bug？/index.html","hash":"92d4c66ad06da017e4edbfe12c52ddb81fe6cca6","modified":1574770351202},{"_id":"public/2017/04/11/MySQL常见性能优化/index.html","hash":"ba0d05aa746bef8fca8ecd3ef2ab90ee377808da","modified":1574770351202},{"_id":"public/2017/04/11/Git-Commit-message-的写法规范之《Angular-规范》/index.html","hash":"effb12f68e6971bcdbf6d10f92ba8cdb2e99c9b2","modified":1574770351202},{"_id":"public/2017/04/11/Docker可视化管理工具Shipyard安装与配置/index.html","hash":"0e23a7cb1a9ad373e8cdd11e619f52c706823f6c","modified":1574770351202},{"_id":"public/2017/04/09/JAVA不借助中间变量交换2个变量的值/index.html","hash":"d950a5c3bb887036ab37677eb66c7aa3b9383cb1","modified":1574770351202},{"_id":"public/2017/04/09/Spring模块及生态支持汇总/index.html","hash":"02f7b03ea3ab26354cce36226336069f24171f83","modified":1574770351202},{"_id":"public/2017/04/08/Java中创建对象的5种不同方法/index.html","hash":"b94ba71ce13e27a579e74207aea0daec43d911a3","modified":1574770351202},{"_id":"public/2017/04/08/MYSQL建表规约/index.html","hash":"eb6925d5900a1244da85e56db189d3accad76ebd","modified":1574770351202},{"_id":"public/2017/04/08/MySQL里面这五个非常非常有用的东西/index.html","hash":"854b6b5d582f781f28319b28b88d04209df25eea","modified":1574770351202},{"_id":"public/2017/04/08/从地址栏输入URL到页面加载完成发生了什么？/index.html","hash":"5596859b55bb08e26487a4c6e87c958b57679b91","modified":1574770351202},{"_id":"public/2017/04/08/ElasticSearch-Canal-开发千万级的实时搜索系统/index.html","hash":"4ab4e435cd3a82b9b0269cb1659bd10f84b78602","modified":1574770351202},{"_id":"public/2017/04/08/IDEA中非常用的几款插件，分享/index.html","hash":"7dfdce883b3a44c91eb5e3875e3b74581bd45fe5","modified":1574770351202},{"_id":"public/2017/03/24/EL表达式fn-endsWith函数的bug/index.html","hash":"baa0d42d117e88556ce5cc68033d81a26679eaf1","modified":1574770351202},{"_id":"public/2017/03/24/Sequences-in-MySQL/index.html","hash":"05fe5b8572d910506533b793b62292ed35a3484d","modified":1574770351202},{"_id":"public/2017/03/22/Java动态代理与Cglib库/index.html","hash":"0279ceb3137bd310ea5501955b1f2a677f4d2057","modified":1574770351202},{"_id":"public/2017/03/21/spring-中使用-logback打印日志，替换其他日志如log4j-commons-logging/index.html","hash":"7f7b35540ab0dd39886e6a54dceb0b0c46fba572","modified":1574770351202},{"_id":"public/archives/index.html","hash":"f0c7752216ad26fe493dc17905a425739f9ccf6b","modified":1574770351202},{"_id":"public/archives/page/2/index.html","hash":"bd22f07900a9193b92034f9a98f0489f0c9a033e","modified":1574770351202},{"_id":"public/archives/page/3/index.html","hash":"86eba004681f5945907d25a892564e9f3602521a","modified":1574770351202},{"_id":"public/archives/2017/index.html","hash":"ecbaffd2bdc16dace7e4a66d453718d87005d707","modified":1574770351202},{"_id":"public/archives/2017/page/2/index.html","hash":"d30994071faa8952baf61b4d5dd9bc8b5d75308f","modified":1574770351202},{"_id":"public/archives/2017/page/3/index.html","hash":"87fdc932383bdffc1235135ab5bc043d35c4d096","modified":1574770351202},{"_id":"public/archives/2017/03/index.html","hash":"33de7a52525fe0cdbf6638e6c0f48d265d858e24","modified":1574770351202},{"_id":"public/archives/2017/04/index.html","hash":"9293c8121d372597febeb30dab417bd1424bf72d","modified":1574770351202},{"_id":"public/archives/2017/04/page/2/index.html","hash":"31346584b394d54d56e986d235c247cf1ed6890b","modified":1574770351202},{"_id":"public/archives/2017/05/index.html","hash":"e07d71354759d7b91ab390142feccad95edc01bf","modified":1574770351202},{"_id":"public/archives/2017/06/index.html","hash":"717f5fee7b09c0f997775500e257713b0fc8b8ea","modified":1574770351202},{"_id":"public/archives/2017/07/index.html","hash":"fed2f0052ef61fb2d2b8179114ad3fb02379b61d","modified":1574770351202},{"_id":"public/archives/2017/08/index.html","hash":"9fa52e870353868cd8009d1934bec4abb7c2c8e2","modified":1574770351202},{"_id":"public/archives/2019/index.html","hash":"c30d23869d6a45e308a9419988ebef0d0fa64041","modified":1574770351202},{"_id":"public/archives/2019/10/index.html","hash":"c9884981f89d2ca105b7691a6b177149af184ad0","modified":1574770351202},{"_id":"public/categories/Collection/index.html","hash":"55981f9ada1cd53b2099e1485c6ba4accab00d5d","modified":1574770351202},{"_id":"public/categories/Collection/page/2/index.html","hash":"8bb2e1f85358e49763de1e5d2a94538032e257af","modified":1574770351202},{"_id":"public/categories/Essay/index.html","hash":"0455894e78212f64da959257325283de83ec4076","modified":1574770351202},{"_id":"public/categories/Essay/page/2/index.html","hash":"8244db2158c6748d535cc55e88a7d214b77bca5a","modified":1574770351202},{"_id":"public/categories/Collection/Software/index.html","hash":"b02118c62547246a398ae7b1adf5660794fabc1a","modified":1574770351202},{"_id":"public/index.html","hash":"8fb50dfb0368dfc942f840e7ba4767cad1865c2b","modified":1574770351202},{"_id":"public/page/2/index.html","hash":"689ab45849e324579e36860f9eacbed6a235750e","modified":1574770351202},{"_id":"public/page/3/index.html","hash":"8f9dc1c7a8c53248f9cbc72ca5729798bf2784cc","modified":1574770351202},{"_id":"public/tags/Docker/index.html","hash":"00464e82632862bda169a95e576abcfad5c9163e","modified":1574770351202},{"_id":"public/tags/Docker-Swarm/index.html","hash":"f40d4869d27e29cc7edfabfa47041b4691ca6ba3","modified":1574770351202},{"_id":"public/tags/Java/index.html","hash":"929b88b522eb7d3f258880d0865952d9a30cd6cd","modified":1574770351202},{"_id":"public/tags/Java/page/2/index.html","hash":"6e7df362ccece93d4086e5ee855cf57879625a9d","modified":1574770351202},{"_id":"public/tags/Jstl/index.html","hash":"bec55552fe76e10d9760ac9c67371958730f370f","modified":1574770351202},{"_id":"public/tags/ElasticSearch/index.html","hash":"8b5b4fbf4341f90c99e7e1f265c1584c6a0ee76c","modified":1574770351202},{"_id":"public/tags/Git/index.html","hash":"7c51664cf0cf4f94b0f35bf920823fa96dbb4a9d","modified":1574770351202},{"_id":"public/tags/IDE/index.html","hash":"d8bf31376e58fd241f5e33668b448d64085d2779","modified":1574770351202},{"_id":"public/tags/JetBrains/index.html","hash":"ea3767151e7de0c138e7cd343fcb71febebb367a","modified":1574770351202},{"_id":"public/tags/IntelliJ-IDEA/index.html","hash":"346e66ec5a1cdd1fbc4400bd12c072d294bdfc97","modified":1574770351202},{"_id":"public/tags/Mysql/index.html","hash":"2955d95c78214fdb005b02dfcac28d8767efbc7d","modified":1574770351202},{"_id":"public/tags/Shell/index.html","hash":"880920e545a6df802e2667a44f02c79c69a91d75","modified":1574770351202},{"_id":"public/tags/Spring/index.html","hash":"86419b62abc595d088994edf5f24699acdd3a812","modified":1574770351202},{"_id":"public/tags/Spring-Boot/index.html","hash":"c8920207fba5d2da007d94abc20b178e64e38dd5","modified":1574770351202},{"_id":"public/tags/Monitor/index.html","hash":"9031af7e90d6078bca7a9ce5c861d5d9eab87050","modified":1574770351202},{"_id":"public/tags/Kubernetes/index.html","hash":"db3fa7f1d37b78d35eda3ee2a29dd81b6869672b","modified":1574770351202},{"_id":"public/tags/DevOps/index.html","hash":"fcfe6bbc59da67f80a1d10bee9a9674c22265501","modified":1574770351202},{"_id":"public/tags/Hosts/index.html","hash":"1f411d2f67d8c2e6820881c1c788fac35deab75f","modified":1574770351202},{"_id":"public/tags/Software/index.html","hash":"b17674ef75ce100a5f2e2fbceae70d4764745188","modified":1574770351202},{"_id":"public/tags/Coding/index.html","hash":"029132ce06e2beb016ee2e066ba38d16b736160d","modified":1574770351202},{"_id":"public/tags/Rest-API/index.html","hash":"6bc26806207520571bbb2e221ec7900d85bec002","modified":1574770351202},{"_id":"public/README.md","hash":"1ab64c41e82002770eb3c57744ff8cee19dfd47b","modified":1574770351202},{"_id":"public/CNAME","hash":"561346d522a806009694d6c62a96f64e0aac8132","modified":1574770351202},{"_id":"public/images/pasted-11.png","hash":"ac1aafd2009a5614617fb635f1cc5342f192b5ae","modified":1574770351202},{"_id":"public/images/pasted-12.png","hash":"15b41f429b74d945de03c1bf863ac1c3a504a175","modified":1574770351202},{"_id":"public/images/pasted-13.png","hash":"2ba7ca91d6350893a011f0d0adb7e8a0e0e474e5","modified":1574770351202},{"_id":"public/images/pasted-15.png","hash":"3c351ad07922d9105538336d3b6949014a921b66","modified":1574770351202},{"_id":"public/images/pasted-25.png","hash":"58459a1158ecad4d93d87d3170326fa487765060","modified":1574770351202},{"_id":"public/images/pasted-23.png","hash":"af8f44d2e0ef52e5623884d627883b7d978bcee2","modified":1574770351202},{"_id":"public/images/pasted-26.png","hash":"b3c43767d0d662a571c44a2df7dd3829ab4cdd8b","modified":1574770351202},{"_id":"public/images/pasted-30.png","hash":"f9bdb62ba2ec36d9fcfad29edd4478c9a336245e","modified":1574770351202},{"_id":"public/images/pasted-38.png","hash":"4e82b7ef3215999420928f37701a431ec9c59364","modified":1574770351202},{"_id":"public/images/pasted-27.png","hash":"b3c43767d0d662a571c44a2df7dd3829ab4cdd8b","modified":1574770351202},{"_id":"public/images/pasted-43.png","hash":"42e2698bac9b914dd24a94db3cf4b61413101c1b","modified":1574770351202},{"_id":"public/images/pasted-5.png","hash":"47bf4df386b753b71afc487b07bfb36d520f358f","modified":1574770351202},{"_id":"public/images/timg.jpeg","hash":"7ca4486edcbcde0902f93e07f836cef9a779472f","modified":1574770351202},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1574770351202},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1574770351202},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1574770351202},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1574770351202},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1574770351202},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1574770351202},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1574770351202},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1574770351202},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1574770351202},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1574770351202},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1574770351202},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1574770351202},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1574770351202},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1574770351202},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1574770351202},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1574770351202},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1574770351202},{"_id":"public/favicon.ico","hash":"493ffa1d03bc7949e2d95b0cabc343802bcc98c9","modified":1574770351202},{"_id":"public/images/pasted-18.png","hash":"1a4e6cbaaf51296a1ab0ff3c1c6c3445cbfa7ba7","modified":1574770351202},{"_id":"public/images/pasted-17.png","hash":"1a4e6cbaaf51296a1ab0ff3c1c6c3445cbfa7ba7","modified":1574770351202},{"_id":"public/images/pasted-22.png","hash":"6266465f13bcce0d74c2b559394fc25ee1f6b33f","modified":1574770351202},{"_id":"public/images/pasted-7.png","hash":"47bf4df386b753b71afc487b07bfb36d520f358f","modified":1574770351202},{"_id":"public/images/pasted-37.png","hash":"8bf6708f21fcf6585df5f61b6e3606fe546a9e19","modified":1574770351202},{"_id":"public/images/pasted-8.png","hash":"47bf4df386b753b71afc487b07bfb36d520f358f","modified":1574770351202},{"_id":"public/images/pasted-14.png","hash":"2c603a03e60b10b255b78cfa269e993dc1c3c04e","modified":1574770351202},{"_id":"public/images/pasted-1.png","hash":"7bd23688e2a09bbe92ebc0adcfd19196bc150fd6","modified":1574770351202},{"_id":"public/images/pasted-20.png","hash":"4617b1ad507cf2e0beb3371ace234e47890ff8de","modified":1574770351202},{"_id":"public/images/pasted-16.png","hash":"4bd6807055023d9a9e481faf849ee8bc62518048","modified":1574770351202},{"_id":"public/images/pasted-21.png","hash":"9d030eb9bd44c056ce5d7cc8bb88622bfab0eea0","modified":1574770351202},{"_id":"public/images/pasted-2.png","hash":"2c6c9886be296c7446b68a13c1e773554ae91ccd","modified":1574770351202},{"_id":"public/images/pasted-24.png","hash":"bbf5aa85bd484a6d2ff3ea26275c4210e87a1cf4","modified":1574770351202},{"_id":"public/images/pasted-32.png","hash":"ba2afd6403098c8e20c729537cfe17129bcc761c","modified":1574770351202},{"_id":"public/images/pasted-35.png","hash":"fcd4cc393b8fbd058e83a0faf9f6fbd1b9dec775","modified":1574770351202},{"_id":"public/images/pasted-4.png","hash":"dfd74cda87326e76ffb012d90a4a2ca4f8ef21ac","modified":1574770351202},{"_id":"public/images/pasted-44.png","hash":"38bdb67fbc654a35494184cbcc8a298f26598310","modified":1574770351202},{"_id":"public/images/pasted-41.png","hash":"014ff2a3caa684b71cab33e46444ea0245fcd93e","modified":1574770351202},{"_id":"public/images/pasted-9.png","hash":"3393e9bcd8d1bc456ca4bc6b22f49cbb027acf23","modified":1574770351202},{"_id":"public/images/pasted-6.png","hash":"3393e9bcd8d1bc456ca4bc6b22f49cbb027acf23","modified":1574770351202},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1574770351202},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1574770351202},{"_id":"public/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1574770351202},{"_id":"public/js/bookmark.js","hash":"c9acb262acf0cf127497b570fa9479fb32f34547","modified":1574770351202},{"_id":"public/js/local-search.js","hash":"fda0f761ae20577f22c1528dde7ae059368fe9a8","modified":1574770351202},{"_id":"public/js/utils.js","hash":"ba4c1cb25071a9fe0b94dd001d2413307bbaeb80","modified":1574770351202},{"_id":"public/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1574770351202},{"_id":"public/js/motion.js","hash":"9ac69597315b5b7b4c8900b7949d2a31387d6284","modified":1574770351202},{"_id":"public/js/schemes/muse.js","hash":"792f4522a3b0b96584a041a4aca20fcded410079","modified":1574770351202},{"_id":"public/js/schemes/pisces.js","hash":"dccbb1be3938050e13277251ab5d88c736edf396","modified":1574770351202},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1574770351202},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1574770351202},{"_id":"public/css/main.css","hash":"36e38f43f3e9204461912241f6f5229f590595ed","modified":1574770351202},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1574770351202},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1574770351202},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1574770351202},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1574770351202},{"_id":"public/images/pasted-39.png","hash":"89c3b15dc1912debbb07ae07b5b05b04ec496eed","modified":1574770351202},{"_id":"public/images/pasted-3.png","hash":"f635e36e67673df69e442cbb744494ca8d6845a0","modified":1574770351202},{"_id":"public/images/pasted-29.png","hash":"a9a5dba9060eaaf00b822019a156f4d1b8f3531b","modified":1574770351202},{"_id":"public/images/pasted-45.png","hash":"9a8a1b7d315537edad5015b2aab408e7afe9b9ee","modified":1574770351202},{"_id":"public/images/pasted-10.png","hash":"b42ddaadccb80e70d5cb481e3952bf030b4a885a","modified":1574770351202},{"_id":"public/images/pasted-28.png","hash":"a9a5dba9060eaaf00b822019a156f4d1b8f3531b","modified":1574770351202},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1574770351202},{"_id":"public/images/pasted-0.png","hash":"294dec29d4c865922229f28b73d2fba94a7df13f","modified":1574770351202},{"_id":"public/images/pasted-36.png","hash":"da7945eb6af20943aff9b7cc3c3b659d2314d585","modified":1574770351202},{"_id":"public/images/pasted-40.png","hash":"ddbb24da3b3adbadadeba1d390283a56b04297fb","modified":1574770351202},{"_id":"public/images/pasted-46.png","hash":"a5e4a83c019c2a0fc7186ddaa0061b0083dd0c28","modified":1574770351202},{"_id":"public/images/pasted-31.png","hash":"6a4a84f49155d807e9e9def744d0e0fe6ab8df64","modified":1574770351202},{"_id":"public/images/pasted-34.png","hash":"d5802ff33aac83051b050a100eb7e48c42e26429","modified":1574770351202},{"_id":"public/images/pasted-33.png","hash":"2203801fb2705e369d0d19dbb8138a851e4b99d9","modified":1574770351202},{"_id":"public/images/pasted-42.png","hash":"014ff2a3caa684b71cab33e46444ea0245fcd93e","modified":1574770351202},{"_id":"public/images/pasted-19.png","hash":"a31520f419b64d9ec8912d6666a8bd611d703df9","modified":1574770351202},{"_id":"public/images/pasted-49.png","hash":"ae478121d910e95d1fff65d78d10aa3af47d9d30","modified":1574770351202},{"_id":"public/images/pasted-47.png","hash":"677cf3f19e1f07d395ea1eeaf967353be50eb2c3","modified":1574770351202},{"_id":"public/images/pasted-48.png","hash":"1f00fbbcb470b6d31268d83c278138e6cb767b6c","modified":1574770351202},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1574232862977},{"_id":"themes/next/.git/objects/03/7eb0cfa779bc34668524e4ac1c69dda23968f1","hash":"7c5331f91756ee130653d8cb7922c54ecbd89d5a","modified":1574732461409},{"_id":"themes/next/.git/objects/02/a26204b37dba82005f4cba24e2ab49f06a4287","hash":"cf4ca3d303bab5e749661b26f602f70453c74462","modified":1574732461410},{"_id":"themes/next/.git/objects/02/f9f47c47865c5afaf162fc3ace28282fa010e3","hash":"8dbf47a9c6aebbb81c458750f27e02f457bd59a6","modified":1574732638000},{"_id":"themes/next/.git/objects/02/ff802102aba3fccb34c277dd84e413e852c60c","hash":"d5b69b630987275409eb41dd4614f5edf88e72c9","modified":1574732461408},{"_id":"themes/next/.git/objects/05/3d6d9bfd4c98629fe5672bfc479c7fcadccc16","hash":"8d95ec1514660874d3c0a4e3f8e46c30783afcfc","modified":1574732461438},{"_id":"themes/next/.git/objects/0f/8bef53e7550cca9159870df16066545f80924a","hash":"d1c694520d2205c315b39062fa43c8a4aaed10ea","modified":1574732461451},{"_id":"themes/next/.git/objects/13/fb30903522e44fa260feebd761ff2838ec965a","hash":"ab0f2e15bebb7a6e716c0343d60ef17dada95f2c","modified":1574732461413},{"_id":"themes/next/.git/objects/0b/cef6f0666c8caa32e23930a11b8ddfca02d8e7","hash":"621143972e73c7a1ead20dff72263866678433ef","modified":1574732638000},{"_id":"themes/next/.git/objects/10/0a41df3ddf3b041f0d6aca6951c13df5394293","hash":"f6caa5ec249785a0e88d99001eb7c62dfbef447f","modified":1574732638000},{"_id":"themes/next/.git/objects/12/cccee80479f95b966b925512a27ab3a1a2d412","hash":"4537dc302068054e212bc931236713bf933622e9","modified":1574732461448},{"_id":"themes/next/.git/objects/14/172486dfb480aa80d467592963f57cc0bb734d","hash":"8d42fe594f49d15085a954890df1a6dd68e2be25","modified":1574732461396},{"_id":"themes/next/.git/objects/19/6b5b727a5b97d774629d7d587715c42886af32","hash":"7f34f8f0a78ddcf17d08dff501d9bcea795d6ab4","modified":1572769137000},{"_id":"themes/next/.git/objects/1b/b9b0736e553758dd0917e65d9fedf78e65baee","hash":"272876237ba4e24a5613245b4c296c12b5758c06","modified":1574732461445},{"_id":"themes/next/.git/objects/15/0c38488a92f2953bd198bdc977abf832f8acbc","hash":"33553223ba7eced8800a12487516a49367a50006","modified":1572769137306},{"_id":"themes/next/.git/objects/20/9017be53e92d8623c945262762ce745409730a","hash":"1dc2bbe08f65358840d18bc83717779586ebf3cb","modified":1572769137000},{"_id":"themes/next/.git/objects/21/fdd12a801bc6cadddd8acb787b0a78cb7fdd2f","hash":"e366611578e2e79734a8166604a452277d1745d4","modified":1574732638074},{"_id":"themes/next/.git/objects/21/148b4a97511c3ca6f81bf32be39adbc75b5c10","hash":"6882d84a4d6e8dcc7cf0ebedc369fdcf9f62ca43","modified":1574732461441},{"_id":"themes/next/.git/objects/1a/829a043a27d84d356132f942d6b757e89dc013","hash":"3e5ab419c83f9ce90b6d172aaf38bd567aae406a","modified":1572769137000},{"_id":"themes/next/.git/objects/33/d3603cdedaea1f7944fe0d693b74f8d0c6c2e8","hash":"cdf6051e6ae9e86ec6eb16ceb382e11f7e46caa7","modified":1574732461395},{"_id":"themes/next/.git/objects/37/0007c64999087a6ce8fa6f10b23c9b0c390d5f","hash":"dd059dd48caa49d5bbde214d7d9d8d1a610eadca","modified":1572769137308},{"_id":"themes/next/.git/objects/29/68322698ed07e6f4d5ce7d5ee10670660c2737","hash":"8d9a9677889ea9a013d94298ad9475b77e415b50","modified":1574732461447},{"_id":"themes/next/.git/objects/2a/90f7906ca0164bcb99c74eddf06b0f998d9220","hash":"5f49f5ed292a63baf4aa337ba08bac3811f338ff","modified":1574732461407},{"_id":"themes/next/.git/objects/3a/7034ff945df825e410fe83044b384bdfcc6c58","hash":"32c859b2b6b04367d28743aa2fd829b26281b5b6","modified":1572769137000},{"_id":"themes/next/.git/objects/42/ad2050011af2310761a0ceb445a53c6b3e82f5","hash":"013e45a95f4e63044398e4afa50308b880438a1b","modified":1574732638000},{"_id":"themes/next/.git/objects/43/210d4c6388c0da1ece16a3b8b2b944a08bca31","hash":"721504b13b9a9098205508bb174dffbef5a524e9","modified":1574732461416},{"_id":"themes/next/.git/objects/31/4f2e6d9d873b57c8e1a5bc4bb4f8b10a9b4020","hash":"43aad05f94b9fd5e3d9cec3b19fd584063a3f1b5","modified":1572769137000},{"_id":"themes/next/.git/objects/49/e678997bb799d8a9eb78de7446d6193d78ad9f","hash":"233e20d9d09072fcd4d1df364e921f83f38724f3","modified":1574732461414},{"_id":"themes/next/.git/objects/4d/8dabea3f2d6c5986978e56bf9d0523a6ffc967","hash":"c4d9ca5ce5d6ccb3c4c66881305b8e72599a3f86","modified":1574732461446},{"_id":"themes/next/.git/objects/4d/936a5aa3ae329763614985f1e0201b62d23024","hash":"73e2f5f7bb90a62d87f8c3a7ef53abdc2e1c8432","modified":1572769137273},{"_id":"themes/next/.git/objects/39/4008353561c96346313da46ca9c344154c34e3","hash":"ea43147b4671d54a3dc8282d1845d2c80ebb5d36","modified":1572769137293},{"_id":"themes/next/.git/objects/39/6241ca8b66152bcf832bb6c49e7dd3b9e4b986","hash":"c479d1dcf2ce87f3945f2d1960d3aece5ed507d2","modified":1574732638000},{"_id":"themes/next/.git/objects/3e/4041d690aba3cb3fd1f10095b0462415d104af","hash":"f10ca944ad3c453762b170eaea3f4ee3b8067bee","modified":1572769137296},{"_id":"themes/next/.git/objects/51/e30a2d27e19642514eedef5721af5ddccb4f96","hash":"a4a0d1564946a38599aa657703a0da23fe9364a3","modified":1572769137312},{"_id":"themes/next/.git/objects/57/0df6ec62bde6a4c78050e5991d8c79d727bd4c","hash":"c24dea06f88116106ee9bcc5ae13257dbbe9c87f","modified":1574732461444},{"_id":"themes/next/.git/objects/57/658069781df220c5a8525e34061a595c1e1f17","hash":"f0897f8134d7d160f50ce523ac022470a3245be6","modified":1574732638000},{"_id":"themes/next/.git/objects/58/6901b1daa415a883bebbcc48ea5fd4da04e954","hash":"c0e316d0ef564b0f04282c1d9c65a72045f7627b","modified":1574732637841},{"_id":"themes/next/.git/objects/4e/31879f758611f3c82e1ab5f85a293435036182","hash":"7703350a4ddb4e7ffcc22114424373956838e3cd","modified":1572769137285},{"_id":"themes/next/.git/objects/56/3b3d59a2a350a8d76d79b737341f0a7c48534a","hash":"c8d74453ed6cf134ba585860e5dafaf5b720fcc8","modified":1572769137287},{"_id":"themes/next/.git/objects/56/697a4b8970304d8aaee2c78e2224b7df1fe5fd","hash":"60eed59c50103586f7a30c6c46ad325e37af2352","modified":1572769137291},{"_id":"themes/next/.git/objects/56/cc229e61a626b8f6dba28975d96726c27eccb3","hash":"ac499fff16d6e5ca82b797dae84475caa8959562","modified":1572769137390},{"_id":"themes/next/.git/objects/5e/338a2f0ccec17542c464f8c05deabcbb2d49e3","hash":"04d660fd93e225ca5b57d95edecc8a42a6ae1efc","modified":1574732638000},{"_id":"themes/next/.git/objects/5e/7579ec8f4b9138a5e36a0df1c6fdfe7bd929e1","hash":"ae46ebb6645bfefe806c205867522e87a4f4392c","modified":1574732461417},{"_id":"themes/next/.git/objects/5e/328099c5561ff9188166a1711059febfc1b876","hash":"1239cf616ea614ac48d285a05c4af93af3d6f8e7","modified":1574732638104},{"_id":"themes/next/.git/objects/63/7b139c3e9dd97f4e339cf35c49dc75a39e68c0","hash":"0b3b3c8b86cdc7c2c80287fda12e53ebc0a24966","modified":1572769137000},{"_id":"themes/next/.git/objects/62/497e5486c6ec1aeb5c05b3f889a4b776f22331","hash":"b6112a174626e994c021adfb1ac57e130740e9e3","modified":1572769137000},{"_id":"themes/next/.git/objects/64/7505b00c1720748b4133bd57314da3a2548e83","hash":"754aa56891190df4724a6921c80b5465afc7ac43","modified":1574233031615},{"_id":"themes/next/.git/objects/65/09379dc9a5e5d37abe940bcab437a787ee9735","hash":"d25750aad163dcb72aa2b59abc4acd713f446709","modified":1572769137290},{"_id":"themes/next/.git/objects/6a/38b17965e6ea9dff637463ffa0cb4120fd69a3","hash":"277c2d3d612eda2c9b0fbcfde5d6d43c76f7e259","modified":1572769137288},{"_id":"themes/next/.git/objects/6c/6e36be9137303cdfa5d86010ebbcc5e846dd58","hash":"07952bc3bb13064415a0f1165ea5d4a4f9cd59bf","modified":1572769137266},{"_id":"themes/next/.git/objects/7b/b27b309fb3652c3bb223615685b2c41c10a606","hash":"79632eed5052cd4705d67fc1b07aee6e8da4e407","modified":1574233031936},{"_id":"themes/next/.git/objects/7b/0c1a912ab300e937733a8e857ce28ece4f27aa","hash":"664a808be770ed099309611886805e5f952f7b93","modified":1572769137000},{"_id":"themes/next/.git/objects/7d/b2cbd0332ef8d1cc7aafa86a4bd65845c1d84a","hash":"1be4f903bf0faeabe1d559ed03ea0cd7ffe89140","modified":1574732461432},{"_id":"themes/next/.git/objects/84/bbe61a7a1182573ca29d9f909340f522a13724","hash":"617b123e2fb84df09e4c6c4905ec062c2955eda1","modified":1574732638000},{"_id":"themes/next/.git/objects/8b/ed2d4b5157c3218237de71522c0088f0068339","hash":"7ad478bdb44ca23edd1359908f8240079afeccf8","modified":1574732461443},{"_id":"themes/next/.git/objects/8d/21d1e82e275a201ad06e7e1e7f0bc0a506cece","hash":"060cff06769216b9b69684a383ac83bfee02af61","modified":1574732638000},{"_id":"themes/next/.git/objects/8e/610798c7fd45114e94231b92f35740260a97eb","hash":"3ea96dbf2352d04c387094efb3e8b6d17834801b","modified":1572769137379},{"_id":"themes/next/.git/objects/8f/d437ce730e752eb09183348f041f7f2e14cdbd","hash":"04c1f0b0498fe003fe8eac255b0cd69fca0492d4","modified":1572769137264},{"_id":"themes/next/.git/objects/8f/f714652d6726fb8dde44580c11619797bc4f03","hash":"61d2e1fead7fb351289e90c9461d5353208e42ff","modified":1574732638000},{"_id":"themes/next/.git/objects/8f/daa540892cb17826a804be1d7dd04cf6552836","hash":"5adc9eb81c823cd88cc69c5e2dff1256446f8c5e","modified":1574732461437},{"_id":"themes/next/.git/objects/93/1bf3280918395fcf43baf4d68a9ca1e12d73d5","hash":"a82facff60b6dec72f88a7c305e5a1b1adc9e225","modified":1572769137304},{"_id":"themes/next/.git/objects/93/27a4e2d137c51235d59a3fe19d0158251d6d7f","hash":"53d551cec5c7165c31cd03b5208c9fca92f7d300","modified":1574732638000},{"_id":"themes/next/.git/objects/93/ce911e07880aeb73a99a1d9555c74d3701ad27","hash":"58cfc123ac4fc78d0d49e29f676fb0ad4ab1d439","modified":1574732638000},{"_id":"themes/next/.git/objects/97/7fab9aa2e3005fa831bbb5ca0e60ad7d9aad51","hash":"c76aecfef583e551b6bf1f1ff31b3e7ec3ef156c","modified":1574732461430},{"_id":"themes/next/.git/objects/97/a0803180b78e39f57ee2bbae7048c997bf86aa","hash":"c5bd5507fa9112b632e3876ba0321f27488d3c70","modified":1572769137302},{"_id":"themes/next/.git/objects/98/e7c61eda459bf98a9443d56e0fa78e20f562c0","hash":"ceac31189bf66ed44b033c68341f8be531a897cb","modified":1574732461451},{"_id":"themes/next/.git/objects/99/fac7cb1faaf0bfeb69f682ccc8a602270451d0","hash":"efbb5f7b10eb4dfb8a7ee916134498cc6ef861d2","modified":1572769137292},{"_id":"themes/next/.git/objects/9a/c5f06e3521f1c1aad09501e89a98aeedd8affc","hash":"af2f0be58d3a50950c53ed0eff0eabaf94cf0082","modified":1572769137300},{"_id":"themes/next/.git/objects/9b/1fedd33ed3b67a6cf1db1636f024724063be4f","hash":"84dae39927678674ffde8f9feb0b6fd1309dead8","modified":1572769137293},{"_id":"themes/next/.git/objects/9b/41a5f24bcf4bd467404d0f33ad79fbbf3a5910","hash":"b3d825906322a8a595ec791aada305f2ed0167af","modified":1572769137274},{"_id":"themes/next/.git/objects/9c/e115899c4b13bcc40841152ae90fb3fbb83dc7","hash":"25b472ea1deefa1a8b69315a1bc668e915f65aac","modified":1574232862996},{"_id":"themes/next/.git/objects/a2/02f7d62e82e88ef2f3c35dec4cfe4d1f0c4ba7","hash":"7ef66ab5f401aae20fb2217a4fb3056fa289d8d0","modified":1572769137000},{"_id":"themes/next/.git/objects/a1/1a729ce57719be384060659765dc2a13c8f6d1","hash":"e69aee6164e6b38bf171c8be0113e341338f8b82","modified":1574732461396},{"_id":"themes/next/.git/objects/a3/2705d6618e724ba7571d75ebd97db16a5ccfdf","hash":"54cbfad63606f1ead36a59dc2d1c01ac98305d98","modified":1574732638000},{"_id":"themes/next/.git/objects/a3/bcd3f2f7bb0204adbadc4f70d0695256d7eca3","hash":"6eddab8d14d38e431ddcc4b8555041445aa669df","modified":1572769137277},{"_id":"themes/next/.git/objects/a4/b018abe5d70a06bde01ba09884663bf7cd8f45","hash":"597132b841cd0b499fc6d09edd9e232713bb66e2","modified":1572769137313},{"_id":"themes/next/.git/objects/a6/88d0c95a5af3727105848581badca67cc16365","hash":"2be3f6ca204c4aec83950b625d4c9e6970802206","modified":1574732638000},{"_id":"themes/next/.git/objects/ab/f0db4703e1d489c3215273c7310416229ae887","hash":"20d43b707b6cbdffe34821ea07f105899afccaa2","modified":1572769137282},{"_id":"themes/next/.git/objects/ae/d0ab13883f465b8addaffdd2e4a1a6c769caf9","hash":"be368b23a121a16e5ef8197f6a9739a2ac19540a","modified":1574732461448},{"_id":"themes/next/.git/objects/b2/564db4be3b28d64b76056edb51afe21842e7ff","hash":"7ea99deabc01c11315d48a6dfd0aa802b850a7f0","modified":1572769137298},{"_id":"themes/next/.git/objects/b2/dbf5ac6c57de5735df82a54f886bb1c4b740b5","hash":"a9d3c7e07a46e87197be10885847e13e220b2186","modified":1574732461407},{"_id":"themes/next/.git/objects/ac/c513016bc2ef7da728b1037df7352de9d0b6cc","hash":"35de6b7779c8d18b895232e61c510428709de3ed","modified":1574233031967},{"_id":"themes/next/.git/objects/b4/ce7cf4b68a0f5ea086e685902f59c52e8127c1","hash":"1f9ea831932357516e2b5d23dacf158f0c5892f0","modified":1572769137299},{"_id":"themes/next/.git/objects/be/bafeca56f81da33da1aec4b0d1988df57413a1","hash":"4f941e21f2b218a821bfd7a3eda639017c882416","modified":1574732461452},{"_id":"themes/next/.git/objects/c1/d5dc4f567509ba76c7fdb05b2f8998aa6b02e0","hash":"cc9d9cb230864348798a0802cf7c6d2cdfe22fef","modified":1572769137291},{"_id":"themes/next/.git/objects/c3/878c71ad26bb8056f7f3cf03506d6709ff37ef","hash":"8078609c88fc0b8994f8ada9fd2c478aba6860de","modified":1574732461442},{"_id":"themes/next/.git/objects/c3/f7785a4cd5a3129742252504173412463e237e","hash":"64d761ce85ec9f262c22545721dbbb1348d3a5bb","modified":1572769137294},{"_id":"themes/next/.git/objects/c4/457df8123fb02893328e6f9b97a753e12517f2","hash":"6e90f9856daf237d59f8af35daec827e4cdddf73","modified":1572769137000},{"_id":"themes/next/.git/objects/c4/8bfb2d508ab16896ed2df205258bcfe0a8397c","hash":"9a326adefc67ccf4417c48e9c0618226038ec579","modified":1572769137000},{"_id":"themes/next/.git/objects/c4/cf9ad7a399cd5bc8b417605f319b6c06bc1d2a","hash":"dad26cd49068a6ae67ce4423a86873ed5b4fbd31","modified":1572769137000},{"_id":"themes/next/.git/objects/c8/efa9a02f31b3efc70fdabeaf8f3aee169d8c0a","hash":"83c087da495bb354c6ec979dc3b9b78b19f88f4d","modified":1574732461538},{"_id":"themes/next/.git/objects/c9/db4913051228f916c17fdaa2933d2462ef2c91","hash":"734bcfdc5062044d78a7487d4d0e8f00ff2e0243","modified":1574732638000},{"_id":"themes/next/.git/objects/ca/fbee26f69fe987c86d7ef2985f23d465a2b683","hash":"37877b05b9be31d4b9666ff3932a7973d45bce01","modified":1574732461440},{"_id":"themes/next/.git/objects/cd/96c1b3de30c4fd4fd4213ea3a9d6f120e98988","hash":"1396d476be8c84cfb13139ce131501475981c1e6","modified":1574732461435},{"_id":"themes/next/.git/objects/cf/8ddda99a11e4a72655413f305c50db4a633666","hash":"3bae9accfc3ab77d662bfc28f0fc3d081b5d1e78","modified":1572769137279},{"_id":"themes/next/.git/objects/d0/a80b517b8648f243166e13a2c27733ba38c291","hash":"66d3583a20aa38e74a5eef2f449eb88789f99d88","modified":1572769137000},{"_id":"themes/next/.git/objects/d1/e43b43fa31636d81d4700a25a429a6a7064bd6","hash":"05a2a178b88fba0d8d4662b56ad6570a1a15a3d1","modified":1574732638000},{"_id":"themes/next/.git/objects/d4/0367738e6ea88182735958cd63544e366ede21","hash":"0674f61094244cd1b3feff419181cd468c67d070","modified":1572769137312},{"_id":"themes/next/.git/objects/d4/09a59db9b3f6c35b07b289679252e086b115c1","hash":"2ce317cb7c5b3e6187cf6db46c7efbabefe1d001","modified":1572769137286},{"_id":"themes/next/.git/objects/d7/5c694889c1efe240f33853c0a26cf0cf00ba34","hash":"975869a2779e10f89fcf2983671a6217427abeee","modified":1574732461397},{"_id":"themes/next/.git/objects/d9/34cb652abdd0c96e8d8693dfba1d8518a4aa77","hash":"e1c49f5c37aa53e0ed25ec791c9cfb699d52a33c","modified":1574732461411},{"_id":"themes/next/.git/objects/d9/714576aceef3bdb1ca32150e881dde0b93fa09","hash":"59d59b4ad1b15a53d1754f0fd67b107f49714018","modified":1572769098523},{"_id":"themes/next/.git/objects/d9/897498e8f2034490a3b06f76e8a227a7996b1d","hash":"d7c4825952eb17ab6aa59bf160ecfbce1f57f168","modified":1572769137305},{"_id":"themes/next/.git/objects/dd/63bbefce4100a005f781f030f17dba1e3d218e","hash":"c9361294c78d08e0f33c001c8d93e7bb9c830d72","modified":1574732638000},{"_id":"themes/next/.git/objects/dd/67488e2399ebd9cf27b6a008d6d10a83de0ba1","hash":"84b4a94ba456d2be5b84152e662ff298cba29b03","modified":1572769117827},{"_id":"themes/next/.git/objects/de/763cd324e5e1816ad943a20dd2d400a205b775","hash":"18429afe04cc3e50d305cbadab6bd6a83e5bf78a","modified":1574732461449},{"_id":"themes/next/.git/objects/e3/50ab60d4d2a0d98d3570f55807a9a69bd24cd1","hash":"756acc73bddc860cec1b2a8f384772707f07cdc9","modified":1574732638000},{"_id":"themes/next/.git/objects/e5/5b6c3b758391ffd0f8458a2d1adf33f8c6a60d","hash":"ee37092a5256efb6e10ce9239e8f2d40374e3085","modified":1574732638000},{"_id":"themes/next/.git/objects/e6/6592dc642d691cf91e3b98e65b158fc48ac4b6","hash":"f445ac476ee453c9df8813475a5fb9bb9ee8f2da","modified":1574732638000},{"_id":"themes/next/.git/objects/e7/7b828ca0dd7c4e89b3305ee4e42792437c892a","hash":"eb27cf6b361fdc967f747dbb733d36562eb5881f","modified":1574732461433},{"_id":"themes/next/.git/objects/e9/64184c3ded2265281efe10eb54279dfacf6341","hash":"b84503905e225f96df60727d2fbf18e88ec784e2","modified":1572769117837},{"_id":"themes/next/.git/objects/eb/df3e8c70fce1b0674af0854509750996a4d198","hash":"2cee284de366b202dd828af5a26ba80fac2dee63","modified":1574732638000},{"_id":"themes/next/.git/objects/ec/dd7ddd49cdad142e698d4cf637afad2b8361a1","hash":"f38eacfb411a4719c8e1b161c8732cccabe29069","modified":1574732638000},{"_id":"themes/next/.git/objects/ed/a42aa6167268c4d0db04fd93dd5ac1fd590221","hash":"6be7524b4f3c4339b927345323b71684b2b20313","modified":1572769137302},{"_id":"themes/next/.git/objects/ee/043d0848f6bf5f9393794322b9da7a8d938c8d","hash":"41edc7ab117694bb1445d659e495dfe75f979d47","modified":1572769137275},{"_id":"themes/next/.git/objects/ef/962ceac148e7be22c8130de5e1f0bb0bcb95a4","hash":"6d6baf2cc241a1890f524fbccbbe2aadd9cb861d","modified":1574732461431},{"_id":"themes/next/.git/objects/f1/2f5c018ddf5ab639133a8d14cff964cd4d5c5f","hash":"158533933d542531060955a2d810aab01fad6d0b","modified":1574732461454},{"_id":"themes/next/.git/objects/fb/9b2fcf4ea0753b50f56c2a8b99a69e61bcfeef","hash":"6cb26ad86e6c6fdff23d6bf95c97daa5fff517c7","modified":1572769137392},{"_id":"themes/next/.git/objects/fd/fd5ea14ee50d13d6234bcd258e9cff6fce437c","hash":"46e6bd15f38b359474171c8e58c91e9166571b50","modified":1572769137000},{"_id":"themes/next/.git/objects/fe/507431ad4228ccc181943b3d0a65df02a69aed","hash":"5de2253307c33a25e3e0f89739c9cd535e75d5ce","modified":1572769137314},{"_id":"themes/next/.git/objects/pack/pack-ce50e57f37f7f63a008e410e3305ac9c7a806ac9.idx","hash":"1a01af9b3849d179ff65fb59019bc66f229602ee","modified":1574232862904},{"_id":"themes/next/.git/objects/pack/pack-ce50e57f37f7f63a008e410e3305ac9c7a806ac9.pack","hash":"b4ab3a7340e51abfa79763c9d60b1e7891ae17fb","modified":1574233031000},{"_id":"source/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1574770373175},{"_id":"public/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1574770383442}],"Category":[{"name":"Collection","_id":"ck2fj0no70005q4vg6u934bm6"},{"name":"Essay","_id":"ck2fj0np5000mq4vg6dkq47my"},{"name":"Software","parent":"ck2fj0no70005q4vg6u934bm6","_id":"ck2fj0nqo002lq4vg9kf28zde"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2019-10-25T04:50:09.399Z","updated":"2018-04-25T12:46:59.492Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"ck2fj0nl50000q4vghl8ae8qm","content":"<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","length":0},{"title":"About","date":"2017-07-11T16:42:54.000Z","_content":"![I'm a coder](/images/timg.jpeg)\n\n- Docker\n  - [Docker Docs](https://docs.docker.com)\n- Kubernetes\n  - [Kubernetes Documentation](https://kubernetes.io/docs/home)\n- Java Spring\n  - [Spring Boot Reference Guide](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\n  - [Spring Cloud](https://spring.io/projects/spring-cloud)\n- Kotlin\n  - [Kotlin Documentation Reference](https://www.kotlincn.net/docs/reference/)\n- Groovy\n  - [Groovy Documentation](http://www.groovy-lang.org/documentation.html)\n- Python\n  - [Python 2 Documentation](https://docs.python.org/2/)\n  - [Python 3 Documentation](https://docs.python.org/3/)\n","source":"about/index.md","raw":"---\ntitle: About\ndate: 2017-07-12 00:42:54\n---\n![I'm a coder](/images/timg.jpeg)\n\n- Docker\n  - [Docker Docs](https://docs.docker.com)\n- Kubernetes\n  - [Kubernetes Documentation](https://kubernetes.io/docs/home)\n- Java Spring\n  - [Spring Boot Reference Guide](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/)\n  - [Spring Cloud](https://spring.io/projects/spring-cloud)\n- Kotlin\n  - [Kotlin Documentation Reference](https://www.kotlincn.net/docs/reference/)\n- Groovy\n  - [Groovy Documentation](http://www.groovy-lang.org/documentation.html)\n- Python\n  - [Python 2 Documentation](https://docs.python.org/2/)\n  - [Python 3 Documentation](https://docs.python.org/3/)\n","updated":"2019-09-22T03:30:46.575Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck2fj0nnw0001q4vg4vp3agvx","content":"<p><img src=\"/images/timg.jpeg\" alt=\"I&#39;m a coder\"></p><ul>\n<li>Docker<ul>\n<li><a href=\"https://docs.docker.com\" target=\"_blank\" rel=\"noopener\">Docker Docs</a></li>\n</ul>\n</li>\n<li>Kubernetes<ul>\n<li><a href=\"https://kubernetes.io/docs/home\" target=\"_blank\" rel=\"noopener\">Kubernetes Documentation</a></li>\n</ul>\n</li>\n<li>Java Spring<ul>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/\" target=\"_blank\" rel=\"noopener\">Spring Boot Reference Guide</a></li>\n<li><a href=\"https://spring.io/projects/spring-cloud\" target=\"_blank\" rel=\"noopener\">Spring Cloud</a></li>\n</ul>\n</li>\n<li>Kotlin<ul>\n<li><a href=\"https://www.kotlincn.net/docs/reference/\" target=\"_blank\" rel=\"noopener\">Kotlin Documentation Reference</a></li>\n</ul>\n</li>\n<li>Groovy<ul>\n<li><a href=\"http://www.groovy-lang.org/documentation.html\" target=\"_blank\" rel=\"noopener\">Groovy Documentation</a></li>\n</ul>\n</li>\n<li>Python<ul>\n<li><a href=\"https://docs.python.org/2/\" target=\"_blank\" rel=\"noopener\">Python 2 Documentation</a></li>\n<li><a href=\"https://docs.python.org/3/\" target=\"_blank\" rel=\"noopener\">Python 3 Documentation</a></li>\n</ul>\n</li>\n</ul>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/timg.jpeg\" alt=\"I&#39;m a coder\"></p><ul>\n<li>Docker<ul>\n<li><a href=\"https://docs.docker.com\" target=\"_blank\" rel=\"noopener\">Docker Docs</a></li>\n</ul>\n</li>\n<li>Kubernetes<ul>\n<li><a href=\"https://kubernetes.io/docs/home\" target=\"_blank\" rel=\"noopener\">Kubernetes Documentation</a></li>\n</ul>\n</li>\n<li>Java Spring<ul>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/\" target=\"_blank\" rel=\"noopener\">Spring Boot Reference Guide</a></li>\n<li><a href=\"https://spring.io/projects/spring-cloud\" target=\"_blank\" rel=\"noopener\">Spring Cloud</a></li>\n</ul>\n</li>\n<li>Kotlin<ul>\n<li><a href=\"https://www.kotlincn.net/docs/reference/\" target=\"_blank\" rel=\"noopener\">Kotlin Documentation Reference</a></li>\n</ul>\n</li>\n<li>Groovy<ul>\n<li><a href=\"http://www.groovy-lang.org/documentation.html\" target=\"_blank\" rel=\"noopener\">Groovy Documentation</a></li>\n</ul>\n</li>\n<li>Python<ul>\n<li><a href=\"https://docs.python.org/2/\" target=\"_blank\" rel=\"noopener\">Python 2 Documentation</a></li>\n<li><a href=\"https://docs.python.org/3/\" target=\"_blank\" rel=\"noopener\">Python 3 Documentation</a></li>\n</ul>\n</li>\n</ul>","length":199},{"title":"Categories","date":"2017-03-24T04:55:09.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: Categories\ndate: 2017-03-24 12:55:09\ntype: \"categories\"\n---\n","updated":"2018-04-25T12:46:59.500Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck2fj0no30003q4vgdvpz6bvy","content":"","site":{"data":{}},"excerpt":"","more":"","length":0},{"title":"All tags","date":"2017-03-24T04:58:46.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: All tags\ndate: 2017-03-24 12:58:46\ntype: \"tags\"\n---\n","updated":"2018-04-25T12:46:59.540Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck2fj0nob0007q4vgd7vo1425","content":"","site":{"data":{}},"excerpt":"","more":"","length":0}],"Post":[{"title":"Docker Swarm 入门","author":"Zhang Fei","date":"2017-07-06T15:23:31.000Z","_content":"> Swarm 在 Docker 1.12 版本之前属于一个独立的项目，在 Docker 1.12 版本发布之后，该项目合并到了 Docker 中，成为 Docker 的一个子命令。目前，Swarm 是 Docker 社区提供的唯一一个原生支持 Docker 集群管理的工具。它可以把多个 Docker 主机组成的系统转换为单一的虚拟 Docker 主机，使得容器可以组成跨主机的子网网络。\n\n## Swarm 认识\n\nSwarm 是目前 Docker 官方唯一指定（绑定）的集群管理工具。Docker 1.12 内嵌了 swarm mode 集群管理模式。\n\n为了方便演示跨主机网络，我们需要用到一个工具——Docker Machine，这个工具与 Docker Compose、Docker Swarm 并称 Docker 三剑客，下面我们来看看如何安装 Docker Machine：\n\n```bash\n$ curl -L https://github.com/docker/machine/releases/download/v0.9.0-rc2/docker-machine-`uname -s`-`uname -m` >/tmp/docker-machine &&\n    chmod +x /tmp/docker-machine &&\n    sudo cp /tmp/docker-machine /usr/local/bin/docker-machine\n```\n\n安装过程和 Docker Compose 非常类似。现在 Docker 三剑客已经全部到齐了。\n在开始之前，我们需要了解一些基本概念，有关集群的 Docker 命令如下：\n\n- docker swarm：集群管理，子命令有 init, join,join-token, leave, update\n- docker node：节点管理，子命令有 demote, inspect,ls, promote, rm, ps, update\n- docker service：服务管理，子命令有 create, inspect, ps, ls ,rm , scale, update\n- docker stack/deploy：试验特性，用于多应用部署，等正式版加进来再说。\n\n## 创建集群\n\n首先使用 Docker Machine 创建一个虚拟机作为 manger 节点。\n\n```bash\n$ docker-machine create --driver virtualbox manager1                                    \nRunning pre-create checks...\n(manager1) Unable to get the latest Boot2Docker ISO release version:  Get https://api.github.com/repos/boot2docker/boot2docker/releases/latest: dial tcp: lookup api.github.com on [::1]:53: server misbehaving\nCreating machine...\n(manager1) Unable to get the latest Boot2Docker ISO release version:  Get https://api.github.com/repos/boot2docker/boot2docker/releases/latest: dial tcp: lookup api.github.com on [::1]:53: server misbehaving\n(manager1) Copying /home/zuolan/.docker/machine/cache/boot2docker.iso to /home/zuolan/.docker/machine/machines/manager1/boot2docker.iso...\n(manager1) Creating VirtualBox VM...\n(manager1) Creating SSH key...\n(manager1) Starting the VM...\n(manager1) Check network to re-create if needed...\n(manager1) Found a new host-only adapter: \"vboxnet0\"\n(manager1) Waiting for an IP...\nWaiting for machine to be running, this may take a few minutes...\nDetecting operating system of created instance...\nWaiting for SSH to be available...\nDetecting the provisioner...\nProvisioning with boot2docker...\nCopying certs to the local machine directory...\nCopying certs to the remote machine...\nSetting Docker configuration on the remote daemon...\nChecking connection to Docker...\nDocker is up and running!\nTo see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: docker-machine env manager1\n```\n\n查看虚拟机的环境变量等信息，包括虚拟机的 IP 地址：\n\n```bash\n$  docker-machine env manager1\nexport DOCKER_TLS_VERIFY=\"1\"\nexport DOCKER_HOST=\"tcp://192.168.99.100:2376\"\nexport DOCKER_CERT_PATH=\"/home/zuolan/.docker/machine/machines/manager1\"\nexport DOCKER_MACHINE_NAME=\"manager1\"\n# Run this command to configure your shell: \n# eval $(docker-machine env manager1)\n```\n\n然后再创建一个节点作为 work 节点。\n\n```bash\n$ docker-machine create --driver virtualbox worker1\n```\n\n现在我们有了两个虚拟主机，使用 Machine 的命令可以查看：\n\n```bash\n$ docker-machine ls                             \nNAME     ACTIVE   DRIVER       STATE    URL                        SWARM  DOCKER   ERRORS\nmanager1   -      virtualbox   Running  tcp://192.168.99.100:2376         v1.12.3   \nworker1    -      virtualbox   Running  tcp://192.168.99.101:2376         v1.12.3\n```\n\n但是目前这两台虚拟主机并没有什么联系，为了把它们联系起来，我们需要 Swarm 登场了。\n因为我们使用的是 Docker Machine 创建的虚拟机，因此可以使用 docker-machine ssh 命令来操作虚拟机，在实际生产环境中，并不需要像下面那样操作，只需要执行 docker swarm 即可。\n\n把 manager1 加入集群：\n\n```bash\n$ docker-machine ssh manager1 docker swarm init --listen-addr 192.168.99.100:2377 --advertise-addr 192.168.99.100\nSwarm initialized: current node (23lkbq7uovqsg550qfzup59t6) is now a manager.\n\nTo add a worker to this swarm, run the following command:\n\n    docker swarm join \\\n    --token SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-c036gwrakjejql06klrfc585r \\\n    192.168.99.100:2377\n\nTo add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.\n```\n\n用 --listen-addr 指定监听的 ip 与端口，实际的 Swarm 命令格式如下，本例使用 Docker Machine 来连接虚拟机而已：\n\n```bash\n$ docker swarm init --listen-addr <MANAGER-IP>:<PORT>\n```\n\n接下来，再把 work1 加入集群中：\n\n```bash\n$ docker-machine ssh worker1 docker swarm join --token \\\n    SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-c036gwrakjejql06klrfc585r \\\n    192.168.99.100:2377\nThis node joined a swarm as a worker.\n```\n\n上面 join 命令中可以添加 --listen-addr $WORKER1_IP:2377 作为监听准备，因为有时候可能会遇到把一个 work 节点提升为 manger 节点的可能，当然本例子没有这个打算就不添加这个参数了。\n\n> 注意：如果你在新建集群时遇到双网卡情况，可以指定使用哪个 IP，例如上面的例子会有可能遇到下面的错误。\n\n```bash\n$ docker-machine ssh manager1 docker swarm init --listen-addr $MANAGER1_IP:2377\nError response from daemon: could not choose an IP address to advertise since this system has multiple addresses on different interfaces (10.0.2.15 on eth0 and 192.168.99.100 on eth1) - specify one with --advertise-addr\nexit status 1\n```\n\n发生错误的原因是因为有两个 IP 地址，而 Swarm 不知道用户想使用哪个，因此要指定 IP。\n\n```bash\n$ docker-machine ssh manager1 docker swarm init --advertise-addr 192.168.99.100 --listen-addr 192.168.99.100:2377 \nSwarm initialized: current node (ahvwxicunjd0z8g0eeosjztjx) is now a manager.\n\nTo add a worker to this swarm, run the following command:\n\n    docker swarm join \\\n    --token SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-c036gwrakjejql06klrfc585r \\\n    192.168.99.100:2377\n\nTo add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.\n```\n\n集群初始化成功。\n\n现在我们新建了一个有两个节点的“集群”，现在进入其中一个管理节点使用 docker node 命令来查看节点信息：\n\n```bash\n$ docker-machine ssh manager1 docker node ls\nID                       HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS\n23lkbq7uovqsg550qfzup59t6 *  manager1    Ready      Active         Leader\ndqb3fim8zvcob8sycri3hy98a    worker1     Ready      Active\n```\n\n现在每个节点都归属于 Swarm，并都处在了待机状态。Manager1 是领导者，work1 是工人。\n\n现在，我们继续新建虚拟机 manger2、worker2、worker3，现在已经有五个虚拟机了，使用 docker-machine ls 来查看虚拟机：\n\n```bash\nNAME     ACTIVE    DRIVER       STATE     URL                         SWARM   DOCKER    ERRORS\nmanager1   -       virtualbox   Running   tcp://192.168.99.100:2376           v1.12.3   \nmanager2   -       virtualbox   Running   tcp://192.168.99.105:2376           v1.12.3   \nworker1    -       virtualbox   Running   tcp://192.168.99.102:2376           v1.12.3   \nworker2    -       virtualbox   Running   tcp://192.168.99.103:2376           v1.12.3   \nworker3    -       virtualbox   Running   tcp://192.168.99.104:2376           v1.12.3\n```\n\n然后我们把剩余的虚拟机也加到集群中。\n\n添加 worker2 到集群中：\n\n```bash\n$ docker-machine ssh worker2 docker swarm join \\\n  --token SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-c036gwrakjejql06klrfc585r \\\n  192.168.99.100:2377\nThis node joined a swarm as a worker.\n```\n\n添加 worker3 到集群中：\n\n```bash\n$ docker-machine ssh worker3 docker swarm join \\\n  --token SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-c036gwrakjejql06klrfc585r \\\n  192.168.99.100:2377\nThis node joined a swarm as a worker.\n\n```\n\n添加 manager2 到集群中：\n先从 manager1 中获取 manager 的 token：\n\n```bash\n$ docker-machine ssh manager1 docker swarm join-token manager\nTo add a manager to this swarm, run the following command:\n\n  docker swarm join \\\n  --token SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-8tn855hkjdb6usrblo9iu700o \\\n192.168.99.100:2377\n```\n\n然后添加 manager2 到集群中：\n\n```bash\n$ docker-machine ssh manager2 docker swarm join \\\n  --token SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-8tn855hkjdb6usrblo9iu700o \\\n  192.168.99.100:2377\nThis node joined a swarm as a manager.\n```\n\n现在再来查看集群信息：\n\n```bash\n$ docker-machine ssh manager2 docker node ls\nID                            HOSTNAME   STATUS   AVAILABILITY   MANAGER STATUS\n16w80jnqy2k30yez4wbbaz1l8     worker1     Ready     Active        \n2gkwhzakejj72n5xoxruet71z     worker2     Ready     Active        \n35kutfyn1ratch55fn7j3fs4x     worker3     Ready     Active        \na9r21g5iq1u6h31myprfwl8ln *   manager2    Ready     Active        Reachable\ndpo7snxbz2a0dxvx6mf19p35z     manager1    Ready     Active        Leader\n```\n\n## 建立跨主机网络\n\n为了演示更清晰，下面我们把宿主机也加入到集群之中，这样我们使用 Docker 命令操作会清晰很多。\n直接在本地执行加入集群命令：\n\n```bash\n$ docker swarm join \\           \n    --token SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-8tn855hkjdb6usrblo9iu700o \\\n    192.168.99.100:2377\nThis node joined a swarm as a manager.\n```\n\n现在我们有三台 manager，三台 worker。其中一台是宿主机，五台虚拟机。\n\n```bash\n$ docker node ls\nID                          HOSTNAME    STATUS    AVAILABILITY  MANAGER STATUS\n6z2rpk1t4xucffzlr2rpqb8u3    worker3     Ready     Active        \n7qbr0xd747qena4awx8bx101s *  user-pc     Ready     Active         Reachable\n9v93sav79jqrg0c7051rcxxev    manager2    Ready     Active         Reachable\na1ner3zxj3ubsiw4l3p28wrkj    worker1     Ready     Active        \na5w7h8j83i11qqi4vlu948mad    worker2     Ready     Active        \nd4h7vuekklpd6189fcudpfy18    manager1    Ready     Active          Leader\n```\n\n查看网络状态：\n\n```bash\n$ docker network ls\nNETWORK ID         NAME            DRIVER          SCOPE\n764ff31881e5        bridge          bridge          local                  \nfbd9a977aa03        host            host            local               \n6p6xlousvsy2        ingress         overlay         swarm            \ne81af24d643d        none            null            local\n```\n\n可以看到在 swarm 上默认已有一个名为 ingress 的 overlay 网络, 默认在 swarm 里使用，本例子中会创建一个新的 overlay 网络。\n\n```bash\n$ docker network create --driver overlay swarm_test\n4dm8cy9y5delvs5vd0ghdd89s\n$ docker network ls\nNETWORK ID         NAME                DRIVER              SCOPE\n764ff31881e5        bridge              bridge              local\nfbd9a977aa03        host                host                local\n6p6xlousvsy2        ingress             overlay             swarm\ne81af24d643d        none                null                local\n4dm8cy9y5del        swarm_test          overlay             swarm\n```\n\n这样一个跨主机网络就搭建好了，但是现在这个网络只是处于待机状态，下一小节我们会在这个网络上部署应用。\n\n## 在跨主机网络上部署应用\n\n首先我们上面创建的节点都是没有镜像的，因此我们要逐一 pull 镜像到节点中，这里我们使用前面搭建的私有仓库。\n\n```bash\n$ docker-machine ssh manager1 docker pull reg.example.com/library/nginx:alpine     \nalpine: Pulling from library/nginx\ne110a4a17941: Pulling fs layer\n... ...\n7648f5d87006: Pull complete\nDigest: sha256:65063cb82bf508fd5a731318e795b2abbfb0c22222f02ff5c6b30df7f23292fe\nStatus: Downloaded newer image for reg.example.com/library/nginx:alpine\n$ docker-machine ssh manager2 docker pull reg.example.com/library/nginx:alpine\nalpine: Pulling from library/nginx\ne110a4a17941: Pulling fs layer\n... ...\n7648f5d87006: Pull complete\nDigest: sha256:65063cb82bf508fd5a731318e795b2abbfb0c22222f02ff5c6b30df7f23292fe\nStatus: Downloaded newer image for reg.example.com/library/nginx:alpine\n$ docker-machine ssh worker1 docker pull reg.example.com/library/nginx:alpine \nalpine: Pulling from library/nginx\ne110a4a17941: Pulling fs layer\n... ...\n7648f5d87006: Pull complete\nDigest: sha256:65063cb82bf508fd5a731318e795b2abbfb0c22222f02ff5c6b30df7f23292fe\nStatus: Downloaded newer image for reg.example.com/library/nginx:alpine\n$ docker-machine ssh worker2 docker pull reg.example.com/library/nginx:alpine\nalpine: Pulling from library/nginx\ne110a4a17941: Pulling fs layer\n... ...\n7648f5d87006: Pull complete\nDigest: sha256:65063cb82bf508fd5a731318e795b2abbfb0c22222f02ff5c6b30df7f23292fe\nStatus: Downloaded newer image for reg.example.com/library/nginx:alpine\n$ docker-machine ssh worker3 docker pull reg.example.com/library/nginx:alpine\nalpine: Pulling from library/nginx\ne110a4a17941: Pulling fs layer\n... ...\n7648f5d87006: Pull complete\nDigest: sha256:65063cb82bf508fd5a731318e795b2abbfb0c22222f02ff5c6b30df7f23292fe\nStatus: Downloaded newer image for reg.example.com/library/nginx:alpine\n```\n\n上面使用 docker pull 分别在五个虚拟机节点拉取 nginx:alpine 镜像。接下来我们要在五个节点部署一组 Nginx 服务。\n\n部署的服务使用 swarm_test 跨主机网络。\n\n```bash\n$ docker service create --replicas 2 --name helloworld --network=swarm_test nginx:alpine\n5gz0h2s5agh2d2libvzq6bhgs\n```\n\n查看服务状态：\n\n```bash\n$ docker service ls\nID            NAME        REPLICAS  IMAGE         COMMAND\n5gz0h2s5agh2  helloworld  0/2       nginx:alpine\n```\n\n查看 helloworld 服务详情（为了方便阅读，已调整输出内容）：\n\n```bash\n$ docker service ps helloworld\nID          NAME          IMAGE         NODE      DESIRED STATE   CURRENT STATE              ERROR\nay081uome3   helloworld.1  nginx:alpine  manager1  Running         Preparing 2 seconds ago  \n16cvore0c96  helloworld.2  nginx:alpine  worker2   Running         Preparing 2 seconds ago\n```\n\n可以看到两个实例分别运行在两个节点上。\n\n进入两个节点，查看服务状态（为了方便阅读，已调整输出内容）：\n\n```bash\n$ docker-machine ssh manager1 docker ps -a\nCONTAINER ID   IMAGE         COMMAND         CREATED        STATUS         PORTS            NAMES\n119f787622c2   nginx:alpine  \"nginx -g ...\"   4 minutes ago  Up 4 minutes   80/tcp, 443/tcp  hello ...\n$ docker-machine ssh worker2 docker ps -a\nCONTAINER ID   IMAGE         COMMAND         CREATED         STATUS        PORTS             NAMES\n5db707401a06   nginx:alpine  \"nginx -g ...\"   4 minutes ago   Up 4 minutes  80/tcp, 443/tcp   hello ...\n```\n上面输出做了调整，实际的 NAMES 值为：\n\n```bash\nhelloworld.1.ay081uome3eejeg4mspa8pdlx\nhelloworld.2.16cvore0c96rby1vp0sny3mvt\n```\n\n记住上面这两个实例的名称。现在我们来看这两个跨主机的容器是否能互通：\n首先使用 Machine 进入 manager1 节点，然后使用 docker exec -i 命令进入 helloworld.1 容器中 ping 运行在 worker2 节点的 helloworld.2 容器。\n\n```bash\n$ docker-machine ssh manager1 docker exec -i helloworld.1.ay081uome3eejeg4mspa8pdlx \\\n    ping helloworld.2.16cvore0c96rby1vp0sny3mvt\nPING helloworld.2.16cvore0c96rby1vp0sny3mvt (10.0.0.4): 56 data bytes\n64 bytes from 10.0.0.4: seq=0 ttl=64 time=0.591 ms\n64 bytes from 10.0.0.4: seq=1 ttl=64 time=0.594 ms\n64 bytes from 10.0.0.4: seq=2 ttl=64 time=0.624 ms\n64 bytes from 10.0.0.4: seq=3 ttl=64 time=0.612 ms\n^C\n```\n然后使用 Machine 进入 worker2 节点，然后使用 docker exec -i 命令进入 helloworld.2 容器中 ping 运行在 manager1 节点的 helloworld.1 容器。\n\n```bash\n$ docker-machine ssh worker2 docker exec -i helloworld.2.16cvore0c96rby1vp0sny3mvt \\\n    ping helloworld.1.ay081uome3eejeg4mspa8pdlx \nPING helloworld.1.ay081uome3eejeg4mspa8pdlx (10.0.0.3): 56 data bytes\n64 bytes from 10.0.0.3: seq=0 ttl=64 time=0.466 ms\n64 bytes from 10.0.0.3: seq=1 ttl=64 time=0.465 ms\n64 bytes from 10.0.0.3: seq=2 ttl=64 time=0.548 ms\n64 bytes from 10.0.0.3: seq=3 ttl=64 time=0.689 ms\n^C\n```\n\n可以看到这两个跨主机的服务集群里面各个容器是可以互相连接的。\n\n为了体现 Swarm 集群的优势，我们可以使用虚拟机的 ping 命令来测试对方虚拟机内的容器。\n\n```bash\n$ docker-machine ssh worker2 ping helloworld.1.ay081uome3eejeg4mspa8pdlx\nPING helloworld.1.ay081uome3eejeg4mspa8pdlx (221.179.46.190): 56 data bytes\n64 bytes from 221.179.46.190: seq=0 ttl=63 time=48.651 ms\n64 bytes from 221.179.46.190: seq=1 ttl=63 time=63.239 ms\n64 bytes from 221.179.46.190: seq=2 ttl=63 time=47.686 ms\n64 bytes from 221.179.46.190: seq=3 ttl=63 time=61.232 ms\n^C\n$ docker-machine ssh manager1 ping helloworld.2.16cvore0c96rby1vp0sny3mvt\nPING helloworld.2.16cvore0c96rby1vp0sny3mvt (221.179.46.194): 56 data bytes\n64 bytes from 221.179.46.194: seq=0 ttl=63 time=30.150 ms\n64 bytes from 221.179.46.194: seq=1 ttl=63 time=54.455 ms\n64 bytes from 221.179.46.194: seq=2 ttl=63 time=73.862 ms\n64 bytes from 221.179.46.194: seq=3 ttl=63 time=53.171 ms\n^C\n```\n\n上面我们使用了虚拟机内部的 ping 去测试容器的延迟，可以看到延迟明显比集群内部的 ping 值要高。\n\n## Swarm 集群负载\n\n现在我们已经学会了 Swarm 集群的部署方法，现在来搭建一个可访问的 Nginx 集群吧。体验最新版的 Swarm 所提供的自动服务发现与集群负载功能。\n首先删掉上一节我们启动的 helloworld 服务：\n\n```bash\n$ docker service rm helloworld                                 \nhelloworld\n```\n\n然后在新建一个服务，提供端口映射参数，使得外界可以访问这些 Nginx 服务：\n\n```bash\n$ docker service create --replicas 2 --name helloworld -p 7080:80 --network=swarm_test nginx:alpine\n9gfziifbii7a6zdqt56kocyun\n```\n\n查看服务运行状态：\n\n```bash\n$ docker service ls                                                                                \nID           NAME         REPLICAS     IMAGE           COMMAND\n9gfziifbii7a  helloworld     2/2        nginx:alpine\n```\n\n不知你有没有发现，虽然我们使用 --replicas 参数的值都是一样的，但是上一节中获取服务状态时，REPLICAS 返回的是 0/2，现在的 REPLICAS 返回的是 2/2。\n同样使用 docker service ps 查看服务详细状态时（下面输出已经手动调整为更易读的格式），可以看到实例的 CURRENT STATE 中是 Running 状态的，而上一节中的 CURRENT STATE 中全部是处于 Preparing 状态。\n\n```bash\n$ docker service ps helloworld\nID          NAME      IMAGE     NODE    DESIRED STATE   CURRENT STATE    ERROR\n9ikr3agyi...   helloworld.1  nginx:alpine  user-pc    Running         Running 13 seconds ago  \n7acmhj0u...   helloworld.2  nginx:alpine  worker2    Running         Running 6 seconds ago\n```\n\n这就涉及到 Swarm 内置的发现机制了，目前 Docker 1.12 中 Swarm 已经内置了服务发现工具，我们不再需要像以前使用 Etcd 或者 Consul 这些工具来配置服务发现。对于一个容器来说如果没有外部通信但又是运行中的状态会被服务发现工具认为是 Preparing 状态，本小节例子中因为映射了端口，因此有了 Running 状态。\n现在我们来看 Swarm 另一个有趣的功能，当我们杀死其中一个节点时，会发生什么。\n首先 kill 掉 worker2 的实例：\n\n```bash\n$ docker-machine ssh worker2 docker kill helloworld.2.7acmhj0udzusv1d7lu2tbuhu4\nhelloworld.2.7acmhj0udzusv1d7lu2tbuhu4\n```\n\n稍等几秒，再来看服务状态：\n\n```bash\n$ docker service ps helloworld\nID         NAME          IMAGE     NODE   DESIRED STATE  CURRENT STATE   ERROR\n9ikr3agyi...  helloworld.1     nginx:alpine  zuolan-pc  Running       Running 19 minutes ago  \n8f866igpl...  helloworld.2     nginx:alpine  manager1  Running       Running 4 seconds ago   \n7acmhj0u...   \\_ helloworld.2  nginx:alpine  worker2   Shutdown       Failed 11 seconds ago  ...exit...\n$ docker service ls           \nID            NAME        REPLICAS  IMAGE         COMMAND\n9gfziifbii7a  helloworld  2/2       nginx:alpine\n```\n\n可以看到即使我们 kill 掉其中一个实例，Swarm 也会迅速把停止的容器撤下来，同时在节点中启动一个新的实例顶上来。这样服务依旧还是两个实例在运行。\n此时如果你想添加更多实例可以使用 scale 命令：\n\n```bash\n$ docker service scale helloworld=3\nhelloworld scaled to 3\n```\n\n查看服务详情，可以看到有三个实例启动了：\n\n```bash\n$ docker service ps helloworld\nID         NAME        IMAGE      NODE   DESIRED STATE  CURRENT STATE    ERROR\n9ikr3agyi...  helloworld.1    nginx:alpine  user-pc   Running        Running 30 minutes ago  8f866igpl...  helloworld.2    nginx:alpine  manager1  Running        Running 11 minutes ago  7acmhj0u...  \\_ helloworld.2  nginx:alpine  worker2   Shutdown       Failed 11 minutes ago   exit137\n1vexr1jm...  helloworld.3    nginx:alpine   worker2   Running       Running 4 seconds ago\n```\n\n现在如果想减少实例数量，一样可以使用 scale 命令：\n\n```bash\n$ docker service scale helloworld=2\nhelloworld scaled to 2\n```\n\n至此，Swarm的主要用法都已经介绍完了，主要讲述了 Swarm 集群网络的创建与部署。介绍了 Swarm 的常规应用，包括 Swarm 的服务发现、负载均衡等，然后使用 Swarm 来配置跨主机容器网络，并在上面部署应用。\n\n> 转自： http://www.jianshu.com/p/9eb9995884a5","source":"_posts/Docker-Swarm-入门.md","raw":"---\ntitle: Docker Swarm 入门\nauthor: Zhang Fei\ndate: 2017-07-06 23:23:31\ntags:\n  - Docker\n  - Docker Swarm\ncategories:\n  - Collection\n---\n> Swarm 在 Docker 1.12 版本之前属于一个独立的项目，在 Docker 1.12 版本发布之后，该项目合并到了 Docker 中，成为 Docker 的一个子命令。目前，Swarm 是 Docker 社区提供的唯一一个原生支持 Docker 集群管理的工具。它可以把多个 Docker 主机组成的系统转换为单一的虚拟 Docker 主机，使得容器可以组成跨主机的子网网络。\n\n## Swarm 认识\n\nSwarm 是目前 Docker 官方唯一指定（绑定）的集群管理工具。Docker 1.12 内嵌了 swarm mode 集群管理模式。\n\n为了方便演示跨主机网络，我们需要用到一个工具——Docker Machine，这个工具与 Docker Compose、Docker Swarm 并称 Docker 三剑客，下面我们来看看如何安装 Docker Machine：\n\n```bash\n$ curl -L https://github.com/docker/machine/releases/download/v0.9.0-rc2/docker-machine-`uname -s`-`uname -m` >/tmp/docker-machine &&\n    chmod +x /tmp/docker-machine &&\n    sudo cp /tmp/docker-machine /usr/local/bin/docker-machine\n```\n\n安装过程和 Docker Compose 非常类似。现在 Docker 三剑客已经全部到齐了。\n在开始之前，我们需要了解一些基本概念，有关集群的 Docker 命令如下：\n\n- docker swarm：集群管理，子命令有 init, join,join-token, leave, update\n- docker node：节点管理，子命令有 demote, inspect,ls, promote, rm, ps, update\n- docker service：服务管理，子命令有 create, inspect, ps, ls ,rm , scale, update\n- docker stack/deploy：试验特性，用于多应用部署，等正式版加进来再说。\n\n## 创建集群\n\n首先使用 Docker Machine 创建一个虚拟机作为 manger 节点。\n\n```bash\n$ docker-machine create --driver virtualbox manager1                                    \nRunning pre-create checks...\n(manager1) Unable to get the latest Boot2Docker ISO release version:  Get https://api.github.com/repos/boot2docker/boot2docker/releases/latest: dial tcp: lookup api.github.com on [::1]:53: server misbehaving\nCreating machine...\n(manager1) Unable to get the latest Boot2Docker ISO release version:  Get https://api.github.com/repos/boot2docker/boot2docker/releases/latest: dial tcp: lookup api.github.com on [::1]:53: server misbehaving\n(manager1) Copying /home/zuolan/.docker/machine/cache/boot2docker.iso to /home/zuolan/.docker/machine/machines/manager1/boot2docker.iso...\n(manager1) Creating VirtualBox VM...\n(manager1) Creating SSH key...\n(manager1) Starting the VM...\n(manager1) Check network to re-create if needed...\n(manager1) Found a new host-only adapter: \"vboxnet0\"\n(manager1) Waiting for an IP...\nWaiting for machine to be running, this may take a few minutes...\nDetecting operating system of created instance...\nWaiting for SSH to be available...\nDetecting the provisioner...\nProvisioning with boot2docker...\nCopying certs to the local machine directory...\nCopying certs to the remote machine...\nSetting Docker configuration on the remote daemon...\nChecking connection to Docker...\nDocker is up and running!\nTo see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: docker-machine env manager1\n```\n\n查看虚拟机的环境变量等信息，包括虚拟机的 IP 地址：\n\n```bash\n$  docker-machine env manager1\nexport DOCKER_TLS_VERIFY=\"1\"\nexport DOCKER_HOST=\"tcp://192.168.99.100:2376\"\nexport DOCKER_CERT_PATH=\"/home/zuolan/.docker/machine/machines/manager1\"\nexport DOCKER_MACHINE_NAME=\"manager1\"\n# Run this command to configure your shell: \n# eval $(docker-machine env manager1)\n```\n\n然后再创建一个节点作为 work 节点。\n\n```bash\n$ docker-machine create --driver virtualbox worker1\n```\n\n现在我们有了两个虚拟主机，使用 Machine 的命令可以查看：\n\n```bash\n$ docker-machine ls                             \nNAME     ACTIVE   DRIVER       STATE    URL                        SWARM  DOCKER   ERRORS\nmanager1   -      virtualbox   Running  tcp://192.168.99.100:2376         v1.12.3   \nworker1    -      virtualbox   Running  tcp://192.168.99.101:2376         v1.12.3\n```\n\n但是目前这两台虚拟主机并没有什么联系，为了把它们联系起来，我们需要 Swarm 登场了。\n因为我们使用的是 Docker Machine 创建的虚拟机，因此可以使用 docker-machine ssh 命令来操作虚拟机，在实际生产环境中，并不需要像下面那样操作，只需要执行 docker swarm 即可。\n\n把 manager1 加入集群：\n\n```bash\n$ docker-machine ssh manager1 docker swarm init --listen-addr 192.168.99.100:2377 --advertise-addr 192.168.99.100\nSwarm initialized: current node (23lkbq7uovqsg550qfzup59t6) is now a manager.\n\nTo add a worker to this swarm, run the following command:\n\n    docker swarm join \\\n    --token SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-c036gwrakjejql06klrfc585r \\\n    192.168.99.100:2377\n\nTo add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.\n```\n\n用 --listen-addr 指定监听的 ip 与端口，实际的 Swarm 命令格式如下，本例使用 Docker Machine 来连接虚拟机而已：\n\n```bash\n$ docker swarm init --listen-addr <MANAGER-IP>:<PORT>\n```\n\n接下来，再把 work1 加入集群中：\n\n```bash\n$ docker-machine ssh worker1 docker swarm join --token \\\n    SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-c036gwrakjejql06klrfc585r \\\n    192.168.99.100:2377\nThis node joined a swarm as a worker.\n```\n\n上面 join 命令中可以添加 --listen-addr $WORKER1_IP:2377 作为监听准备，因为有时候可能会遇到把一个 work 节点提升为 manger 节点的可能，当然本例子没有这个打算就不添加这个参数了。\n\n> 注意：如果你在新建集群时遇到双网卡情况，可以指定使用哪个 IP，例如上面的例子会有可能遇到下面的错误。\n\n```bash\n$ docker-machine ssh manager1 docker swarm init --listen-addr $MANAGER1_IP:2377\nError response from daemon: could not choose an IP address to advertise since this system has multiple addresses on different interfaces (10.0.2.15 on eth0 and 192.168.99.100 on eth1) - specify one with --advertise-addr\nexit status 1\n```\n\n发生错误的原因是因为有两个 IP 地址，而 Swarm 不知道用户想使用哪个，因此要指定 IP。\n\n```bash\n$ docker-machine ssh manager1 docker swarm init --advertise-addr 192.168.99.100 --listen-addr 192.168.99.100:2377 \nSwarm initialized: current node (ahvwxicunjd0z8g0eeosjztjx) is now a manager.\n\nTo add a worker to this swarm, run the following command:\n\n    docker swarm join \\\n    --token SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-c036gwrakjejql06klrfc585r \\\n    192.168.99.100:2377\n\nTo add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.\n```\n\n集群初始化成功。\n\n现在我们新建了一个有两个节点的“集群”，现在进入其中一个管理节点使用 docker node 命令来查看节点信息：\n\n```bash\n$ docker-machine ssh manager1 docker node ls\nID                       HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS\n23lkbq7uovqsg550qfzup59t6 *  manager1    Ready      Active         Leader\ndqb3fim8zvcob8sycri3hy98a    worker1     Ready      Active\n```\n\n现在每个节点都归属于 Swarm，并都处在了待机状态。Manager1 是领导者，work1 是工人。\n\n现在，我们继续新建虚拟机 manger2、worker2、worker3，现在已经有五个虚拟机了，使用 docker-machine ls 来查看虚拟机：\n\n```bash\nNAME     ACTIVE    DRIVER       STATE     URL                         SWARM   DOCKER    ERRORS\nmanager1   -       virtualbox   Running   tcp://192.168.99.100:2376           v1.12.3   \nmanager2   -       virtualbox   Running   tcp://192.168.99.105:2376           v1.12.3   \nworker1    -       virtualbox   Running   tcp://192.168.99.102:2376           v1.12.3   \nworker2    -       virtualbox   Running   tcp://192.168.99.103:2376           v1.12.3   \nworker3    -       virtualbox   Running   tcp://192.168.99.104:2376           v1.12.3\n```\n\n然后我们把剩余的虚拟机也加到集群中。\n\n添加 worker2 到集群中：\n\n```bash\n$ docker-machine ssh worker2 docker swarm join \\\n  --token SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-c036gwrakjejql06klrfc585r \\\n  192.168.99.100:2377\nThis node joined a swarm as a worker.\n```\n\n添加 worker3 到集群中：\n\n```bash\n$ docker-machine ssh worker3 docker swarm join \\\n  --token SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-c036gwrakjejql06klrfc585r \\\n  192.168.99.100:2377\nThis node joined a swarm as a worker.\n\n```\n\n添加 manager2 到集群中：\n先从 manager1 中获取 manager 的 token：\n\n```bash\n$ docker-machine ssh manager1 docker swarm join-token manager\nTo add a manager to this swarm, run the following command:\n\n  docker swarm join \\\n  --token SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-8tn855hkjdb6usrblo9iu700o \\\n192.168.99.100:2377\n```\n\n然后添加 manager2 到集群中：\n\n```bash\n$ docker-machine ssh manager2 docker swarm join \\\n  --token SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-8tn855hkjdb6usrblo9iu700o \\\n  192.168.99.100:2377\nThis node joined a swarm as a manager.\n```\n\n现在再来查看集群信息：\n\n```bash\n$ docker-machine ssh manager2 docker node ls\nID                            HOSTNAME   STATUS   AVAILABILITY   MANAGER STATUS\n16w80jnqy2k30yez4wbbaz1l8     worker1     Ready     Active        \n2gkwhzakejj72n5xoxruet71z     worker2     Ready     Active        \n35kutfyn1ratch55fn7j3fs4x     worker3     Ready     Active        \na9r21g5iq1u6h31myprfwl8ln *   manager2    Ready     Active        Reachable\ndpo7snxbz2a0dxvx6mf19p35z     manager1    Ready     Active        Leader\n```\n\n## 建立跨主机网络\n\n为了演示更清晰，下面我们把宿主机也加入到集群之中，这样我们使用 Docker 命令操作会清晰很多。\n直接在本地执行加入集群命令：\n\n```bash\n$ docker swarm join \\           \n    --token SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-8tn855hkjdb6usrblo9iu700o \\\n    192.168.99.100:2377\nThis node joined a swarm as a manager.\n```\n\n现在我们有三台 manager，三台 worker。其中一台是宿主机，五台虚拟机。\n\n```bash\n$ docker node ls\nID                          HOSTNAME    STATUS    AVAILABILITY  MANAGER STATUS\n6z2rpk1t4xucffzlr2rpqb8u3    worker3     Ready     Active        \n7qbr0xd747qena4awx8bx101s *  user-pc     Ready     Active         Reachable\n9v93sav79jqrg0c7051rcxxev    manager2    Ready     Active         Reachable\na1ner3zxj3ubsiw4l3p28wrkj    worker1     Ready     Active        \na5w7h8j83i11qqi4vlu948mad    worker2     Ready     Active        \nd4h7vuekklpd6189fcudpfy18    manager1    Ready     Active          Leader\n```\n\n查看网络状态：\n\n```bash\n$ docker network ls\nNETWORK ID         NAME            DRIVER          SCOPE\n764ff31881e5        bridge          bridge          local                  \nfbd9a977aa03        host            host            local               \n6p6xlousvsy2        ingress         overlay         swarm            \ne81af24d643d        none            null            local\n```\n\n可以看到在 swarm 上默认已有一个名为 ingress 的 overlay 网络, 默认在 swarm 里使用，本例子中会创建一个新的 overlay 网络。\n\n```bash\n$ docker network create --driver overlay swarm_test\n4dm8cy9y5delvs5vd0ghdd89s\n$ docker network ls\nNETWORK ID         NAME                DRIVER              SCOPE\n764ff31881e5        bridge              bridge              local\nfbd9a977aa03        host                host                local\n6p6xlousvsy2        ingress             overlay             swarm\ne81af24d643d        none                null                local\n4dm8cy9y5del        swarm_test          overlay             swarm\n```\n\n这样一个跨主机网络就搭建好了，但是现在这个网络只是处于待机状态，下一小节我们会在这个网络上部署应用。\n\n## 在跨主机网络上部署应用\n\n首先我们上面创建的节点都是没有镜像的，因此我们要逐一 pull 镜像到节点中，这里我们使用前面搭建的私有仓库。\n\n```bash\n$ docker-machine ssh manager1 docker pull reg.example.com/library/nginx:alpine     \nalpine: Pulling from library/nginx\ne110a4a17941: Pulling fs layer\n... ...\n7648f5d87006: Pull complete\nDigest: sha256:65063cb82bf508fd5a731318e795b2abbfb0c22222f02ff5c6b30df7f23292fe\nStatus: Downloaded newer image for reg.example.com/library/nginx:alpine\n$ docker-machine ssh manager2 docker pull reg.example.com/library/nginx:alpine\nalpine: Pulling from library/nginx\ne110a4a17941: Pulling fs layer\n... ...\n7648f5d87006: Pull complete\nDigest: sha256:65063cb82bf508fd5a731318e795b2abbfb0c22222f02ff5c6b30df7f23292fe\nStatus: Downloaded newer image for reg.example.com/library/nginx:alpine\n$ docker-machine ssh worker1 docker pull reg.example.com/library/nginx:alpine \nalpine: Pulling from library/nginx\ne110a4a17941: Pulling fs layer\n... ...\n7648f5d87006: Pull complete\nDigest: sha256:65063cb82bf508fd5a731318e795b2abbfb0c22222f02ff5c6b30df7f23292fe\nStatus: Downloaded newer image for reg.example.com/library/nginx:alpine\n$ docker-machine ssh worker2 docker pull reg.example.com/library/nginx:alpine\nalpine: Pulling from library/nginx\ne110a4a17941: Pulling fs layer\n... ...\n7648f5d87006: Pull complete\nDigest: sha256:65063cb82bf508fd5a731318e795b2abbfb0c22222f02ff5c6b30df7f23292fe\nStatus: Downloaded newer image for reg.example.com/library/nginx:alpine\n$ docker-machine ssh worker3 docker pull reg.example.com/library/nginx:alpine\nalpine: Pulling from library/nginx\ne110a4a17941: Pulling fs layer\n... ...\n7648f5d87006: Pull complete\nDigest: sha256:65063cb82bf508fd5a731318e795b2abbfb0c22222f02ff5c6b30df7f23292fe\nStatus: Downloaded newer image for reg.example.com/library/nginx:alpine\n```\n\n上面使用 docker pull 分别在五个虚拟机节点拉取 nginx:alpine 镜像。接下来我们要在五个节点部署一组 Nginx 服务。\n\n部署的服务使用 swarm_test 跨主机网络。\n\n```bash\n$ docker service create --replicas 2 --name helloworld --network=swarm_test nginx:alpine\n5gz0h2s5agh2d2libvzq6bhgs\n```\n\n查看服务状态：\n\n```bash\n$ docker service ls\nID            NAME        REPLICAS  IMAGE         COMMAND\n5gz0h2s5agh2  helloworld  0/2       nginx:alpine\n```\n\n查看 helloworld 服务详情（为了方便阅读，已调整输出内容）：\n\n```bash\n$ docker service ps helloworld\nID          NAME          IMAGE         NODE      DESIRED STATE   CURRENT STATE              ERROR\nay081uome3   helloworld.1  nginx:alpine  manager1  Running         Preparing 2 seconds ago  \n16cvore0c96  helloworld.2  nginx:alpine  worker2   Running         Preparing 2 seconds ago\n```\n\n可以看到两个实例分别运行在两个节点上。\n\n进入两个节点，查看服务状态（为了方便阅读，已调整输出内容）：\n\n```bash\n$ docker-machine ssh manager1 docker ps -a\nCONTAINER ID   IMAGE         COMMAND         CREATED        STATUS         PORTS            NAMES\n119f787622c2   nginx:alpine  \"nginx -g ...\"   4 minutes ago  Up 4 minutes   80/tcp, 443/tcp  hello ...\n$ docker-machine ssh worker2 docker ps -a\nCONTAINER ID   IMAGE         COMMAND         CREATED         STATUS        PORTS             NAMES\n5db707401a06   nginx:alpine  \"nginx -g ...\"   4 minutes ago   Up 4 minutes  80/tcp, 443/tcp   hello ...\n```\n上面输出做了调整，实际的 NAMES 值为：\n\n```bash\nhelloworld.1.ay081uome3eejeg4mspa8pdlx\nhelloworld.2.16cvore0c96rby1vp0sny3mvt\n```\n\n记住上面这两个实例的名称。现在我们来看这两个跨主机的容器是否能互通：\n首先使用 Machine 进入 manager1 节点，然后使用 docker exec -i 命令进入 helloworld.1 容器中 ping 运行在 worker2 节点的 helloworld.2 容器。\n\n```bash\n$ docker-machine ssh manager1 docker exec -i helloworld.1.ay081uome3eejeg4mspa8pdlx \\\n    ping helloworld.2.16cvore0c96rby1vp0sny3mvt\nPING helloworld.2.16cvore0c96rby1vp0sny3mvt (10.0.0.4): 56 data bytes\n64 bytes from 10.0.0.4: seq=0 ttl=64 time=0.591 ms\n64 bytes from 10.0.0.4: seq=1 ttl=64 time=0.594 ms\n64 bytes from 10.0.0.4: seq=2 ttl=64 time=0.624 ms\n64 bytes from 10.0.0.4: seq=3 ttl=64 time=0.612 ms\n^C\n```\n然后使用 Machine 进入 worker2 节点，然后使用 docker exec -i 命令进入 helloworld.2 容器中 ping 运行在 manager1 节点的 helloworld.1 容器。\n\n```bash\n$ docker-machine ssh worker2 docker exec -i helloworld.2.16cvore0c96rby1vp0sny3mvt \\\n    ping helloworld.1.ay081uome3eejeg4mspa8pdlx \nPING helloworld.1.ay081uome3eejeg4mspa8pdlx (10.0.0.3): 56 data bytes\n64 bytes from 10.0.0.3: seq=0 ttl=64 time=0.466 ms\n64 bytes from 10.0.0.3: seq=1 ttl=64 time=0.465 ms\n64 bytes from 10.0.0.3: seq=2 ttl=64 time=0.548 ms\n64 bytes from 10.0.0.3: seq=3 ttl=64 time=0.689 ms\n^C\n```\n\n可以看到这两个跨主机的服务集群里面各个容器是可以互相连接的。\n\n为了体现 Swarm 集群的优势，我们可以使用虚拟机的 ping 命令来测试对方虚拟机内的容器。\n\n```bash\n$ docker-machine ssh worker2 ping helloworld.1.ay081uome3eejeg4mspa8pdlx\nPING helloworld.1.ay081uome3eejeg4mspa8pdlx (221.179.46.190): 56 data bytes\n64 bytes from 221.179.46.190: seq=0 ttl=63 time=48.651 ms\n64 bytes from 221.179.46.190: seq=1 ttl=63 time=63.239 ms\n64 bytes from 221.179.46.190: seq=2 ttl=63 time=47.686 ms\n64 bytes from 221.179.46.190: seq=3 ttl=63 time=61.232 ms\n^C\n$ docker-machine ssh manager1 ping helloworld.2.16cvore0c96rby1vp0sny3mvt\nPING helloworld.2.16cvore0c96rby1vp0sny3mvt (221.179.46.194): 56 data bytes\n64 bytes from 221.179.46.194: seq=0 ttl=63 time=30.150 ms\n64 bytes from 221.179.46.194: seq=1 ttl=63 time=54.455 ms\n64 bytes from 221.179.46.194: seq=2 ttl=63 time=73.862 ms\n64 bytes from 221.179.46.194: seq=3 ttl=63 time=53.171 ms\n^C\n```\n\n上面我们使用了虚拟机内部的 ping 去测试容器的延迟，可以看到延迟明显比集群内部的 ping 值要高。\n\n## Swarm 集群负载\n\n现在我们已经学会了 Swarm 集群的部署方法，现在来搭建一个可访问的 Nginx 集群吧。体验最新版的 Swarm 所提供的自动服务发现与集群负载功能。\n首先删掉上一节我们启动的 helloworld 服务：\n\n```bash\n$ docker service rm helloworld                                 \nhelloworld\n```\n\n然后在新建一个服务，提供端口映射参数，使得外界可以访问这些 Nginx 服务：\n\n```bash\n$ docker service create --replicas 2 --name helloworld -p 7080:80 --network=swarm_test nginx:alpine\n9gfziifbii7a6zdqt56kocyun\n```\n\n查看服务运行状态：\n\n```bash\n$ docker service ls                                                                                \nID           NAME         REPLICAS     IMAGE           COMMAND\n9gfziifbii7a  helloworld     2/2        nginx:alpine\n```\n\n不知你有没有发现，虽然我们使用 --replicas 参数的值都是一样的，但是上一节中获取服务状态时，REPLICAS 返回的是 0/2，现在的 REPLICAS 返回的是 2/2。\n同样使用 docker service ps 查看服务详细状态时（下面输出已经手动调整为更易读的格式），可以看到实例的 CURRENT STATE 中是 Running 状态的，而上一节中的 CURRENT STATE 中全部是处于 Preparing 状态。\n\n```bash\n$ docker service ps helloworld\nID          NAME      IMAGE     NODE    DESIRED STATE   CURRENT STATE    ERROR\n9ikr3agyi...   helloworld.1  nginx:alpine  user-pc    Running         Running 13 seconds ago  \n7acmhj0u...   helloworld.2  nginx:alpine  worker2    Running         Running 6 seconds ago\n```\n\n这就涉及到 Swarm 内置的发现机制了，目前 Docker 1.12 中 Swarm 已经内置了服务发现工具，我们不再需要像以前使用 Etcd 或者 Consul 这些工具来配置服务发现。对于一个容器来说如果没有外部通信但又是运行中的状态会被服务发现工具认为是 Preparing 状态，本小节例子中因为映射了端口，因此有了 Running 状态。\n现在我们来看 Swarm 另一个有趣的功能，当我们杀死其中一个节点时，会发生什么。\n首先 kill 掉 worker2 的实例：\n\n```bash\n$ docker-machine ssh worker2 docker kill helloworld.2.7acmhj0udzusv1d7lu2tbuhu4\nhelloworld.2.7acmhj0udzusv1d7lu2tbuhu4\n```\n\n稍等几秒，再来看服务状态：\n\n```bash\n$ docker service ps helloworld\nID         NAME          IMAGE     NODE   DESIRED STATE  CURRENT STATE   ERROR\n9ikr3agyi...  helloworld.1     nginx:alpine  zuolan-pc  Running       Running 19 minutes ago  \n8f866igpl...  helloworld.2     nginx:alpine  manager1  Running       Running 4 seconds ago   \n7acmhj0u...   \\_ helloworld.2  nginx:alpine  worker2   Shutdown       Failed 11 seconds ago  ...exit...\n$ docker service ls           \nID            NAME        REPLICAS  IMAGE         COMMAND\n9gfziifbii7a  helloworld  2/2       nginx:alpine\n```\n\n可以看到即使我们 kill 掉其中一个实例，Swarm 也会迅速把停止的容器撤下来，同时在节点中启动一个新的实例顶上来。这样服务依旧还是两个实例在运行。\n此时如果你想添加更多实例可以使用 scale 命令：\n\n```bash\n$ docker service scale helloworld=3\nhelloworld scaled to 3\n```\n\n查看服务详情，可以看到有三个实例启动了：\n\n```bash\n$ docker service ps helloworld\nID         NAME        IMAGE      NODE   DESIRED STATE  CURRENT STATE    ERROR\n9ikr3agyi...  helloworld.1    nginx:alpine  user-pc   Running        Running 30 minutes ago  8f866igpl...  helloworld.2    nginx:alpine  manager1  Running        Running 11 minutes ago  7acmhj0u...  \\_ helloworld.2  nginx:alpine  worker2   Shutdown       Failed 11 minutes ago   exit137\n1vexr1jm...  helloworld.3    nginx:alpine   worker2   Running       Running 4 seconds ago\n```\n\n现在如果想减少实例数量，一样可以使用 scale 命令：\n\n```bash\n$ docker service scale helloworld=2\nhelloworld scaled to 2\n```\n\n至此，Swarm的主要用法都已经介绍完了，主要讲述了 Swarm 集群网络的创建与部署。介绍了 Swarm 的常规应用，包括 Swarm 的服务发现、负载均衡等，然后使用 Swarm 来配置跨主机容器网络，并在上面部署应用。\n\n> 转自： http://www.jianshu.com/p/9eb9995884a5","slug":"Docker-Swarm-入门","published":1,"updated":"2018-04-25T12:46:59.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2fj0nny0002q4vgbfs9a5t4","content":"<blockquote>\n<p>Swarm 在 Docker 1.12 版本之前属于一个独立的项目，在 Docker 1.12 版本发布之后，该项目合并到了 Docker 中，成为 Docker 的一个子命令。目前，Swarm 是 Docker 社区提供的唯一一个原生支持 Docker 集群管理的工具。它可以把多个 Docker 主机组成的系统转换为单一的虚拟 Docker 主机，使得容器可以组成跨主机的子网网络。</p>\n</blockquote><a id=\"more\"></a>\n<h2 id=\"Swarm-认识\"><a href=\"#Swarm-认识\" class=\"headerlink\" title=\"Swarm 认识\"></a>Swarm 认识</h2><p>Swarm 是目前 Docker 官方唯一指定（绑定）的集群管理工具。Docker 1.12 内嵌了 swarm mode 集群管理模式。</p>\n<p>为了方便演示跨主机网络，我们需要用到一个工具——Docker Machine，这个工具与 Docker Compose、Docker Swarm 并称 Docker 三剑客，下面我们来看看如何安装 Docker Machine：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -L https://github.com/docker/machine/releases/download/v0.9.0-rc2/docker-machine-`uname -s`-`uname -m` &gt;/tmp/docker-machine &amp;&amp;</span><br><span class=\"line\">    chmod +x /tmp/docker-machine &amp;&amp;</span><br><span class=\"line\">    sudo cp /tmp/docker-machine /usr/<span class=\"built_in\">local</span>/bin/docker-machine</span><br></pre></td></tr></table></figure>\n\n<p>安装过程和 Docker Compose 非常类似。现在 Docker 三剑客已经全部到齐了。<br>在开始之前，我们需要了解一些基本概念，有关集群的 Docker 命令如下：</p>\n<ul>\n<li>docker swarm：集群管理，子命令有 init, join,join-token, leave, update</li>\n<li>docker node：节点管理，子命令有 demote, inspect,ls, promote, rm, ps, update</li>\n<li>docker service：服务管理，子命令有 create, inspect, ps, ls ,rm , scale, update</li>\n<li>docker stack/deploy：试验特性，用于多应用部署，等正式版加进来再说。</li>\n</ul>\n<h2 id=\"创建集群\"><a href=\"#创建集群\" class=\"headerlink\" title=\"创建集群\"></a>创建集群</h2><p>首先使用 Docker Machine 创建一个虚拟机作为 manger 节点。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine create --driver virtualbox manager1                                    </span><br><span class=\"line\">Running pre-create checks...</span><br><span class=\"line\">(manager1) Unable to get the latest Boot2Docker ISO release version:  Get https://api.github.com/repos/boot2docker/boot2docker/releases/latest: dial tcp: lookup api.github.com on [::1]:53: server misbehaving</span><br><span class=\"line\">Creating machine...</span><br><span class=\"line\">(manager1) Unable to get the latest Boot2Docker ISO release version:  Get https://api.github.com/repos/boot2docker/boot2docker/releases/latest: dial tcp: lookup api.github.com on [::1]:53: server misbehaving</span><br><span class=\"line\">(manager1) Copying /home/zuolan/.docker/machine/cache/boot2docker.iso to /home/zuolan/.docker/machine/machines/manager1/boot2docker.iso...</span><br><span class=\"line\">(manager1) Creating VirtualBox VM...</span><br><span class=\"line\">(manager1) Creating SSH key...</span><br><span class=\"line\">(manager1) Starting the VM...</span><br><span class=\"line\">(manager1) Check network to re-create <span class=\"keyword\">if</span> needed...</span><br><span class=\"line\">(manager1) Found a new host-only adapter: <span class=\"string\">\"vboxnet0\"</span></span><br><span class=\"line\">(manager1) Waiting <span class=\"keyword\">for</span> an IP...</span><br><span class=\"line\">Waiting <span class=\"keyword\">for</span> machine to be running, this may take a few minutes...</span><br><span class=\"line\">Detecting operating system of created instance...</span><br><span class=\"line\">Waiting <span class=\"keyword\">for</span> SSH to be available...</span><br><span class=\"line\">Detecting the provisioner...</span><br><span class=\"line\">Provisioning with boot2docker...</span><br><span class=\"line\">Copying certs to the <span class=\"built_in\">local</span> machine directory...</span><br><span class=\"line\">Copying certs to the remote machine...</span><br><span class=\"line\">Setting Docker configuration on the remote daemon...</span><br><span class=\"line\">Checking connection to Docker...</span><br><span class=\"line\">Docker is up and running!</span><br><span class=\"line\">To see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: docker-machine env manager1</span><br></pre></td></tr></table></figure>\n\n<p>查看虚拟机的环境变量等信息，包括虚拟机的 IP 地址：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  docker-machine env manager1</span><br><span class=\"line\"><span class=\"built_in\">export</span> DOCKER_TLS_VERIFY=<span class=\"string\">\"1\"</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> DOCKER_HOST=<span class=\"string\">\"tcp://192.168.99.100:2376\"</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> DOCKER_CERT_PATH=<span class=\"string\">\"/home/zuolan/.docker/machine/machines/manager1\"</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> DOCKER_MACHINE_NAME=<span class=\"string\">\"manager1\"</span></span><br><span class=\"line\"><span class=\"comment\"># Run this command to configure your shell: </span></span><br><span class=\"line\"><span class=\"comment\"># eval $(docker-machine env manager1)</span></span><br></pre></td></tr></table></figure>\n\n<p>然后再创建一个节点作为 work 节点。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine create --driver virtualbox worker1</span><br></pre></td></tr></table></figure>\n\n<p>现在我们有了两个虚拟主机，使用 Machine 的命令可以查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ls                             </span><br><span class=\"line\">NAME     ACTIVE   DRIVER       STATE    URL                        SWARM  DOCKER   ERRORS</span><br><span class=\"line\">manager1   -      virtualbox   Running  tcp://192.168.99.100:2376         v1.12.3   </span><br><span class=\"line\">worker1    -      virtualbox   Running  tcp://192.168.99.101:2376         v1.12.3</span><br></pre></td></tr></table></figure>\n\n<p>但是目前这两台虚拟主机并没有什么联系，为了把它们联系起来，我们需要 Swarm 登场了。<br>因为我们使用的是 Docker Machine 创建的虚拟机，因此可以使用 docker-machine ssh 命令来操作虚拟机，在实际生产环境中，并不需要像下面那样操作，只需要执行 docker swarm 即可。</p>\n<p>把 manager1 加入集群：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ssh manager1 docker swarm init --listen-addr 192.168.99.100:2377 --advertise-addr 192.168.99.100</span><br><span class=\"line\">Swarm initialized: current node (23lkbq7uovqsg550qfzup59t6) is now a manager.</span><br><span class=\"line\"></span><br><span class=\"line\">To add a worker to this swarm, run the following <span class=\"built_in\">command</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    docker swarm join \\</span><br><span class=\"line\">    --token SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-c036gwrakjejql06klrfc585r \\</span><br><span class=\"line\">    192.168.99.100:2377</span><br><span class=\"line\"></span><br><span class=\"line\">To add a manager to this swarm, run <span class=\"string\">'docker swarm join-token manager'</span> and follow the instructions.</span><br></pre></td></tr></table></figure>\n\n<p>用 –listen-addr 指定监听的 ip 与端口，实际的 Swarm 命令格式如下，本例使用 Docker Machine 来连接虚拟机而已：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker swarm init --listen-addr &lt;MANAGER-IP&gt;:&lt;PORT&gt;</span><br></pre></td></tr></table></figure>\n\n<p>接下来，再把 work1 加入集群中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ssh worker1 docker swarm join --token \\</span><br><span class=\"line\">    SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-c036gwrakjejql06klrfc585r \\</span><br><span class=\"line\">    192.168.99.100:2377</span><br><span class=\"line\">This node joined a swarm as a worker.</span><br></pre></td></tr></table></figure>\n\n<p>上面 join 命令中可以添加 –listen-addr $WORKER1_IP:2377 作为监听准备，因为有时候可能会遇到把一个 work 节点提升为 manger 节点的可能，当然本例子没有这个打算就不添加这个参数了。</p>\n<blockquote>\n<p>注意：如果你在新建集群时遇到双网卡情况，可以指定使用哪个 IP，例如上面的例子会有可能遇到下面的错误。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ssh manager1 docker swarm init --listen-addr <span class=\"variable\">$MANAGER1_IP</span>:2377</span><br><span class=\"line\">Error response from daemon: could not choose an IP address to advertise since this system has multiple addresses on different interfaces (10.0.2.15 on eth0 and 192.168.99.100 on eth1) - specify one with --advertise-addr</span><br><span class=\"line\"><span class=\"built_in\">exit</span> status 1</span><br></pre></td></tr></table></figure>\n\n<p>发生错误的原因是因为有两个 IP 地址，而 Swarm 不知道用户想使用哪个，因此要指定 IP。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ssh manager1 docker swarm init --advertise-addr 192.168.99.100 --listen-addr 192.168.99.100:2377 </span><br><span class=\"line\">Swarm initialized: current node (ahvwxicunjd0z8g0eeosjztjx) is now a manager.</span><br><span class=\"line\"></span><br><span class=\"line\">To add a worker to this swarm, run the following <span class=\"built_in\">command</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    docker swarm join \\</span><br><span class=\"line\">    --token SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-c036gwrakjejql06klrfc585r \\</span><br><span class=\"line\">    192.168.99.100:2377</span><br><span class=\"line\"></span><br><span class=\"line\">To add a manager to this swarm, run <span class=\"string\">'docker swarm join-token manager'</span> and follow the instructions.</span><br></pre></td></tr></table></figure>\n\n<p>集群初始化成功。</p>\n<p>现在我们新建了一个有两个节点的“集群”，现在进入其中一个管理节点使用 docker node 命令来查看节点信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ssh manager1 docker node ls</span><br><span class=\"line\">ID                       HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS</span><br><span class=\"line\">23lkbq7uovqsg550qfzup59t6 *  manager1    Ready      Active         Leader</span><br><span class=\"line\">dqb3fim8zvcob8sycri3hy98a    worker1     Ready      Active</span><br></pre></td></tr></table></figure>\n\n<p>现在每个节点都归属于 Swarm，并都处在了待机状态。Manager1 是领导者，work1 是工人。</p>\n<p>现在，我们继续新建虚拟机 manger2、worker2、worker3，现在已经有五个虚拟机了，使用 docker-machine ls 来查看虚拟机：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NAME     ACTIVE    DRIVER       STATE     URL                         SWARM   DOCKER    ERRORS</span><br><span class=\"line\">manager1   -       virtualbox   Running   tcp://192.168.99.100:2376           v1.12.3   </span><br><span class=\"line\">manager2   -       virtualbox   Running   tcp://192.168.99.105:2376           v1.12.3   </span><br><span class=\"line\">worker1    -       virtualbox   Running   tcp://192.168.99.102:2376           v1.12.3   </span><br><span class=\"line\">worker2    -       virtualbox   Running   tcp://192.168.99.103:2376           v1.12.3   </span><br><span class=\"line\">worker3    -       virtualbox   Running   tcp://192.168.99.104:2376           v1.12.3</span><br></pre></td></tr></table></figure>\n\n<p>然后我们把剩余的虚拟机也加到集群中。</p>\n<p>添加 worker2 到集群中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ssh worker2 docker swarm join \\</span><br><span class=\"line\">  --token SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-c036gwrakjejql06klrfc585r \\</span><br><span class=\"line\">  192.168.99.100:2377</span><br><span class=\"line\">This node joined a swarm as a worker.</span><br></pre></td></tr></table></figure>\n\n<p>添加 worker3 到集群中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ssh worker3 docker swarm join \\</span><br><span class=\"line\">  --token SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-c036gwrakjejql06klrfc585r \\</span><br><span class=\"line\">  192.168.99.100:2377</span><br><span class=\"line\">This node joined a swarm as a worker.</span><br></pre></td></tr></table></figure>\n\n<p>添加 manager2 到集群中：<br>先从 manager1 中获取 manager 的 token：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ssh manager1 docker swarm join-token manager</span><br><span class=\"line\">To add a manager to this swarm, run the following <span class=\"built_in\">command</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">  docker swarm join \\</span><br><span class=\"line\">  --token SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-8tn855hkjdb6usrblo9iu700o \\</span><br><span class=\"line\">192.168.99.100:2377</span><br></pre></td></tr></table></figure>\n\n<p>然后添加 manager2 到集群中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ssh manager2 docker swarm join \\</span><br><span class=\"line\">  --token SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-8tn855hkjdb6usrblo9iu700o \\</span><br><span class=\"line\">  192.168.99.100:2377</span><br><span class=\"line\">This node joined a swarm as a manager.</span><br></pre></td></tr></table></figure>\n\n<p>现在再来查看集群信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ssh manager2 docker node ls</span><br><span class=\"line\">ID                            HOSTNAME   STATUS   AVAILABILITY   MANAGER STATUS</span><br><span class=\"line\">16w80jnqy2k30yez4wbbaz1l8     worker1     Ready     Active        </span><br><span class=\"line\">2gkwhzakejj72n5xoxruet71z     worker2     Ready     Active        </span><br><span class=\"line\">35kutfyn1ratch55fn7j3fs4x     worker3     Ready     Active        </span><br><span class=\"line\">a9r21g5iq1u6h31myprfwl8ln *   manager2    Ready     Active        Reachable</span><br><span class=\"line\">dpo7snxbz2a0dxvx6mf19p35z     manager1    Ready     Active        Leader</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"建立跨主机网络\"><a href=\"#建立跨主机网络\" class=\"headerlink\" title=\"建立跨主机网络\"></a>建立跨主机网络</h2><p>为了演示更清晰，下面我们把宿主机也加入到集群之中，这样我们使用 Docker 命令操作会清晰很多。<br>直接在本地执行加入集群命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker swarm join \\           </span><br><span class=\"line\">    --token SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-8tn855hkjdb6usrblo9iu700o \\</span><br><span class=\"line\">    192.168.99.100:2377</span><br><span class=\"line\">This node joined a swarm as a manager.</span><br></pre></td></tr></table></figure>\n\n<p>现在我们有三台 manager，三台 worker。其中一台是宿主机，五台虚拟机。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker node ls</span><br><span class=\"line\">ID                          HOSTNAME    STATUS    AVAILABILITY  MANAGER STATUS</span><br><span class=\"line\">6z2rpk1t4xucffzlr2rpqb8u3    worker3     Ready     Active        </span><br><span class=\"line\">7qbr0xd747qena4awx8bx101s *  user-pc     Ready     Active         Reachable</span><br><span class=\"line\">9v93sav79jqrg0c7051rcxxev    manager2    Ready     Active         Reachable</span><br><span class=\"line\">a1ner3zxj3ubsiw4l3p28wrkj    worker1     Ready     Active        </span><br><span class=\"line\">a5w7h8j83i11qqi4vlu948mad    worker2     Ready     Active        </span><br><span class=\"line\">d4h7vuekklpd6189fcudpfy18    manager1    Ready     Active          Leader</span><br></pre></td></tr></table></figure>\n\n<p>查看网络状态：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker network ls</span><br><span class=\"line\">NETWORK ID         NAME            DRIVER          SCOPE</span><br><span class=\"line\">764ff31881e5        bridge          bridge          <span class=\"built_in\">local</span>                  </span><br><span class=\"line\">fbd9a977aa03        host            host            <span class=\"built_in\">local</span>               </span><br><span class=\"line\">6p6xlousvsy2        ingress         overlay         swarm            </span><br><span class=\"line\">e81af24d643d        none            null            <span class=\"built_in\">local</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到在 swarm 上默认已有一个名为 ingress 的 overlay 网络, 默认在 swarm 里使用，本例子中会创建一个新的 overlay 网络。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker network create --driver overlay swarm_test</span><br><span class=\"line\">4dm8cy9y5delvs5vd0ghdd89s</span><br><span class=\"line\">$ docker network ls</span><br><span class=\"line\">NETWORK ID         NAME                DRIVER              SCOPE</span><br><span class=\"line\">764ff31881e5        bridge              bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">fbd9a977aa03        host                host                <span class=\"built_in\">local</span></span><br><span class=\"line\">6p6xlousvsy2        ingress             overlay             swarm</span><br><span class=\"line\">e81af24d643d        none                null                <span class=\"built_in\">local</span></span><br><span class=\"line\">4dm8cy9y5del        swarm_test          overlay             swarm</span><br></pre></td></tr></table></figure>\n\n<p>这样一个跨主机网络就搭建好了，但是现在这个网络只是处于待机状态，下一小节我们会在这个网络上部署应用。</p>\n<h2 id=\"在跨主机网络上部署应用\"><a href=\"#在跨主机网络上部署应用\" class=\"headerlink\" title=\"在跨主机网络上部署应用\"></a>在跨主机网络上部署应用</h2><p>首先我们上面创建的节点都是没有镜像的，因此我们要逐一 pull 镜像到节点中，这里我们使用前面搭建的私有仓库。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ssh manager1 docker pull reg.example.com/library/nginx:alpine     </span><br><span class=\"line\">alpine: Pulling from library/nginx</span><br><span class=\"line\">e110a4a17941: Pulling fs layer</span><br><span class=\"line\">... ...</span><br><span class=\"line\">7648f5d87006: Pull complete</span><br><span class=\"line\">Digest: sha256:65063cb82bf508fd5a731318e795b2abbfb0c22222f02ff5c6b30df7f23292fe</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> reg.example.com/library/nginx:alpine</span><br><span class=\"line\">$ docker-machine ssh manager2 docker pull reg.example.com/library/nginx:alpine</span><br><span class=\"line\">alpine: Pulling from library/nginx</span><br><span class=\"line\">e110a4a17941: Pulling fs layer</span><br><span class=\"line\">... ...</span><br><span class=\"line\">7648f5d87006: Pull complete</span><br><span class=\"line\">Digest: sha256:65063cb82bf508fd5a731318e795b2abbfb0c22222f02ff5c6b30df7f23292fe</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> reg.example.com/library/nginx:alpine</span><br><span class=\"line\">$ docker-machine ssh worker1 docker pull reg.example.com/library/nginx:alpine </span><br><span class=\"line\">alpine: Pulling from library/nginx</span><br><span class=\"line\">e110a4a17941: Pulling fs layer</span><br><span class=\"line\">... ...</span><br><span class=\"line\">7648f5d87006: Pull complete</span><br><span class=\"line\">Digest: sha256:65063cb82bf508fd5a731318e795b2abbfb0c22222f02ff5c6b30df7f23292fe</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> reg.example.com/library/nginx:alpine</span><br><span class=\"line\">$ docker-machine ssh worker2 docker pull reg.example.com/library/nginx:alpine</span><br><span class=\"line\">alpine: Pulling from library/nginx</span><br><span class=\"line\">e110a4a17941: Pulling fs layer</span><br><span class=\"line\">... ...</span><br><span class=\"line\">7648f5d87006: Pull complete</span><br><span class=\"line\">Digest: sha256:65063cb82bf508fd5a731318e795b2abbfb0c22222f02ff5c6b30df7f23292fe</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> reg.example.com/library/nginx:alpine</span><br><span class=\"line\">$ docker-machine ssh worker3 docker pull reg.example.com/library/nginx:alpine</span><br><span class=\"line\">alpine: Pulling from library/nginx</span><br><span class=\"line\">e110a4a17941: Pulling fs layer</span><br><span class=\"line\">... ...</span><br><span class=\"line\">7648f5d87006: Pull complete</span><br><span class=\"line\">Digest: sha256:65063cb82bf508fd5a731318e795b2abbfb0c22222f02ff5c6b30df7f23292fe</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> reg.example.com/library/nginx:alpine</span><br></pre></td></tr></table></figure>\n\n<p>上面使用 docker pull 分别在五个虚拟机节点拉取 nginx:alpine 镜像。接下来我们要在五个节点部署一组 Nginx 服务。</p>\n<p>部署的服务使用 swarm_test 跨主机网络。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service create --replicas 2 --name helloworld --network=swarm_test nginx:alpine</span><br><span class=\"line\">5gz0h2s5agh2d2libvzq6bhgs</span><br></pre></td></tr></table></figure>\n\n<p>查看服务状态：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service ls</span><br><span class=\"line\">ID            NAME        REPLICAS  IMAGE         COMMAND</span><br><span class=\"line\">5gz0h2s5agh2  helloworld  0/2       nginx:alpine</span><br></pre></td></tr></table></figure>\n\n<p>查看 helloworld 服务详情（为了方便阅读，已调整输出内容）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service ps helloworld</span><br><span class=\"line\">ID          NAME          IMAGE         NODE      DESIRED STATE   CURRENT STATE              ERROR</span><br><span class=\"line\">ay081uome3   helloworld.1  nginx:alpine  manager1  Running         Preparing 2 seconds ago  </span><br><span class=\"line\">16cvore0c96  helloworld.2  nginx:alpine  worker2   Running         Preparing 2 seconds ago</span><br></pre></td></tr></table></figure>\n\n<p>可以看到两个实例分别运行在两个节点上。</p>\n<p>进入两个节点，查看服务状态（为了方便阅读，已调整输出内容）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ssh manager1 docker ps -a</span><br><span class=\"line\">CONTAINER ID   IMAGE         COMMAND         CREATED        STATUS         PORTS            NAMES</span><br><span class=\"line\">119f787622c2   nginx:alpine  <span class=\"string\">\"nginx -g ...\"</span>   4 minutes ago  Up 4 minutes   80/tcp, 443/tcp  hello ...</span><br><span class=\"line\">$ docker-machine ssh worker2 docker ps -a</span><br><span class=\"line\">CONTAINER ID   IMAGE         COMMAND         CREATED         STATUS        PORTS             NAMES</span><br><span class=\"line\">5db707401a06   nginx:alpine  <span class=\"string\">\"nginx -g ...\"</span>   4 minutes ago   Up 4 minutes  80/tcp, 443/tcp   hello ...</span><br></pre></td></tr></table></figure>\n<p>上面输出做了调整，实际的 NAMES 值为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helloworld.1.ay081uome3eejeg4mspa8pdlx</span><br><span class=\"line\">helloworld.2.16cvore0c96rby1vp0sny3mvt</span><br></pre></td></tr></table></figure>\n\n<p>记住上面这两个实例的名称。现在我们来看这两个跨主机的容器是否能互通：<br>首先使用 Machine 进入 manager1 节点，然后使用 docker exec -i 命令进入 helloworld.1 容器中 ping 运行在 worker2 节点的 helloworld.2 容器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ssh manager1 docker <span class=\"built_in\">exec</span> -i helloworld.1.ay081uome3eejeg4mspa8pdlx \\</span><br><span class=\"line\">    ping helloworld.2.16cvore0c96rby1vp0sny3mvt</span><br><span class=\"line\">PING helloworld.2.16cvore0c96rby1vp0sny3mvt (10.0.0.4): 56 data bytes</span><br><span class=\"line\">64 bytes from 10.0.0.4: seq=0 ttl=64 time=0.591 ms</span><br><span class=\"line\">64 bytes from 10.0.0.4: seq=1 ttl=64 time=0.594 ms</span><br><span class=\"line\">64 bytes from 10.0.0.4: seq=2 ttl=64 time=0.624 ms</span><br><span class=\"line\">64 bytes from 10.0.0.4: seq=3 ttl=64 time=0.612 ms</span><br><span class=\"line\">^C</span><br></pre></td></tr></table></figure>\n<p>然后使用 Machine 进入 worker2 节点，然后使用 docker exec -i 命令进入 helloworld.2 容器中 ping 运行在 manager1 节点的 helloworld.1 容器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ssh worker2 docker <span class=\"built_in\">exec</span> -i helloworld.2.16cvore0c96rby1vp0sny3mvt \\</span><br><span class=\"line\">    ping helloworld.1.ay081uome3eejeg4mspa8pdlx </span><br><span class=\"line\">PING helloworld.1.ay081uome3eejeg4mspa8pdlx (10.0.0.3): 56 data bytes</span><br><span class=\"line\">64 bytes from 10.0.0.3: seq=0 ttl=64 time=0.466 ms</span><br><span class=\"line\">64 bytes from 10.0.0.3: seq=1 ttl=64 time=0.465 ms</span><br><span class=\"line\">64 bytes from 10.0.0.3: seq=2 ttl=64 time=0.548 ms</span><br><span class=\"line\">64 bytes from 10.0.0.3: seq=3 ttl=64 time=0.689 ms</span><br><span class=\"line\">^C</span><br></pre></td></tr></table></figure>\n\n<p>可以看到这两个跨主机的服务集群里面各个容器是可以互相连接的。</p>\n<p>为了体现 Swarm 集群的优势，我们可以使用虚拟机的 ping 命令来测试对方虚拟机内的容器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ssh worker2 ping helloworld.1.ay081uome3eejeg4mspa8pdlx</span><br><span class=\"line\">PING helloworld.1.ay081uome3eejeg4mspa8pdlx (221.179.46.190): 56 data bytes</span><br><span class=\"line\">64 bytes from 221.179.46.190: seq=0 ttl=63 time=48.651 ms</span><br><span class=\"line\">64 bytes from 221.179.46.190: seq=1 ttl=63 time=63.239 ms</span><br><span class=\"line\">64 bytes from 221.179.46.190: seq=2 ttl=63 time=47.686 ms</span><br><span class=\"line\">64 bytes from 221.179.46.190: seq=3 ttl=63 time=61.232 ms</span><br><span class=\"line\">^C</span><br><span class=\"line\">$ docker-machine ssh manager1 ping helloworld.2.16cvore0c96rby1vp0sny3mvt</span><br><span class=\"line\">PING helloworld.2.16cvore0c96rby1vp0sny3mvt (221.179.46.194): 56 data bytes</span><br><span class=\"line\">64 bytes from 221.179.46.194: seq=0 ttl=63 time=30.150 ms</span><br><span class=\"line\">64 bytes from 221.179.46.194: seq=1 ttl=63 time=54.455 ms</span><br><span class=\"line\">64 bytes from 221.179.46.194: seq=2 ttl=63 time=73.862 ms</span><br><span class=\"line\">64 bytes from 221.179.46.194: seq=3 ttl=63 time=53.171 ms</span><br><span class=\"line\">^C</span><br></pre></td></tr></table></figure>\n\n<p>上面我们使用了虚拟机内部的 ping 去测试容器的延迟，可以看到延迟明显比集群内部的 ping 值要高。</p>\n<h2 id=\"Swarm-集群负载\"><a href=\"#Swarm-集群负载\" class=\"headerlink\" title=\"Swarm 集群负载\"></a>Swarm 集群负载</h2><p>现在我们已经学会了 Swarm 集群的部署方法，现在来搭建一个可访问的 Nginx 集群吧。体验最新版的 Swarm 所提供的自动服务发现与集群负载功能。<br>首先删掉上一节我们启动的 helloworld 服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service rm helloworld                                 </span><br><span class=\"line\">helloworld</span><br></pre></td></tr></table></figure>\n\n<p>然后在新建一个服务，提供端口映射参数，使得外界可以访问这些 Nginx 服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service create --replicas 2 --name helloworld -p 7080:80 --network=swarm_test nginx:alpine</span><br><span class=\"line\">9gfziifbii7a6zdqt56kocyun</span><br></pre></td></tr></table></figure>\n\n<p>查看服务运行状态：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service ls                                                                                </span><br><span class=\"line\">ID           NAME         REPLICAS     IMAGE           COMMAND</span><br><span class=\"line\">9gfziifbii7a  helloworld     2/2        nginx:alpine</span><br></pre></td></tr></table></figure>\n\n<p>不知你有没有发现，虽然我们使用 –replicas 参数的值都是一样的，但是上一节中获取服务状态时，REPLICAS 返回的是 0/2，现在的 REPLICAS 返回的是 2/2。<br>同样使用 docker service ps 查看服务详细状态时（下面输出已经手动调整为更易读的格式），可以看到实例的 CURRENT STATE 中是 Running 状态的，而上一节中的 CURRENT STATE 中全部是处于 Preparing 状态。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service ps helloworld</span><br><span class=\"line\">ID          NAME      IMAGE     NODE    DESIRED STATE   CURRENT STATE    ERROR</span><br><span class=\"line\">9ikr3agyi...   helloworld.1  nginx:alpine  user-pc    Running         Running 13 seconds ago  </span><br><span class=\"line\">7acmhj0u...   helloworld.2  nginx:alpine  worker2    Running         Running 6 seconds ago</span><br></pre></td></tr></table></figure>\n\n<p>这就涉及到 Swarm 内置的发现机制了，目前 Docker 1.12 中 Swarm 已经内置了服务发现工具，我们不再需要像以前使用 Etcd 或者 Consul 这些工具来配置服务发现。对于一个容器来说如果没有外部通信但又是运行中的状态会被服务发现工具认为是 Preparing 状态，本小节例子中因为映射了端口，因此有了 Running 状态。<br>现在我们来看 Swarm 另一个有趣的功能，当我们杀死其中一个节点时，会发生什么。<br>首先 kill 掉 worker2 的实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ssh worker2 docker <span class=\"built_in\">kill</span> helloworld.2.7acmhj0udzusv1d7lu2tbuhu4</span><br><span class=\"line\">helloworld.2.7acmhj0udzusv1d7lu2tbuhu4</span><br></pre></td></tr></table></figure>\n\n<p>稍等几秒，再来看服务状态：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service ps helloworld</span><br><span class=\"line\">ID         NAME          IMAGE     NODE   DESIRED STATE  CURRENT STATE   ERROR</span><br><span class=\"line\">9ikr3agyi...  helloworld.1     nginx:alpine  zuolan-pc  Running       Running 19 minutes ago  </span><br><span class=\"line\">8f866igpl...  helloworld.2     nginx:alpine  manager1  Running       Running 4 seconds ago   </span><br><span class=\"line\">7acmhj0u...   \\_ helloworld.2  nginx:alpine  worker2   Shutdown       Failed 11 seconds ago  ...<span class=\"built_in\">exit</span>...</span><br><span class=\"line\">$ docker service ls           </span><br><span class=\"line\">ID            NAME        REPLICAS  IMAGE         COMMAND</span><br><span class=\"line\">9gfziifbii7a  helloworld  2/2       nginx:alpine</span><br></pre></td></tr></table></figure>\n\n<p>可以看到即使我们 kill 掉其中一个实例，Swarm 也会迅速把停止的容器撤下来，同时在节点中启动一个新的实例顶上来。这样服务依旧还是两个实例在运行。<br>此时如果你想添加更多实例可以使用 scale 命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service scale helloworld=3</span><br><span class=\"line\">helloworld scaled to 3</span><br></pre></td></tr></table></figure>\n\n<p>查看服务详情，可以看到有三个实例启动了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service ps helloworld</span><br><span class=\"line\">ID         NAME        IMAGE      NODE   DESIRED STATE  CURRENT STATE    ERROR</span><br><span class=\"line\">9ikr3agyi...  helloworld.1    nginx:alpine  user-pc   Running        Running 30 minutes ago  8f866igpl...  helloworld.2    nginx:alpine  manager1  Running        Running 11 minutes ago  7acmhj0u...  \\_ helloworld.2  nginx:alpine  worker2   Shutdown       Failed 11 minutes ago   exit137</span><br><span class=\"line\">1vexr1jm...  helloworld.3    nginx:alpine   worker2   Running       Running 4 seconds ago</span><br></pre></td></tr></table></figure>\n\n<p>现在如果想减少实例数量，一样可以使用 scale 命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service scale helloworld=2</span><br><span class=\"line\">helloworld scaled to 2</span><br></pre></td></tr></table></figure>\n\n<p>至此，Swarm的主要用法都已经介绍完了，主要讲述了 Swarm 集群网络的创建与部署。介绍了 Swarm 的常规应用，包括 Swarm 的服务发现、负载均衡等，然后使用 Swarm 来配置跨主机容器网络，并在上面部署应用。</p>\n<blockquote>\n<p>转自： <a href=\"http://www.jianshu.com/p/9eb9995884a5\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/9eb9995884a5</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Swarm 在 Docker 1.12 版本之前属于一个独立的项目，在 Docker 1.12 版本发布之后，该项目合并到了 Docker 中，成为 Docker 的一个子命令。目前，Swarm 是 Docker 社区提供的唯一一个原生支持 Docker 集群管理的工具。它可以把多个 Docker 主机组成的系统转换为单一的虚拟 Docker 主机，使得容器可以组成跨主机的子网网络。</p>\n</blockquote>","more":"\n<h2 id=\"Swarm-认识\"><a href=\"#Swarm-认识\" class=\"headerlink\" title=\"Swarm 认识\"></a>Swarm 认识</h2><p>Swarm 是目前 Docker 官方唯一指定（绑定）的集群管理工具。Docker 1.12 内嵌了 swarm mode 集群管理模式。</p>\n<p>为了方便演示跨主机网络，我们需要用到一个工具——Docker Machine，这个工具与 Docker Compose、Docker Swarm 并称 Docker 三剑客，下面我们来看看如何安装 Docker Machine：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -L https://github.com/docker/machine/releases/download/v0.9.0-rc2/docker-machine-`uname -s`-`uname -m` &gt;/tmp/docker-machine &amp;&amp;</span><br><span class=\"line\">    chmod +x /tmp/docker-machine &amp;&amp;</span><br><span class=\"line\">    sudo cp /tmp/docker-machine /usr/<span class=\"built_in\">local</span>/bin/docker-machine</span><br></pre></td></tr></table></figure>\n\n<p>安装过程和 Docker Compose 非常类似。现在 Docker 三剑客已经全部到齐了。<br>在开始之前，我们需要了解一些基本概念，有关集群的 Docker 命令如下：</p>\n<ul>\n<li>docker swarm：集群管理，子命令有 init, join,join-token, leave, update</li>\n<li>docker node：节点管理，子命令有 demote, inspect,ls, promote, rm, ps, update</li>\n<li>docker service：服务管理，子命令有 create, inspect, ps, ls ,rm , scale, update</li>\n<li>docker stack/deploy：试验特性，用于多应用部署，等正式版加进来再说。</li>\n</ul>\n<h2 id=\"创建集群\"><a href=\"#创建集群\" class=\"headerlink\" title=\"创建集群\"></a>创建集群</h2><p>首先使用 Docker Machine 创建一个虚拟机作为 manger 节点。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine create --driver virtualbox manager1                                    </span><br><span class=\"line\">Running pre-create checks...</span><br><span class=\"line\">(manager1) Unable to get the latest Boot2Docker ISO release version:  Get https://api.github.com/repos/boot2docker/boot2docker/releases/latest: dial tcp: lookup api.github.com on [::1]:53: server misbehaving</span><br><span class=\"line\">Creating machine...</span><br><span class=\"line\">(manager1) Unable to get the latest Boot2Docker ISO release version:  Get https://api.github.com/repos/boot2docker/boot2docker/releases/latest: dial tcp: lookup api.github.com on [::1]:53: server misbehaving</span><br><span class=\"line\">(manager1) Copying /home/zuolan/.docker/machine/cache/boot2docker.iso to /home/zuolan/.docker/machine/machines/manager1/boot2docker.iso...</span><br><span class=\"line\">(manager1) Creating VirtualBox VM...</span><br><span class=\"line\">(manager1) Creating SSH key...</span><br><span class=\"line\">(manager1) Starting the VM...</span><br><span class=\"line\">(manager1) Check network to re-create <span class=\"keyword\">if</span> needed...</span><br><span class=\"line\">(manager1) Found a new host-only adapter: <span class=\"string\">\"vboxnet0\"</span></span><br><span class=\"line\">(manager1) Waiting <span class=\"keyword\">for</span> an IP...</span><br><span class=\"line\">Waiting <span class=\"keyword\">for</span> machine to be running, this may take a few minutes...</span><br><span class=\"line\">Detecting operating system of created instance...</span><br><span class=\"line\">Waiting <span class=\"keyword\">for</span> SSH to be available...</span><br><span class=\"line\">Detecting the provisioner...</span><br><span class=\"line\">Provisioning with boot2docker...</span><br><span class=\"line\">Copying certs to the <span class=\"built_in\">local</span> machine directory...</span><br><span class=\"line\">Copying certs to the remote machine...</span><br><span class=\"line\">Setting Docker configuration on the remote daemon...</span><br><span class=\"line\">Checking connection to Docker...</span><br><span class=\"line\">Docker is up and running!</span><br><span class=\"line\">To see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: docker-machine env manager1</span><br></pre></td></tr></table></figure>\n\n<p>查看虚拟机的环境变量等信息，包括虚拟机的 IP 地址：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  docker-machine env manager1</span><br><span class=\"line\"><span class=\"built_in\">export</span> DOCKER_TLS_VERIFY=<span class=\"string\">\"1\"</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> DOCKER_HOST=<span class=\"string\">\"tcp://192.168.99.100:2376\"</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> DOCKER_CERT_PATH=<span class=\"string\">\"/home/zuolan/.docker/machine/machines/manager1\"</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> DOCKER_MACHINE_NAME=<span class=\"string\">\"manager1\"</span></span><br><span class=\"line\"><span class=\"comment\"># Run this command to configure your shell: </span></span><br><span class=\"line\"><span class=\"comment\"># eval $(docker-machine env manager1)</span></span><br></pre></td></tr></table></figure>\n\n<p>然后再创建一个节点作为 work 节点。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine create --driver virtualbox worker1</span><br></pre></td></tr></table></figure>\n\n<p>现在我们有了两个虚拟主机，使用 Machine 的命令可以查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ls                             </span><br><span class=\"line\">NAME     ACTIVE   DRIVER       STATE    URL                        SWARM  DOCKER   ERRORS</span><br><span class=\"line\">manager1   -      virtualbox   Running  tcp://192.168.99.100:2376         v1.12.3   </span><br><span class=\"line\">worker1    -      virtualbox   Running  tcp://192.168.99.101:2376         v1.12.3</span><br></pre></td></tr></table></figure>\n\n<p>但是目前这两台虚拟主机并没有什么联系，为了把它们联系起来，我们需要 Swarm 登场了。<br>因为我们使用的是 Docker Machine 创建的虚拟机，因此可以使用 docker-machine ssh 命令来操作虚拟机，在实际生产环境中，并不需要像下面那样操作，只需要执行 docker swarm 即可。</p>\n<p>把 manager1 加入集群：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ssh manager1 docker swarm init --listen-addr 192.168.99.100:2377 --advertise-addr 192.168.99.100</span><br><span class=\"line\">Swarm initialized: current node (23lkbq7uovqsg550qfzup59t6) is now a manager.</span><br><span class=\"line\"></span><br><span class=\"line\">To add a worker to this swarm, run the following <span class=\"built_in\">command</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    docker swarm join \\</span><br><span class=\"line\">    --token SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-c036gwrakjejql06klrfc585r \\</span><br><span class=\"line\">    192.168.99.100:2377</span><br><span class=\"line\"></span><br><span class=\"line\">To add a manager to this swarm, run <span class=\"string\">'docker swarm join-token manager'</span> and follow the instructions.</span><br></pre></td></tr></table></figure>\n\n<p>用 –listen-addr 指定监听的 ip 与端口，实际的 Swarm 命令格式如下，本例使用 Docker Machine 来连接虚拟机而已：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker swarm init --listen-addr &lt;MANAGER-IP&gt;:&lt;PORT&gt;</span><br></pre></td></tr></table></figure>\n\n<p>接下来，再把 work1 加入集群中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ssh worker1 docker swarm join --token \\</span><br><span class=\"line\">    SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-c036gwrakjejql06klrfc585r \\</span><br><span class=\"line\">    192.168.99.100:2377</span><br><span class=\"line\">This node joined a swarm as a worker.</span><br></pre></td></tr></table></figure>\n\n<p>上面 join 命令中可以添加 –listen-addr $WORKER1_IP:2377 作为监听准备，因为有时候可能会遇到把一个 work 节点提升为 manger 节点的可能，当然本例子没有这个打算就不添加这个参数了。</p>\n<blockquote>\n<p>注意：如果你在新建集群时遇到双网卡情况，可以指定使用哪个 IP，例如上面的例子会有可能遇到下面的错误。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ssh manager1 docker swarm init --listen-addr <span class=\"variable\">$MANAGER1_IP</span>:2377</span><br><span class=\"line\">Error response from daemon: could not choose an IP address to advertise since this system has multiple addresses on different interfaces (10.0.2.15 on eth0 and 192.168.99.100 on eth1) - specify one with --advertise-addr</span><br><span class=\"line\"><span class=\"built_in\">exit</span> status 1</span><br></pre></td></tr></table></figure>\n\n<p>发生错误的原因是因为有两个 IP 地址，而 Swarm 不知道用户想使用哪个，因此要指定 IP。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ssh manager1 docker swarm init --advertise-addr 192.168.99.100 --listen-addr 192.168.99.100:2377 </span><br><span class=\"line\">Swarm initialized: current node (ahvwxicunjd0z8g0eeosjztjx) is now a manager.</span><br><span class=\"line\"></span><br><span class=\"line\">To add a worker to this swarm, run the following <span class=\"built_in\">command</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    docker swarm join \\</span><br><span class=\"line\">    --token SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-c036gwrakjejql06klrfc585r \\</span><br><span class=\"line\">    192.168.99.100:2377</span><br><span class=\"line\"></span><br><span class=\"line\">To add a manager to this swarm, run <span class=\"string\">'docker swarm join-token manager'</span> and follow the instructions.</span><br></pre></td></tr></table></figure>\n\n<p>集群初始化成功。</p>\n<p>现在我们新建了一个有两个节点的“集群”，现在进入其中一个管理节点使用 docker node 命令来查看节点信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ssh manager1 docker node ls</span><br><span class=\"line\">ID                       HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS</span><br><span class=\"line\">23lkbq7uovqsg550qfzup59t6 *  manager1    Ready      Active         Leader</span><br><span class=\"line\">dqb3fim8zvcob8sycri3hy98a    worker1     Ready      Active</span><br></pre></td></tr></table></figure>\n\n<p>现在每个节点都归属于 Swarm，并都处在了待机状态。Manager1 是领导者，work1 是工人。</p>\n<p>现在，我们继续新建虚拟机 manger2、worker2、worker3，现在已经有五个虚拟机了，使用 docker-machine ls 来查看虚拟机：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NAME     ACTIVE    DRIVER       STATE     URL                         SWARM   DOCKER    ERRORS</span><br><span class=\"line\">manager1   -       virtualbox   Running   tcp://192.168.99.100:2376           v1.12.3   </span><br><span class=\"line\">manager2   -       virtualbox   Running   tcp://192.168.99.105:2376           v1.12.3   </span><br><span class=\"line\">worker1    -       virtualbox   Running   tcp://192.168.99.102:2376           v1.12.3   </span><br><span class=\"line\">worker2    -       virtualbox   Running   tcp://192.168.99.103:2376           v1.12.3   </span><br><span class=\"line\">worker3    -       virtualbox   Running   tcp://192.168.99.104:2376           v1.12.3</span><br></pre></td></tr></table></figure>\n\n<p>然后我们把剩余的虚拟机也加到集群中。</p>\n<p>添加 worker2 到集群中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ssh worker2 docker swarm join \\</span><br><span class=\"line\">  --token SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-c036gwrakjejql06klrfc585r \\</span><br><span class=\"line\">  192.168.99.100:2377</span><br><span class=\"line\">This node joined a swarm as a worker.</span><br></pre></td></tr></table></figure>\n\n<p>添加 worker3 到集群中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ssh worker3 docker swarm join \\</span><br><span class=\"line\">  --token SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-c036gwrakjejql06klrfc585r \\</span><br><span class=\"line\">  192.168.99.100:2377</span><br><span class=\"line\">This node joined a swarm as a worker.</span><br></pre></td></tr></table></figure>\n\n<p>添加 manager2 到集群中：<br>先从 manager1 中获取 manager 的 token：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ssh manager1 docker swarm join-token manager</span><br><span class=\"line\">To add a manager to this swarm, run the following <span class=\"built_in\">command</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">  docker swarm join \\</span><br><span class=\"line\">  --token SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-8tn855hkjdb6usrblo9iu700o \\</span><br><span class=\"line\">192.168.99.100:2377</span><br></pre></td></tr></table></figure>\n\n<p>然后添加 manager2 到集群中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ssh manager2 docker swarm join \\</span><br><span class=\"line\">  --token SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-8tn855hkjdb6usrblo9iu700o \\</span><br><span class=\"line\">  192.168.99.100:2377</span><br><span class=\"line\">This node joined a swarm as a manager.</span><br></pre></td></tr></table></figure>\n\n<p>现在再来查看集群信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ssh manager2 docker node ls</span><br><span class=\"line\">ID                            HOSTNAME   STATUS   AVAILABILITY   MANAGER STATUS</span><br><span class=\"line\">16w80jnqy2k30yez4wbbaz1l8     worker1     Ready     Active        </span><br><span class=\"line\">2gkwhzakejj72n5xoxruet71z     worker2     Ready     Active        </span><br><span class=\"line\">35kutfyn1ratch55fn7j3fs4x     worker3     Ready     Active        </span><br><span class=\"line\">a9r21g5iq1u6h31myprfwl8ln *   manager2    Ready     Active        Reachable</span><br><span class=\"line\">dpo7snxbz2a0dxvx6mf19p35z     manager1    Ready     Active        Leader</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"建立跨主机网络\"><a href=\"#建立跨主机网络\" class=\"headerlink\" title=\"建立跨主机网络\"></a>建立跨主机网络</h2><p>为了演示更清晰，下面我们把宿主机也加入到集群之中，这样我们使用 Docker 命令操作会清晰很多。<br>直接在本地执行加入集群命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker swarm join \\           </span><br><span class=\"line\">    --token SWMTKN-1-3z5rzoey0u6onkvvm58f7vgkser5d7z8sfshlu7s4oz2gztlvj-8tn855hkjdb6usrblo9iu700o \\</span><br><span class=\"line\">    192.168.99.100:2377</span><br><span class=\"line\">This node joined a swarm as a manager.</span><br></pre></td></tr></table></figure>\n\n<p>现在我们有三台 manager，三台 worker。其中一台是宿主机，五台虚拟机。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker node ls</span><br><span class=\"line\">ID                          HOSTNAME    STATUS    AVAILABILITY  MANAGER STATUS</span><br><span class=\"line\">6z2rpk1t4xucffzlr2rpqb8u3    worker3     Ready     Active        </span><br><span class=\"line\">7qbr0xd747qena4awx8bx101s *  user-pc     Ready     Active         Reachable</span><br><span class=\"line\">9v93sav79jqrg0c7051rcxxev    manager2    Ready     Active         Reachable</span><br><span class=\"line\">a1ner3zxj3ubsiw4l3p28wrkj    worker1     Ready     Active        </span><br><span class=\"line\">a5w7h8j83i11qqi4vlu948mad    worker2     Ready     Active        </span><br><span class=\"line\">d4h7vuekklpd6189fcudpfy18    manager1    Ready     Active          Leader</span><br></pre></td></tr></table></figure>\n\n<p>查看网络状态：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker network ls</span><br><span class=\"line\">NETWORK ID         NAME            DRIVER          SCOPE</span><br><span class=\"line\">764ff31881e5        bridge          bridge          <span class=\"built_in\">local</span>                  </span><br><span class=\"line\">fbd9a977aa03        host            host            <span class=\"built_in\">local</span>               </span><br><span class=\"line\">6p6xlousvsy2        ingress         overlay         swarm            </span><br><span class=\"line\">e81af24d643d        none            null            <span class=\"built_in\">local</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到在 swarm 上默认已有一个名为 ingress 的 overlay 网络, 默认在 swarm 里使用，本例子中会创建一个新的 overlay 网络。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker network create --driver overlay swarm_test</span><br><span class=\"line\">4dm8cy9y5delvs5vd0ghdd89s</span><br><span class=\"line\">$ docker network ls</span><br><span class=\"line\">NETWORK ID         NAME                DRIVER              SCOPE</span><br><span class=\"line\">764ff31881e5        bridge              bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">fbd9a977aa03        host                host                <span class=\"built_in\">local</span></span><br><span class=\"line\">6p6xlousvsy2        ingress             overlay             swarm</span><br><span class=\"line\">e81af24d643d        none                null                <span class=\"built_in\">local</span></span><br><span class=\"line\">4dm8cy9y5del        swarm_test          overlay             swarm</span><br></pre></td></tr></table></figure>\n\n<p>这样一个跨主机网络就搭建好了，但是现在这个网络只是处于待机状态，下一小节我们会在这个网络上部署应用。</p>\n<h2 id=\"在跨主机网络上部署应用\"><a href=\"#在跨主机网络上部署应用\" class=\"headerlink\" title=\"在跨主机网络上部署应用\"></a>在跨主机网络上部署应用</h2><p>首先我们上面创建的节点都是没有镜像的，因此我们要逐一 pull 镜像到节点中，这里我们使用前面搭建的私有仓库。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ssh manager1 docker pull reg.example.com/library/nginx:alpine     </span><br><span class=\"line\">alpine: Pulling from library/nginx</span><br><span class=\"line\">e110a4a17941: Pulling fs layer</span><br><span class=\"line\">... ...</span><br><span class=\"line\">7648f5d87006: Pull complete</span><br><span class=\"line\">Digest: sha256:65063cb82bf508fd5a731318e795b2abbfb0c22222f02ff5c6b30df7f23292fe</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> reg.example.com/library/nginx:alpine</span><br><span class=\"line\">$ docker-machine ssh manager2 docker pull reg.example.com/library/nginx:alpine</span><br><span class=\"line\">alpine: Pulling from library/nginx</span><br><span class=\"line\">e110a4a17941: Pulling fs layer</span><br><span class=\"line\">... ...</span><br><span class=\"line\">7648f5d87006: Pull complete</span><br><span class=\"line\">Digest: sha256:65063cb82bf508fd5a731318e795b2abbfb0c22222f02ff5c6b30df7f23292fe</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> reg.example.com/library/nginx:alpine</span><br><span class=\"line\">$ docker-machine ssh worker1 docker pull reg.example.com/library/nginx:alpine </span><br><span class=\"line\">alpine: Pulling from library/nginx</span><br><span class=\"line\">e110a4a17941: Pulling fs layer</span><br><span class=\"line\">... ...</span><br><span class=\"line\">7648f5d87006: Pull complete</span><br><span class=\"line\">Digest: sha256:65063cb82bf508fd5a731318e795b2abbfb0c22222f02ff5c6b30df7f23292fe</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> reg.example.com/library/nginx:alpine</span><br><span class=\"line\">$ docker-machine ssh worker2 docker pull reg.example.com/library/nginx:alpine</span><br><span class=\"line\">alpine: Pulling from library/nginx</span><br><span class=\"line\">e110a4a17941: Pulling fs layer</span><br><span class=\"line\">... ...</span><br><span class=\"line\">7648f5d87006: Pull complete</span><br><span class=\"line\">Digest: sha256:65063cb82bf508fd5a731318e795b2abbfb0c22222f02ff5c6b30df7f23292fe</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> reg.example.com/library/nginx:alpine</span><br><span class=\"line\">$ docker-machine ssh worker3 docker pull reg.example.com/library/nginx:alpine</span><br><span class=\"line\">alpine: Pulling from library/nginx</span><br><span class=\"line\">e110a4a17941: Pulling fs layer</span><br><span class=\"line\">... ...</span><br><span class=\"line\">7648f5d87006: Pull complete</span><br><span class=\"line\">Digest: sha256:65063cb82bf508fd5a731318e795b2abbfb0c22222f02ff5c6b30df7f23292fe</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> reg.example.com/library/nginx:alpine</span><br></pre></td></tr></table></figure>\n\n<p>上面使用 docker pull 分别在五个虚拟机节点拉取 nginx:alpine 镜像。接下来我们要在五个节点部署一组 Nginx 服务。</p>\n<p>部署的服务使用 swarm_test 跨主机网络。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service create --replicas 2 --name helloworld --network=swarm_test nginx:alpine</span><br><span class=\"line\">5gz0h2s5agh2d2libvzq6bhgs</span><br></pre></td></tr></table></figure>\n\n<p>查看服务状态：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service ls</span><br><span class=\"line\">ID            NAME        REPLICAS  IMAGE         COMMAND</span><br><span class=\"line\">5gz0h2s5agh2  helloworld  0/2       nginx:alpine</span><br></pre></td></tr></table></figure>\n\n<p>查看 helloworld 服务详情（为了方便阅读，已调整输出内容）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service ps helloworld</span><br><span class=\"line\">ID          NAME          IMAGE         NODE      DESIRED STATE   CURRENT STATE              ERROR</span><br><span class=\"line\">ay081uome3   helloworld.1  nginx:alpine  manager1  Running         Preparing 2 seconds ago  </span><br><span class=\"line\">16cvore0c96  helloworld.2  nginx:alpine  worker2   Running         Preparing 2 seconds ago</span><br></pre></td></tr></table></figure>\n\n<p>可以看到两个实例分别运行在两个节点上。</p>\n<p>进入两个节点，查看服务状态（为了方便阅读，已调整输出内容）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ssh manager1 docker ps -a</span><br><span class=\"line\">CONTAINER ID   IMAGE         COMMAND         CREATED        STATUS         PORTS            NAMES</span><br><span class=\"line\">119f787622c2   nginx:alpine  <span class=\"string\">\"nginx -g ...\"</span>   4 minutes ago  Up 4 minutes   80/tcp, 443/tcp  hello ...</span><br><span class=\"line\">$ docker-machine ssh worker2 docker ps -a</span><br><span class=\"line\">CONTAINER ID   IMAGE         COMMAND         CREATED         STATUS        PORTS             NAMES</span><br><span class=\"line\">5db707401a06   nginx:alpine  <span class=\"string\">\"nginx -g ...\"</span>   4 minutes ago   Up 4 minutes  80/tcp, 443/tcp   hello ...</span><br></pre></td></tr></table></figure>\n<p>上面输出做了调整，实际的 NAMES 值为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helloworld.1.ay081uome3eejeg4mspa8pdlx</span><br><span class=\"line\">helloworld.2.16cvore0c96rby1vp0sny3mvt</span><br></pre></td></tr></table></figure>\n\n<p>记住上面这两个实例的名称。现在我们来看这两个跨主机的容器是否能互通：<br>首先使用 Machine 进入 manager1 节点，然后使用 docker exec -i 命令进入 helloworld.1 容器中 ping 运行在 worker2 节点的 helloworld.2 容器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ssh manager1 docker <span class=\"built_in\">exec</span> -i helloworld.1.ay081uome3eejeg4mspa8pdlx \\</span><br><span class=\"line\">    ping helloworld.2.16cvore0c96rby1vp0sny3mvt</span><br><span class=\"line\">PING helloworld.2.16cvore0c96rby1vp0sny3mvt (10.0.0.4): 56 data bytes</span><br><span class=\"line\">64 bytes from 10.0.0.4: seq=0 ttl=64 time=0.591 ms</span><br><span class=\"line\">64 bytes from 10.0.0.4: seq=1 ttl=64 time=0.594 ms</span><br><span class=\"line\">64 bytes from 10.0.0.4: seq=2 ttl=64 time=0.624 ms</span><br><span class=\"line\">64 bytes from 10.0.0.4: seq=3 ttl=64 time=0.612 ms</span><br><span class=\"line\">^C</span><br></pre></td></tr></table></figure>\n<p>然后使用 Machine 进入 worker2 节点，然后使用 docker exec -i 命令进入 helloworld.2 容器中 ping 运行在 manager1 节点的 helloworld.1 容器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ssh worker2 docker <span class=\"built_in\">exec</span> -i helloworld.2.16cvore0c96rby1vp0sny3mvt \\</span><br><span class=\"line\">    ping helloworld.1.ay081uome3eejeg4mspa8pdlx </span><br><span class=\"line\">PING helloworld.1.ay081uome3eejeg4mspa8pdlx (10.0.0.3): 56 data bytes</span><br><span class=\"line\">64 bytes from 10.0.0.3: seq=0 ttl=64 time=0.466 ms</span><br><span class=\"line\">64 bytes from 10.0.0.3: seq=1 ttl=64 time=0.465 ms</span><br><span class=\"line\">64 bytes from 10.0.0.3: seq=2 ttl=64 time=0.548 ms</span><br><span class=\"line\">64 bytes from 10.0.0.3: seq=3 ttl=64 time=0.689 ms</span><br><span class=\"line\">^C</span><br></pre></td></tr></table></figure>\n\n<p>可以看到这两个跨主机的服务集群里面各个容器是可以互相连接的。</p>\n<p>为了体现 Swarm 集群的优势，我们可以使用虚拟机的 ping 命令来测试对方虚拟机内的容器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ssh worker2 ping helloworld.1.ay081uome3eejeg4mspa8pdlx</span><br><span class=\"line\">PING helloworld.1.ay081uome3eejeg4mspa8pdlx (221.179.46.190): 56 data bytes</span><br><span class=\"line\">64 bytes from 221.179.46.190: seq=0 ttl=63 time=48.651 ms</span><br><span class=\"line\">64 bytes from 221.179.46.190: seq=1 ttl=63 time=63.239 ms</span><br><span class=\"line\">64 bytes from 221.179.46.190: seq=2 ttl=63 time=47.686 ms</span><br><span class=\"line\">64 bytes from 221.179.46.190: seq=3 ttl=63 time=61.232 ms</span><br><span class=\"line\">^C</span><br><span class=\"line\">$ docker-machine ssh manager1 ping helloworld.2.16cvore0c96rby1vp0sny3mvt</span><br><span class=\"line\">PING helloworld.2.16cvore0c96rby1vp0sny3mvt (221.179.46.194): 56 data bytes</span><br><span class=\"line\">64 bytes from 221.179.46.194: seq=0 ttl=63 time=30.150 ms</span><br><span class=\"line\">64 bytes from 221.179.46.194: seq=1 ttl=63 time=54.455 ms</span><br><span class=\"line\">64 bytes from 221.179.46.194: seq=2 ttl=63 time=73.862 ms</span><br><span class=\"line\">64 bytes from 221.179.46.194: seq=3 ttl=63 time=53.171 ms</span><br><span class=\"line\">^C</span><br></pre></td></tr></table></figure>\n\n<p>上面我们使用了虚拟机内部的 ping 去测试容器的延迟，可以看到延迟明显比集群内部的 ping 值要高。</p>\n<h2 id=\"Swarm-集群负载\"><a href=\"#Swarm-集群负载\" class=\"headerlink\" title=\"Swarm 集群负载\"></a>Swarm 集群负载</h2><p>现在我们已经学会了 Swarm 集群的部署方法，现在来搭建一个可访问的 Nginx 集群吧。体验最新版的 Swarm 所提供的自动服务发现与集群负载功能。<br>首先删掉上一节我们启动的 helloworld 服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service rm helloworld                                 </span><br><span class=\"line\">helloworld</span><br></pre></td></tr></table></figure>\n\n<p>然后在新建一个服务，提供端口映射参数，使得外界可以访问这些 Nginx 服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service create --replicas 2 --name helloworld -p 7080:80 --network=swarm_test nginx:alpine</span><br><span class=\"line\">9gfziifbii7a6zdqt56kocyun</span><br></pre></td></tr></table></figure>\n\n<p>查看服务运行状态：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service ls                                                                                </span><br><span class=\"line\">ID           NAME         REPLICAS     IMAGE           COMMAND</span><br><span class=\"line\">9gfziifbii7a  helloworld     2/2        nginx:alpine</span><br></pre></td></tr></table></figure>\n\n<p>不知你有没有发现，虽然我们使用 –replicas 参数的值都是一样的，但是上一节中获取服务状态时，REPLICAS 返回的是 0/2，现在的 REPLICAS 返回的是 2/2。<br>同样使用 docker service ps 查看服务详细状态时（下面输出已经手动调整为更易读的格式），可以看到实例的 CURRENT STATE 中是 Running 状态的，而上一节中的 CURRENT STATE 中全部是处于 Preparing 状态。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service ps helloworld</span><br><span class=\"line\">ID          NAME      IMAGE     NODE    DESIRED STATE   CURRENT STATE    ERROR</span><br><span class=\"line\">9ikr3agyi...   helloworld.1  nginx:alpine  user-pc    Running         Running 13 seconds ago  </span><br><span class=\"line\">7acmhj0u...   helloworld.2  nginx:alpine  worker2    Running         Running 6 seconds ago</span><br></pre></td></tr></table></figure>\n\n<p>这就涉及到 Swarm 内置的发现机制了，目前 Docker 1.12 中 Swarm 已经内置了服务发现工具，我们不再需要像以前使用 Etcd 或者 Consul 这些工具来配置服务发现。对于一个容器来说如果没有外部通信但又是运行中的状态会被服务发现工具认为是 Preparing 状态，本小节例子中因为映射了端口，因此有了 Running 状态。<br>现在我们来看 Swarm 另一个有趣的功能，当我们杀死其中一个节点时，会发生什么。<br>首先 kill 掉 worker2 的实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-machine ssh worker2 docker <span class=\"built_in\">kill</span> helloworld.2.7acmhj0udzusv1d7lu2tbuhu4</span><br><span class=\"line\">helloworld.2.7acmhj0udzusv1d7lu2tbuhu4</span><br></pre></td></tr></table></figure>\n\n<p>稍等几秒，再来看服务状态：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service ps helloworld</span><br><span class=\"line\">ID         NAME          IMAGE     NODE   DESIRED STATE  CURRENT STATE   ERROR</span><br><span class=\"line\">9ikr3agyi...  helloworld.1     nginx:alpine  zuolan-pc  Running       Running 19 minutes ago  </span><br><span class=\"line\">8f866igpl...  helloworld.2     nginx:alpine  manager1  Running       Running 4 seconds ago   </span><br><span class=\"line\">7acmhj0u...   \\_ helloworld.2  nginx:alpine  worker2   Shutdown       Failed 11 seconds ago  ...<span class=\"built_in\">exit</span>...</span><br><span class=\"line\">$ docker service ls           </span><br><span class=\"line\">ID            NAME        REPLICAS  IMAGE         COMMAND</span><br><span class=\"line\">9gfziifbii7a  helloworld  2/2       nginx:alpine</span><br></pre></td></tr></table></figure>\n\n<p>可以看到即使我们 kill 掉其中一个实例，Swarm 也会迅速把停止的容器撤下来，同时在节点中启动一个新的实例顶上来。这样服务依旧还是两个实例在运行。<br>此时如果你想添加更多实例可以使用 scale 命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service scale helloworld=3</span><br><span class=\"line\">helloworld scaled to 3</span><br></pre></td></tr></table></figure>\n\n<p>查看服务详情，可以看到有三个实例启动了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service ps helloworld</span><br><span class=\"line\">ID         NAME        IMAGE      NODE   DESIRED STATE  CURRENT STATE    ERROR</span><br><span class=\"line\">9ikr3agyi...  helloworld.1    nginx:alpine  user-pc   Running        Running 30 minutes ago  8f866igpl...  helloworld.2    nginx:alpine  manager1  Running        Running 11 minutes ago  7acmhj0u...  \\_ helloworld.2  nginx:alpine  worker2   Shutdown       Failed 11 minutes ago   exit137</span><br><span class=\"line\">1vexr1jm...  helloworld.3    nginx:alpine   worker2   Running       Running 4 seconds ago</span><br></pre></td></tr></table></figure>\n\n<p>现在如果想减少实例数量，一样可以使用 scale 命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service scale helloworld=2</span><br><span class=\"line\">helloworld scaled to 2</span><br></pre></td></tr></table></figure>\n\n<p>至此，Swarm的主要用法都已经介绍完了，主要讲述了 Swarm 集群网络的创建与部署。介绍了 Swarm 的常规应用，包括 Swarm 的服务发现、负载均衡等，然后使用 Swarm 来配置跨主机容器网络，并在上面部署应用。</p>\n<blockquote>\n<p>转自： <a href=\"http://www.jianshu.com/p/9eb9995884a5\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/9eb9995884a5</a></p>\n</blockquote>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Apr 25 2018 20:46:59 GMT+0800 (GMT+08:00)","title":"Docker Swarm 入门","path":"2017/07/06/Docker-Swarm-入门/","eyeCatchImage":null,"excerpt":null,"date":"2017-07-06T15:23:31.000Z","pv":0,"totalPV":0,"categories":"Collection","tags":["Docker","Docker Swarm"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":14386},{"title":"Docker可视化管理工具Shipyard安装与配置","date":"2017-04-11T11:10:20.000Z","_content":"> **文章来源： [Shipyard Automated Deployment](https://shipyard-project.com/docs/deploy/automated/)**\n\n---\n\n# Shipyard简介\n\nShipyard是一个集成管理docker容器、镜像、Registries的系统，它具有以下特点：\n\n* 支持多节点的集成管理\n* 可动态加载节点\n* 可托管node下的容器\n\n# 环境准备\n\n## 下载镜像\n\n```\n$ docker pull rethinkdb\n$ docker pull microbox/etcd\n$ docker pull shipyard/docker-proxy\n$ docker pull swarm \n$ docker pull shipyard/shipyard\n```\n\n## 自动安装\n\n注意：这将会暴露Docker Engine的管理端口2375。如果此节点在安全网络外部可以访问，建议使用TLS。\n\n### 下载自动部署Shell脚本\n\n```\n$ curl -sSL https://shipyard-project.com/deploy | bash -s\n```\n\n自动部署脚本中， 包括以下参数：\n* ACTION： 表示可以使用的指令，它包括以下选项。\n* deploy， 默认值， 表示自动安装部署Shipyard管理工具及相关应用\n* upgrade，更新已存在的实例（注意：你要保持相同的系统环境、变量来部署同样的配置）\n* node， 部署Swarm的一个新节点\n* remove， 已存在的shipyard实例\n* DISCOVERY: 集群系统采用Swarm进行采集和管理(在节点管理中可以使用‘node’)\n* IMAGE: 镜像，默认使用shipyard的镜像\n* PREFIX: 容器名字的前缀\n* SHIPYARD_ARGS: 容器的常用参数\n* TLS_CERT_PATH: TLS证书路径\n* PORT: 主程序监听端口 (默认端口: 8080)\n* PROXY_PORT: 代理端口 (默认: 2375)\n\n### 使用镜像\n\nShipyard允许您采取指定的镜像来部署实例，比如以下的测试版本，你也已这样做：\n\n```\n$ curl -sSL https://shipyard-project.com/deploy | IMAGE=shipyard/shipyard:test bash -s\n```\n\n### 使用前缀\n\n你可以在部署Shipyard管理工具时，自定义你想要的前缀，比如\n\n```\n$ curl -sSL https://shipyard-project.com/deploy | PREFIX=shipyard-test bash -s\n```\n\n### 使用运行参数\n\n这里增加一些shipyard运行参数，你可以像这样进行调整：\n\n```\n$ curl -sSL https://shipyard-project.com/deploy | SHIPYARD_ARGS=\"--ldap-server=ldap.example.com --ldap-autocreate-users\" bash -s\n```\n\n### 使用安全认证(TLS证书)\n\n启用安全加密通讯协议（TLS）对Shipyard进行部署，包括代理（docker-proxy）、swarm集群、shipyard管理平台的配置，这是一个配置规范。证书必须采用以下命名规范：\n\n* ca.pem: 安全认证证书\n* server.pem: 服务器证书\n* server-key.pem: 服务器私有证书\n* cert.pem: 客户端证书\n* key.pem: 客户端证书的key\n\n注意：证书将被放置在一个单独的安全认证docker容器中，并在各个组成部分之间共享。如果需要调试，可以将此容器连接到调试容器。数据容器名称为$PREFIX-certs。\n\n```\n$ docker run --rm \\ \n   -v $(pwd)/certs:/certs \\ \n   ehazlett/certm \\ -d /certs \\ \n   bundle \\ \n   generate \\\n   -o shipyard \\ \n   --host proxy \\ \n   --host 127.0.0.1\n```\n\n你也可以在部署时，指定TLS_CERT_PATH参数：\n\n```\n$ curl -sSL https://shipyard-project.com/deploy | TLS_CERT_PATH=$(pwd)/certs bash -s\n```\n\n### 增加Swarm节点\n\nShipyard管理的Swarm节点部署脚本将自动的安装key/value存储系统（etcd系统），用于进行服务发现， 相关的工具还有Consul、Zookeeper。增加一个节点到swarm集群，你可以通过以下的节点部署脚本：\n\n```\n$ curl -sSL https://shipyard-project.com/deploy | ACTION=node DISCOVERY=etcd://10.0.1.10:4001 bash -s\n```\n\n注意：10.0.1.10该ip地址为部署Ectd系统所在主机的IP地址，你需要根据你的部署位置进行修改。\n\n### 删除Shipyard管理工具\n\n如果你要删除Shipyard部署的容器，你可以使用以下脚本进行删除。\n\n```\n$ curl -sSL https://shipyard-project.com/deploy | ACTION=remove bash -s\n```\n\n## 手动安装\n\n### 数据存储\n\nShipyard使用RethinkDB做为数据存储工具， 我们需要先运行RethinkDB容器。\n\n```\n$ docker run \\ \n    -ti \\ \n    -d \\ \n    --restart=always \\ \n    --name shipyard-rethinkdb \\ \n    rethinkdb\n```\n\n### 服务发现\n\n为了启用Swarm leader选择，我们必须使用来自Swarm容器的外部键值存储。此处，我们使用Etcd作为服务发现工具。可以选用的服务发现工具还有Consul、Zookeeper等。\n\n```\n$ docker run \\ \n     -ti \\ \n     -d \\ \n     -p 4001:4001 \\ \n     -p 7001:7001 \\ \n     --restart=always \\ \n     --name shipyard-discovery \\ \n     microbox/etcd:latest \\\n     -name discovery\n```\n\n### Docker代理服务\n\n默认情况下，Docker引擎只侦听套接字。 我们可以重新配置引擎以使用TLS，或者您可以使用代理容器。 这是一个非常轻量级的容器，它只是将请求从TCP转发到Docker监听的Unix套接字。\n\n```\n$ docker run \\ \n   -ti \\ \n   -d \\ \n   -p 2375:2375 \\ \n   --hostname=$HOSTNAME \\ \n   --restart=always \\ \n   --name shipyard-proxy \\ \n    -v /var/run/docker.sock:/var/run/docker.sock \\ \n    -e PORT=2375 \\ \n   shipyard/docker-proxy:latest\n```\n\n### Swarm管理节点\n\n```\n$ docker run \\ \n   -ti \\ \n   -d \\ \n   --restart=always \\ \n   --name shipyard-swarm-manager \\ \n   swarm:latest \\ \n   manage --host tcp://0.0.0.0:3375 etcd://<IP-OF-HOST>:4001\n```\n\n### Swarm Agent节点\n\n```\n$ docker run \\ \n   -ti \\ \n   -d \\ \n   --restart=always \\ \n   --name shipyard-swarm-agent \\ \n   swarm:latest \\ \n   join --addr <ip-of-host>:2375 etcd://<ip-of-host>:4001\n```\n\n### Shipyard管理工具\n\n```\n$ docker run \\ \n   -ti \\ \n   -d \\ \n   --restart=always \\ \n   --name shipyard-controller \\ \n   --link shipyard-rethinkdb:rethinkdb \\ \n   --link shipyard-swarm-manager:swarm \\ \n   -p 8080:8080 \\ \n   shipyard/shipyard:latest \\ \n   server \\ \n   -d tcp://swarm:3375\n```","source":"_posts/Docker可视化管理工具Shipyard安装与配置.md","raw":"---\ntitle: Docker可视化管理工具Shipyard安装与配置\ndate: 2017-04-11 19:10:20\ntags: Docker\ncategories: Collection\n---\n> **文章来源： [Shipyard Automated Deployment](https://shipyard-project.com/docs/deploy/automated/)**\n\n---\n\n# Shipyard简介\n\nShipyard是一个集成管理docker容器、镜像、Registries的系统，它具有以下特点：\n\n* 支持多节点的集成管理\n* 可动态加载节点\n* 可托管node下的容器\n\n# 环境准备\n\n## 下载镜像\n\n```\n$ docker pull rethinkdb\n$ docker pull microbox/etcd\n$ docker pull shipyard/docker-proxy\n$ docker pull swarm \n$ docker pull shipyard/shipyard\n```\n\n## 自动安装\n\n注意：这将会暴露Docker Engine的管理端口2375。如果此节点在安全网络外部可以访问，建议使用TLS。\n\n### 下载自动部署Shell脚本\n\n```\n$ curl -sSL https://shipyard-project.com/deploy | bash -s\n```\n\n自动部署脚本中， 包括以下参数：\n* ACTION： 表示可以使用的指令，它包括以下选项。\n* deploy， 默认值， 表示自动安装部署Shipyard管理工具及相关应用\n* upgrade，更新已存在的实例（注意：你要保持相同的系统环境、变量来部署同样的配置）\n* node， 部署Swarm的一个新节点\n* remove， 已存在的shipyard实例\n* DISCOVERY: 集群系统采用Swarm进行采集和管理(在节点管理中可以使用‘node’)\n* IMAGE: 镜像，默认使用shipyard的镜像\n* PREFIX: 容器名字的前缀\n* SHIPYARD_ARGS: 容器的常用参数\n* TLS_CERT_PATH: TLS证书路径\n* PORT: 主程序监听端口 (默认端口: 8080)\n* PROXY_PORT: 代理端口 (默认: 2375)\n\n### 使用镜像\n\nShipyard允许您采取指定的镜像来部署实例，比如以下的测试版本，你也已这样做：\n\n```\n$ curl -sSL https://shipyard-project.com/deploy | IMAGE=shipyard/shipyard:test bash -s\n```\n\n### 使用前缀\n\n你可以在部署Shipyard管理工具时，自定义你想要的前缀，比如\n\n```\n$ curl -sSL https://shipyard-project.com/deploy | PREFIX=shipyard-test bash -s\n```\n\n### 使用运行参数\n\n这里增加一些shipyard运行参数，你可以像这样进行调整：\n\n```\n$ curl -sSL https://shipyard-project.com/deploy | SHIPYARD_ARGS=\"--ldap-server=ldap.example.com --ldap-autocreate-users\" bash -s\n```\n\n### 使用安全认证(TLS证书)\n\n启用安全加密通讯协议（TLS）对Shipyard进行部署，包括代理（docker-proxy）、swarm集群、shipyard管理平台的配置，这是一个配置规范。证书必须采用以下命名规范：\n\n* ca.pem: 安全认证证书\n* server.pem: 服务器证书\n* server-key.pem: 服务器私有证书\n* cert.pem: 客户端证书\n* key.pem: 客户端证书的key\n\n注意：证书将被放置在一个单独的安全认证docker容器中，并在各个组成部分之间共享。如果需要调试，可以将此容器连接到调试容器。数据容器名称为$PREFIX-certs。\n\n```\n$ docker run --rm \\ \n   -v $(pwd)/certs:/certs \\ \n   ehazlett/certm \\ -d /certs \\ \n   bundle \\ \n   generate \\\n   -o shipyard \\ \n   --host proxy \\ \n   --host 127.0.0.1\n```\n\n你也可以在部署时，指定TLS_CERT_PATH参数：\n\n```\n$ curl -sSL https://shipyard-project.com/deploy | TLS_CERT_PATH=$(pwd)/certs bash -s\n```\n\n### 增加Swarm节点\n\nShipyard管理的Swarm节点部署脚本将自动的安装key/value存储系统（etcd系统），用于进行服务发现， 相关的工具还有Consul、Zookeeper。增加一个节点到swarm集群，你可以通过以下的节点部署脚本：\n\n```\n$ curl -sSL https://shipyard-project.com/deploy | ACTION=node DISCOVERY=etcd://10.0.1.10:4001 bash -s\n```\n\n注意：10.0.1.10该ip地址为部署Ectd系统所在主机的IP地址，你需要根据你的部署位置进行修改。\n\n### 删除Shipyard管理工具\n\n如果你要删除Shipyard部署的容器，你可以使用以下脚本进行删除。\n\n```\n$ curl -sSL https://shipyard-project.com/deploy | ACTION=remove bash -s\n```\n\n## 手动安装\n\n### 数据存储\n\nShipyard使用RethinkDB做为数据存储工具， 我们需要先运行RethinkDB容器。\n\n```\n$ docker run \\ \n    -ti \\ \n    -d \\ \n    --restart=always \\ \n    --name shipyard-rethinkdb \\ \n    rethinkdb\n```\n\n### 服务发现\n\n为了启用Swarm leader选择，我们必须使用来自Swarm容器的外部键值存储。此处，我们使用Etcd作为服务发现工具。可以选用的服务发现工具还有Consul、Zookeeper等。\n\n```\n$ docker run \\ \n     -ti \\ \n     -d \\ \n     -p 4001:4001 \\ \n     -p 7001:7001 \\ \n     --restart=always \\ \n     --name shipyard-discovery \\ \n     microbox/etcd:latest \\\n     -name discovery\n```\n\n### Docker代理服务\n\n默认情况下，Docker引擎只侦听套接字。 我们可以重新配置引擎以使用TLS，或者您可以使用代理容器。 这是一个非常轻量级的容器，它只是将请求从TCP转发到Docker监听的Unix套接字。\n\n```\n$ docker run \\ \n   -ti \\ \n   -d \\ \n   -p 2375:2375 \\ \n   --hostname=$HOSTNAME \\ \n   --restart=always \\ \n   --name shipyard-proxy \\ \n    -v /var/run/docker.sock:/var/run/docker.sock \\ \n    -e PORT=2375 \\ \n   shipyard/docker-proxy:latest\n```\n\n### Swarm管理节点\n\n```\n$ docker run \\ \n   -ti \\ \n   -d \\ \n   --restart=always \\ \n   --name shipyard-swarm-manager \\ \n   swarm:latest \\ \n   manage --host tcp://0.0.0.0:3375 etcd://<IP-OF-HOST>:4001\n```\n\n### Swarm Agent节点\n\n```\n$ docker run \\ \n   -ti \\ \n   -d \\ \n   --restart=always \\ \n   --name shipyard-swarm-agent \\ \n   swarm:latest \\ \n   join --addr <ip-of-host>:2375 etcd://<ip-of-host>:4001\n```\n\n### Shipyard管理工具\n\n```\n$ docker run \\ \n   -ti \\ \n   -d \\ \n   --restart=always \\ \n   --name shipyard-controller \\ \n   --link shipyard-rethinkdb:rethinkdb \\ \n   --link shipyard-swarm-manager:swarm \\ \n   -p 8080:8080 \\ \n   shipyard/shipyard:latest \\ \n   server \\ \n   -d tcp://swarm:3375\n```","slug":"Docker可视化管理工具Shipyard安装与配置","published":1,"updated":"2018-04-25T12:46:59.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2fj0no40004q4vgdr8ceks8","content":"<blockquote>\n<p><strong>文章来源： <a href=\"https://shipyard-project.com/docs/deploy/automated/\" target=\"_blank\" rel=\"noopener\">Shipyard Automated Deployment</a></strong></p>\n</blockquote><hr><h1 id=\"Shipyard简介\"><a href=\"#Shipyard简介\" class=\"headerlink\" title=\"Shipyard简介\"></a>Shipyard简介</h1><p>Shipyard是一个集成管理docker容器、镜像、Registries的系统，它具有以下特点：</p><ul>\n<li>支持多节点的集成管理</li>\n<li>可动态加载节点</li>\n<li>可托管node下的容器</li>\n</ul><h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><h2 id=\"下载镜像\"><a href=\"#下载镜像\" class=\"headerlink\" title=\"下载镜像\"></a>下载镜像</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull rethinkdb</span><br><span class=\"line\">$ docker pull microbox/etcd</span><br><span class=\"line\">$ docker pull shipyard/docker-proxy</span><br><span class=\"line\">$ docker pull swarm </span><br><span class=\"line\">$ docker pull shipyard/shipyard</span><br></pre></td></tr></table></figure><a id=\"more\"></a>\n\n\n\n\n\n<h2 id=\"自动安装\"><a href=\"#自动安装\" class=\"headerlink\" title=\"自动安装\"></a>自动安装</h2><p>注意：这将会暴露Docker Engine的管理端口2375。如果此节点在安全网络外部可以访问，建议使用TLS。</p>\n<h3 id=\"下载自动部署Shell脚本\"><a href=\"#下载自动部署Shell脚本\" class=\"headerlink\" title=\"下载自动部署Shell脚本\"></a>下载自动部署Shell脚本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -sSL https://shipyard-project.com/deploy | bash -s</span><br></pre></td></tr></table></figure>\n\n<p>自动部署脚本中， 包括以下参数：</p>\n<ul>\n<li>ACTION： 表示可以使用的指令，它包括以下选项。</li>\n<li>deploy， 默认值， 表示自动安装部署Shipyard管理工具及相关应用</li>\n<li>upgrade，更新已存在的实例（注意：你要保持相同的系统环境、变量来部署同样的配置）</li>\n<li>node， 部署Swarm的一个新节点</li>\n<li>remove， 已存在的shipyard实例</li>\n<li>DISCOVERY: 集群系统采用Swarm进行采集和管理(在节点管理中可以使用‘node’)</li>\n<li>IMAGE: 镜像，默认使用shipyard的镜像</li>\n<li>PREFIX: 容器名字的前缀</li>\n<li>SHIPYARD_ARGS: 容器的常用参数</li>\n<li>TLS_CERT_PATH: TLS证书路径</li>\n<li>PORT: 主程序监听端口 (默认端口: 8080)</li>\n<li>PROXY_PORT: 代理端口 (默认: 2375)</li>\n</ul>\n<h3 id=\"使用镜像\"><a href=\"#使用镜像\" class=\"headerlink\" title=\"使用镜像\"></a>使用镜像</h3><p>Shipyard允许您采取指定的镜像来部署实例，比如以下的测试版本，你也已这样做：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -sSL https://shipyard-project.com/deploy | IMAGE=shipyard/shipyard:test bash -s</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用前缀\"><a href=\"#使用前缀\" class=\"headerlink\" title=\"使用前缀\"></a>使用前缀</h3><p>你可以在部署Shipyard管理工具时，自定义你想要的前缀，比如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -sSL https://shipyard-project.com/deploy | PREFIX=shipyard-test bash -s</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用运行参数\"><a href=\"#使用运行参数\" class=\"headerlink\" title=\"使用运行参数\"></a>使用运行参数</h3><p>这里增加一些shipyard运行参数，你可以像这样进行调整：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -sSL https://shipyard-project.com/deploy | SHIPYARD_ARGS=&quot;--ldap-server=ldap.example.com --ldap-autocreate-users&quot; bash -s</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用安全认证-TLS证书\"><a href=\"#使用安全认证-TLS证书\" class=\"headerlink\" title=\"使用安全认证(TLS证书)\"></a>使用安全认证(TLS证书)</h3><p>启用安全加密通讯协议（TLS）对Shipyard进行部署，包括代理（docker-proxy）、swarm集群、shipyard管理平台的配置，这是一个配置规范。证书必须采用以下命名规范：</p>\n<ul>\n<li>ca.pem: 安全认证证书</li>\n<li>server.pem: 服务器证书</li>\n<li>server-key.pem: 服务器私有证书</li>\n<li>cert.pem: 客户端证书</li>\n<li>key.pem: 客户端证书的key</li>\n</ul>\n<p>注意：证书将被放置在一个单独的安全认证docker容器中，并在各个组成部分之间共享。如果需要调试，可以将此容器连接到调试容器。数据容器名称为$PREFIX-certs。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run --rm \\ </span><br><span class=\"line\">   -v $(pwd)/certs:/certs \\ </span><br><span class=\"line\">   ehazlett/certm \\ -d /certs \\ </span><br><span class=\"line\">   bundle \\ </span><br><span class=\"line\">   generate \\</span><br><span class=\"line\">   -o shipyard \\ </span><br><span class=\"line\">   --host proxy \\ </span><br><span class=\"line\">   --host 127.0.0.1</span><br></pre></td></tr></table></figure>\n\n<p>你也可以在部署时，指定TLS_CERT_PATH参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -sSL https://shipyard-project.com/deploy | TLS_CERT_PATH=$(pwd)/certs bash -s</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"增加Swarm节点\"><a href=\"#增加Swarm节点\" class=\"headerlink\" title=\"增加Swarm节点\"></a>增加Swarm节点</h3><p>Shipyard管理的Swarm节点部署脚本将自动的安装key/value存储系统（etcd系统），用于进行服务发现， 相关的工具还有Consul、Zookeeper。增加一个节点到swarm集群，你可以通过以下的节点部署脚本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -sSL https://shipyard-project.com/deploy | ACTION=node DISCOVERY=etcd://10.0.1.10:4001 bash -s</span><br></pre></td></tr></table></figure>\n\n<p>注意：10.0.1.10该ip地址为部署Ectd系统所在主机的IP地址，你需要根据你的部署位置进行修改。</p>\n<h3 id=\"删除Shipyard管理工具\"><a href=\"#删除Shipyard管理工具\" class=\"headerlink\" title=\"删除Shipyard管理工具\"></a>删除Shipyard管理工具</h3><p>如果你要删除Shipyard部署的容器，你可以使用以下脚本进行删除。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -sSL https://shipyard-project.com/deploy | ACTION=remove bash -s</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"手动安装\"><a href=\"#手动安装\" class=\"headerlink\" title=\"手动安装\"></a>手动安装</h2><h3 id=\"数据存储\"><a href=\"#数据存储\" class=\"headerlink\" title=\"数据存储\"></a>数据存储</h3><p>Shipyard使用RethinkDB做为数据存储工具， 我们需要先运行RethinkDB容器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run \\ </span><br><span class=\"line\">    -ti \\ </span><br><span class=\"line\">    -d \\ </span><br><span class=\"line\">    --restart=always \\ </span><br><span class=\"line\">    --name shipyard-rethinkdb \\ </span><br><span class=\"line\">    rethinkdb</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"服务发现\"><a href=\"#服务发现\" class=\"headerlink\" title=\"服务发现\"></a>服务发现</h3><p>为了启用Swarm leader选择，我们必须使用来自Swarm容器的外部键值存储。此处，我们使用Etcd作为服务发现工具。可以选用的服务发现工具还有Consul、Zookeeper等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run \\ </span><br><span class=\"line\">     -ti \\ </span><br><span class=\"line\">     -d \\ </span><br><span class=\"line\">     -p 4001:4001 \\ </span><br><span class=\"line\">     -p 7001:7001 \\ </span><br><span class=\"line\">     --restart=always \\ </span><br><span class=\"line\">     --name shipyard-discovery \\ </span><br><span class=\"line\">     microbox/etcd:latest \\</span><br><span class=\"line\">     -name discovery</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Docker代理服务\"><a href=\"#Docker代理服务\" class=\"headerlink\" title=\"Docker代理服务\"></a>Docker代理服务</h3><p>默认情况下，Docker引擎只侦听套接字。 我们可以重新配置引擎以使用TLS，或者您可以使用代理容器。 这是一个非常轻量级的容器，它只是将请求从TCP转发到Docker监听的Unix套接字。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run \\ </span><br><span class=\"line\">   -ti \\ </span><br><span class=\"line\">   -d \\ </span><br><span class=\"line\">   -p 2375:2375 \\ </span><br><span class=\"line\">   --hostname=$HOSTNAME \\ </span><br><span class=\"line\">   --restart=always \\ </span><br><span class=\"line\">   --name shipyard-proxy \\ </span><br><span class=\"line\">    -v /var/run/docker.sock:/var/run/docker.sock \\ </span><br><span class=\"line\">    -e PORT=2375 \\ </span><br><span class=\"line\">   shipyard/docker-proxy:latest</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Swarm管理节点\"><a href=\"#Swarm管理节点\" class=\"headerlink\" title=\"Swarm管理节点\"></a>Swarm管理节点</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run \\ </span><br><span class=\"line\">   -ti \\ </span><br><span class=\"line\">   -d \\ </span><br><span class=\"line\">   --restart=always \\ </span><br><span class=\"line\">   --name shipyard-swarm-manager \\ </span><br><span class=\"line\">   swarm:latest \\ </span><br><span class=\"line\">   manage --host tcp://0.0.0.0:3375 etcd://&lt;IP-OF-HOST&gt;:4001</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Swarm-Agent节点\"><a href=\"#Swarm-Agent节点\" class=\"headerlink\" title=\"Swarm Agent节点\"></a>Swarm Agent节点</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run \\ </span><br><span class=\"line\">   -ti \\ </span><br><span class=\"line\">   -d \\ </span><br><span class=\"line\">   --restart=always \\ </span><br><span class=\"line\">   --name shipyard-swarm-agent \\ </span><br><span class=\"line\">   swarm:latest \\ </span><br><span class=\"line\">   join --addr &lt;ip-of-host&gt;:2375 etcd://&lt;ip-of-host&gt;:4001</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Shipyard管理工具\"><a href=\"#Shipyard管理工具\" class=\"headerlink\" title=\"Shipyard管理工具\"></a>Shipyard管理工具</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run \\ </span><br><span class=\"line\">   -ti \\ </span><br><span class=\"line\">   -d \\ </span><br><span class=\"line\">   --restart=always \\ </span><br><span class=\"line\">   --name shipyard-controller \\ </span><br><span class=\"line\">   --link shipyard-rethinkdb:rethinkdb \\ </span><br><span class=\"line\">   --link shipyard-swarm-manager:swarm \\ </span><br><span class=\"line\">   -p 8080:8080 \\ </span><br><span class=\"line\">   shipyard/shipyard:latest \\ </span><br><span class=\"line\">   server \\ </span><br><span class=\"line\">   -d tcp://swarm:3375</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote>\n<p><strong>文章来源： <a href=\"https://shipyard-project.com/docs/deploy/automated/\" target=\"_blank\" rel=\"noopener\">Shipyard Automated Deployment</a></strong></p>\n</blockquote><hr><h1 id=\"Shipyard简介\"><a href=\"#Shipyard简介\" class=\"headerlink\" title=\"Shipyard简介\"></a>Shipyard简介</h1><p>Shipyard是一个集成管理docker容器、镜像、Registries的系统，它具有以下特点：</p><ul>\n<li>支持多节点的集成管理</li>\n<li>可动态加载节点</li>\n<li>可托管node下的容器</li>\n</ul><h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><h2 id=\"下载镜像\"><a href=\"#下载镜像\" class=\"headerlink\" title=\"下载镜像\"></a>下载镜像</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull rethinkdb</span><br><span class=\"line\">$ docker pull microbox/etcd</span><br><span class=\"line\">$ docker pull shipyard/docker-proxy</span><br><span class=\"line\">$ docker pull swarm </span><br><span class=\"line\">$ docker pull shipyard/shipyard</span><br></pre></td></tr></table></figure>","more":"\n\n\n\n\n\n<h2 id=\"自动安装\"><a href=\"#自动安装\" class=\"headerlink\" title=\"自动安装\"></a>自动安装</h2><p>注意：这将会暴露Docker Engine的管理端口2375。如果此节点在安全网络外部可以访问，建议使用TLS。</p>\n<h3 id=\"下载自动部署Shell脚本\"><a href=\"#下载自动部署Shell脚本\" class=\"headerlink\" title=\"下载自动部署Shell脚本\"></a>下载自动部署Shell脚本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -sSL https://shipyard-project.com/deploy | bash -s</span><br></pre></td></tr></table></figure>\n\n<p>自动部署脚本中， 包括以下参数：</p>\n<ul>\n<li>ACTION： 表示可以使用的指令，它包括以下选项。</li>\n<li>deploy， 默认值， 表示自动安装部署Shipyard管理工具及相关应用</li>\n<li>upgrade，更新已存在的实例（注意：你要保持相同的系统环境、变量来部署同样的配置）</li>\n<li>node， 部署Swarm的一个新节点</li>\n<li>remove， 已存在的shipyard实例</li>\n<li>DISCOVERY: 集群系统采用Swarm进行采集和管理(在节点管理中可以使用‘node’)</li>\n<li>IMAGE: 镜像，默认使用shipyard的镜像</li>\n<li>PREFIX: 容器名字的前缀</li>\n<li>SHIPYARD_ARGS: 容器的常用参数</li>\n<li>TLS_CERT_PATH: TLS证书路径</li>\n<li>PORT: 主程序监听端口 (默认端口: 8080)</li>\n<li>PROXY_PORT: 代理端口 (默认: 2375)</li>\n</ul>\n<h3 id=\"使用镜像\"><a href=\"#使用镜像\" class=\"headerlink\" title=\"使用镜像\"></a>使用镜像</h3><p>Shipyard允许您采取指定的镜像来部署实例，比如以下的测试版本，你也已这样做：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -sSL https://shipyard-project.com/deploy | IMAGE=shipyard/shipyard:test bash -s</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用前缀\"><a href=\"#使用前缀\" class=\"headerlink\" title=\"使用前缀\"></a>使用前缀</h3><p>你可以在部署Shipyard管理工具时，自定义你想要的前缀，比如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -sSL https://shipyard-project.com/deploy | PREFIX=shipyard-test bash -s</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用运行参数\"><a href=\"#使用运行参数\" class=\"headerlink\" title=\"使用运行参数\"></a>使用运行参数</h3><p>这里增加一些shipyard运行参数，你可以像这样进行调整：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -sSL https://shipyard-project.com/deploy | SHIPYARD_ARGS=&quot;--ldap-server=ldap.example.com --ldap-autocreate-users&quot; bash -s</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用安全认证-TLS证书\"><a href=\"#使用安全认证-TLS证书\" class=\"headerlink\" title=\"使用安全认证(TLS证书)\"></a>使用安全认证(TLS证书)</h3><p>启用安全加密通讯协议（TLS）对Shipyard进行部署，包括代理（docker-proxy）、swarm集群、shipyard管理平台的配置，这是一个配置规范。证书必须采用以下命名规范：</p>\n<ul>\n<li>ca.pem: 安全认证证书</li>\n<li>server.pem: 服务器证书</li>\n<li>server-key.pem: 服务器私有证书</li>\n<li>cert.pem: 客户端证书</li>\n<li>key.pem: 客户端证书的key</li>\n</ul>\n<p>注意：证书将被放置在一个单独的安全认证docker容器中，并在各个组成部分之间共享。如果需要调试，可以将此容器连接到调试容器。数据容器名称为$PREFIX-certs。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run --rm \\ </span><br><span class=\"line\">   -v $(pwd)/certs:/certs \\ </span><br><span class=\"line\">   ehazlett/certm \\ -d /certs \\ </span><br><span class=\"line\">   bundle \\ </span><br><span class=\"line\">   generate \\</span><br><span class=\"line\">   -o shipyard \\ </span><br><span class=\"line\">   --host proxy \\ </span><br><span class=\"line\">   --host 127.0.0.1</span><br></pre></td></tr></table></figure>\n\n<p>你也可以在部署时，指定TLS_CERT_PATH参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -sSL https://shipyard-project.com/deploy | TLS_CERT_PATH=$(pwd)/certs bash -s</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"增加Swarm节点\"><a href=\"#增加Swarm节点\" class=\"headerlink\" title=\"增加Swarm节点\"></a>增加Swarm节点</h3><p>Shipyard管理的Swarm节点部署脚本将自动的安装key/value存储系统（etcd系统），用于进行服务发现， 相关的工具还有Consul、Zookeeper。增加一个节点到swarm集群，你可以通过以下的节点部署脚本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -sSL https://shipyard-project.com/deploy | ACTION=node DISCOVERY=etcd://10.0.1.10:4001 bash -s</span><br></pre></td></tr></table></figure>\n\n<p>注意：10.0.1.10该ip地址为部署Ectd系统所在主机的IP地址，你需要根据你的部署位置进行修改。</p>\n<h3 id=\"删除Shipyard管理工具\"><a href=\"#删除Shipyard管理工具\" class=\"headerlink\" title=\"删除Shipyard管理工具\"></a>删除Shipyard管理工具</h3><p>如果你要删除Shipyard部署的容器，你可以使用以下脚本进行删除。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -sSL https://shipyard-project.com/deploy | ACTION=remove bash -s</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"手动安装\"><a href=\"#手动安装\" class=\"headerlink\" title=\"手动安装\"></a>手动安装</h2><h3 id=\"数据存储\"><a href=\"#数据存储\" class=\"headerlink\" title=\"数据存储\"></a>数据存储</h3><p>Shipyard使用RethinkDB做为数据存储工具， 我们需要先运行RethinkDB容器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run \\ </span><br><span class=\"line\">    -ti \\ </span><br><span class=\"line\">    -d \\ </span><br><span class=\"line\">    --restart=always \\ </span><br><span class=\"line\">    --name shipyard-rethinkdb \\ </span><br><span class=\"line\">    rethinkdb</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"服务发现\"><a href=\"#服务发现\" class=\"headerlink\" title=\"服务发现\"></a>服务发现</h3><p>为了启用Swarm leader选择，我们必须使用来自Swarm容器的外部键值存储。此处，我们使用Etcd作为服务发现工具。可以选用的服务发现工具还有Consul、Zookeeper等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run \\ </span><br><span class=\"line\">     -ti \\ </span><br><span class=\"line\">     -d \\ </span><br><span class=\"line\">     -p 4001:4001 \\ </span><br><span class=\"line\">     -p 7001:7001 \\ </span><br><span class=\"line\">     --restart=always \\ </span><br><span class=\"line\">     --name shipyard-discovery \\ </span><br><span class=\"line\">     microbox/etcd:latest \\</span><br><span class=\"line\">     -name discovery</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Docker代理服务\"><a href=\"#Docker代理服务\" class=\"headerlink\" title=\"Docker代理服务\"></a>Docker代理服务</h3><p>默认情况下，Docker引擎只侦听套接字。 我们可以重新配置引擎以使用TLS，或者您可以使用代理容器。 这是一个非常轻量级的容器，它只是将请求从TCP转发到Docker监听的Unix套接字。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run \\ </span><br><span class=\"line\">   -ti \\ </span><br><span class=\"line\">   -d \\ </span><br><span class=\"line\">   -p 2375:2375 \\ </span><br><span class=\"line\">   --hostname=$HOSTNAME \\ </span><br><span class=\"line\">   --restart=always \\ </span><br><span class=\"line\">   --name shipyard-proxy \\ </span><br><span class=\"line\">    -v /var/run/docker.sock:/var/run/docker.sock \\ </span><br><span class=\"line\">    -e PORT=2375 \\ </span><br><span class=\"line\">   shipyard/docker-proxy:latest</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Swarm管理节点\"><a href=\"#Swarm管理节点\" class=\"headerlink\" title=\"Swarm管理节点\"></a>Swarm管理节点</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run \\ </span><br><span class=\"line\">   -ti \\ </span><br><span class=\"line\">   -d \\ </span><br><span class=\"line\">   --restart=always \\ </span><br><span class=\"line\">   --name shipyard-swarm-manager \\ </span><br><span class=\"line\">   swarm:latest \\ </span><br><span class=\"line\">   manage --host tcp://0.0.0.0:3375 etcd://&lt;IP-OF-HOST&gt;:4001</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Swarm-Agent节点\"><a href=\"#Swarm-Agent节点\" class=\"headerlink\" title=\"Swarm Agent节点\"></a>Swarm Agent节点</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run \\ </span><br><span class=\"line\">   -ti \\ </span><br><span class=\"line\">   -d \\ </span><br><span class=\"line\">   --restart=always \\ </span><br><span class=\"line\">   --name shipyard-swarm-agent \\ </span><br><span class=\"line\">   swarm:latest \\ </span><br><span class=\"line\">   join --addr &lt;ip-of-host&gt;:2375 etcd://&lt;ip-of-host&gt;:4001</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Shipyard管理工具\"><a href=\"#Shipyard管理工具\" class=\"headerlink\" title=\"Shipyard管理工具\"></a>Shipyard管理工具</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run \\ </span><br><span class=\"line\">   -ti \\ </span><br><span class=\"line\">   -d \\ </span><br><span class=\"line\">   --restart=always \\ </span><br><span class=\"line\">   --name shipyard-controller \\ </span><br><span class=\"line\">   --link shipyard-rethinkdb:rethinkdb \\ </span><br><span class=\"line\">   --link shipyard-swarm-manager:swarm \\ </span><br><span class=\"line\">   -p 8080:8080 \\ </span><br><span class=\"line\">   shipyard/shipyard:latest \\ </span><br><span class=\"line\">   server \\ </span><br><span class=\"line\">   -d tcp://swarm:3375</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Apr 25 2018 20:46:59 GMT+0800 (GMT+08:00)","title":"Docker可视化管理工具Shipyard安装与配置","path":"2017/04/11/Docker可视化管理工具Shipyard安装与配置/","eyeCatchImage":null,"excerpt":null,"date":"2017-04-11T11:10:20.000Z","pv":0,"totalPV":0,"categories":"Collection","tags":["Docker"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":3158},{"title":"EL表达式fn:endsWith函数的bug","date":"2017-03-24T15:31:59.000Z","_content":"jstl-1.2.jar\n\n```java\n  public static boolean endsWith(String input, String substring) {\n    if (input == null) \n      input = \"\";\n    if (substring == null) \n      substring = \"\";\n    int index = input.indexOf(substring); // should be indexOf应该是lastIndexOf 才对\n    if (index == -1) \n      return false;\n    if ((index == 0) && (substring.length() == 0)) \n      return true;\n    return index == input.length() - substring.length();\n  }\n  \n```\n\n","source":"_posts/EL表达式fn-endsWith函数的bug.md","raw":"---\ntitle: 'EL表达式fn:endsWith函数的bug'\ndate: 2017-03-24 23:31:59\ntags: [Java, Jstl]\ncategories: Collection\n---\njstl-1.2.jar\n\n```java\n  public static boolean endsWith(String input, String substring) {\n    if (input == null) \n      input = \"\";\n    if (substring == null) \n      substring = \"\";\n    int index = input.indexOf(substring); // should be indexOf应该是lastIndexOf 才对\n    if (index == -1) \n      return false;\n    if ((index == 0) && (substring.length() == 0)) \n      return true;\n    return index == input.length() - substring.length();\n  }\n  \n```\n\n","slug":"EL表达式fn-endsWith函数的bug","published":1,"updated":"2018-04-25T12:46:59.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2fj0noc0008q4vg3s0w1i8k","content":"<p>jstl-1.2.jar</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">endsWith</span><span class=\"params\">(String input, String substring)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (input == <span class=\"keyword\">null</span>) </span><br><span class=\"line\">    input = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (substring == <span class=\"keyword\">null</span>) </span><br><span class=\"line\">    substring = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> index = input.indexOf(substring); <span class=\"comment\">// should be indexOf应该是lastIndexOf 才对</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (index == -<span class=\"number\">1</span>) </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((index == <span class=\"number\">0</span>) &amp;&amp; (substring.length() == <span class=\"number\">0</span>)) </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> index == input.length() - substring.length();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>jstl-1.2.jar</p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">endsWith</span><span class=\"params\">(String input, String substring)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (input == <span class=\"keyword\">null</span>) </span><br><span class=\"line\">    input = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (substring == <span class=\"keyword\">null</span>) </span><br><span class=\"line\">    substring = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> index = input.indexOf(substring); <span class=\"comment\">// should be indexOf应该是lastIndexOf 才对</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (index == -<span class=\"number\">1</span>) </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((index == <span class=\"number\">0</span>) &amp;&amp; (substring.length() == <span class=\"number\">0</span>)) </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> index == input.length() - substring.length();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Apr 25 2018 20:46:59 GMT+0800 (GMT+08:00)","title":"EL表达式fn:endsWith函数的bug","path":"2017/03/24/EL表达式fn-endsWith函数的bug/","eyeCatchImage":null,"excerpt":null,"date":"2017-03-24T15:31:59.000Z","pv":0,"totalPV":0,"categories":"Collection","tags":["Java","Jstl"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":348},{"title":"ElasticSearch + Canal 开发千万级的实时搜索系统","date":"2017-04-08T09:50:29.000Z","_content":"公司是做社交相关产品的，社交类产品对搜索功能需求要求就比较高，需要根据用户城市、用户ID昵称等进行搜索。\n项目原先的搜索接口采用SQL查询的方式实现，数据库表采用了按城市分表的方式。但随着业务的发展，搜索接口调用频次越来越高，搜索接口压力越来越大，搜索数据库经常崩溃，从而导致搜索功能经常不能使用。\nElasticSearch + Canal 开发千万级的实时搜索系统\n从上面的系统架构图可以看出，当用户修改资料时，接口会修改用户库信息，接着触发器会将改变的用户信息写入临时表。定时脚本每隔1分钟扫描一次临时表，将变更的数据写入到搜索库中。当用户再次请求搜索接口时，就可以搜索到最新的数据。\n从技术层面分析，原搜索系统的设计有以下缺点：\n搜索信息不实时。当用户修改信息时，需要等待1分钟的时间才能将最新的用户信息同步到搜索数据库中。\nID、昵称搜索速度慢。按照地区分表的数据库设计是为了减轻数据库压力，保证大部分按照地区搜索的请求能正常响应。但是如果用户按照ID或昵称搜索，那么我们就需要对成千上万个地区表全都搜索一次，这时间复杂度可想而知。很多时候按照昵称和ID搜索速度太慢，需要10多秒才能响应。\n系统稳定性、拓展性以及处理能力差。这可以归结为技术老旧，无法满足业务需求。随着搜索量的提升，对数据库的压力将会越来越大，而MySQL数据库天然不适合用来应对海量的请求。现在已经有更加成熟的ElasticSearch可以用来做搜索方面的业务。\n触发器不便于管理。触发器这种东西不好维护，并且扩展性很差，一旦修改的请求变多，很可能导致整个数据库崩溃（用户库崩溃是很严重的）。\n我们总结一下新搜索系统需要解决的几个问题：\n海量请求。几百万的请求毫无压力，上千万上亿也要可以扛得住。\n实时搜索。指的是当一个用户修改了其数据之后，另一个用户能实时地搜索到改用户。\n海量请求。要扛得起海量的搜索请求，可以使用ElasticSearch来实现，它是在Lucene的基础上进行封装的一个开源项目，它将Lucene复杂的原理以及API封装起来，对外提供了一个易用的API接口。ElasticSearch现在已经广泛地被许多公司使用，其中包括：爱奇艺、百姓网、58到家等公司。\n实时搜索。阿里有一个开源项目Canal，就是用来解决这个问题的，Canal项目利用了MySQL数据库主从同步的原理，将Canal Server模拟成一台需要同步的从库，从而让主库将binlog日志流发送到Canal Server接口。Canal项目对binlog日志的解析进行了封装，我们可以直接得到解析后的数据，而不需要理会binlog的日志格式。而且Canal项目整合了zookeeper，整体实现了高可用，可伸缩性强，是一个不错的解决方案。\n经过一段时间的技术预研，我们设计了整个搜索技术架构：\nElasticSearch + Canal 开发千万级的实时搜索系统\n从架构图可以看出整个系统分为两大部分：\nCanal数据变更服务平台。这部分负责解析MySQL的binlog日志，并将其解析后的数据封装成特定的对象放到Kafka中。\nKafka数据消费方。这部分负责消费存放在Kafka中的消息，当消费方拿到具体的用户表变更消息时，将最新的用户信息存放到ES数据仓库中。\nCanal技术变更基础平台\n因为考虑到未来可能有其他项目需要监控数据库某些表的变化，因此我们将Canal获取MySQL数据变更部分做成一个公用的平台。当有其他业务需要增加监控的表时，我们可以直接修改配置文件，重启服务器即可完成添加，极大地提高了开发效率。\n在这一部分中，主要分为两大部分：Canal Server 和 Canal Client。\nCanal Server端。Canal Server伪装成MySQL的一个从库，使主库发送binlog日志给 Canal Server，Canal Server 收到binlog消息之后进行解析，解析完成后将消息直接发送给Canal Client。在Canal Server端可以设置配置文件进行具体scheme（数据库）和table（数据库表）的筛选，从而实现动态地增加对数据库表的监视。\nCanal Client端。Canal Client端接收到Canal Server的消息后直接将消息存到Kafka指定Partition中，并将最新的binlogid发送给zookeeper集群保存。\nKafka消息消费端\nCanal技术变更平台在获取到对应的数据库变更消息后会将其放到指定的Kafka分片里，具体的业务项目需要到指定的Kafka片区里消费对应的数据变更消息，之后根据具体的业务需求进行处理。\n因为Canal变化是根据表为最小单位进行地，因此我在实现方面定义了一个以表为处理单位的MsgDealer接口：\npublic interface MsgDealer { void deal(CanalMsgVo canalMsgVo); }\n搜索库涉及对5个表的监视，因此我实现了5个对应的处理类：\nElasticSearch + Canal 开发千万级的实时搜索系统\n针对不同表的数据变化，自动调用不同的实现类进行处理。","source":"_posts/ElasticSearch-Canal-开发千万级的实时搜索系统.md","raw":"---\ntitle: ElasticSearch + Canal 开发千万级的实时搜索系统\ndate: 2017-04-08 17:50:29\ntags:\n  - Java\n  - ElasticSearch\ncategories: Essay\n---\n公司是做社交相关产品的，社交类产品对搜索功能需求要求就比较高，需要根据用户城市、用户ID昵称等进行搜索。\n项目原先的搜索接口采用SQL查询的方式实现，数据库表采用了按城市分表的方式。但随着业务的发展，搜索接口调用频次越来越高，搜索接口压力越来越大，搜索数据库经常崩溃，从而导致搜索功能经常不能使用。\nElasticSearch + Canal 开发千万级的实时搜索系统\n从上面的系统架构图可以看出，当用户修改资料时，接口会修改用户库信息，接着触发器会将改变的用户信息写入临时表。定时脚本每隔1分钟扫描一次临时表，将变更的数据写入到搜索库中。当用户再次请求搜索接口时，就可以搜索到最新的数据。\n从技术层面分析，原搜索系统的设计有以下缺点：\n搜索信息不实时。当用户修改信息时，需要等待1分钟的时间才能将最新的用户信息同步到搜索数据库中。\nID、昵称搜索速度慢。按照地区分表的数据库设计是为了减轻数据库压力，保证大部分按照地区搜索的请求能正常响应。但是如果用户按照ID或昵称搜索，那么我们就需要对成千上万个地区表全都搜索一次，这时间复杂度可想而知。很多时候按照昵称和ID搜索速度太慢，需要10多秒才能响应。\n系统稳定性、拓展性以及处理能力差。这可以归结为技术老旧，无法满足业务需求。随着搜索量的提升，对数据库的压力将会越来越大，而MySQL数据库天然不适合用来应对海量的请求。现在已经有更加成熟的ElasticSearch可以用来做搜索方面的业务。\n触发器不便于管理。触发器这种东西不好维护，并且扩展性很差，一旦修改的请求变多，很可能导致整个数据库崩溃（用户库崩溃是很严重的）。\n我们总结一下新搜索系统需要解决的几个问题：\n海量请求。几百万的请求毫无压力，上千万上亿也要可以扛得住。\n实时搜索。指的是当一个用户修改了其数据之后，另一个用户能实时地搜索到改用户。\n海量请求。要扛得起海量的搜索请求，可以使用ElasticSearch来实现，它是在Lucene的基础上进行封装的一个开源项目，它将Lucene复杂的原理以及API封装起来，对外提供了一个易用的API接口。ElasticSearch现在已经广泛地被许多公司使用，其中包括：爱奇艺、百姓网、58到家等公司。\n实时搜索。阿里有一个开源项目Canal，就是用来解决这个问题的，Canal项目利用了MySQL数据库主从同步的原理，将Canal Server模拟成一台需要同步的从库，从而让主库将binlog日志流发送到Canal Server接口。Canal项目对binlog日志的解析进行了封装，我们可以直接得到解析后的数据，而不需要理会binlog的日志格式。而且Canal项目整合了zookeeper，整体实现了高可用，可伸缩性强，是一个不错的解决方案。\n经过一段时间的技术预研，我们设计了整个搜索技术架构：\nElasticSearch + Canal 开发千万级的实时搜索系统\n从架构图可以看出整个系统分为两大部分：\nCanal数据变更服务平台。这部分负责解析MySQL的binlog日志，并将其解析后的数据封装成特定的对象放到Kafka中。\nKafka数据消费方。这部分负责消费存放在Kafka中的消息，当消费方拿到具体的用户表变更消息时，将最新的用户信息存放到ES数据仓库中。\nCanal技术变更基础平台\n因为考虑到未来可能有其他项目需要监控数据库某些表的变化，因此我们将Canal获取MySQL数据变更部分做成一个公用的平台。当有其他业务需要增加监控的表时，我们可以直接修改配置文件，重启服务器即可完成添加，极大地提高了开发效率。\n在这一部分中，主要分为两大部分：Canal Server 和 Canal Client。\nCanal Server端。Canal Server伪装成MySQL的一个从库，使主库发送binlog日志给 Canal Server，Canal Server 收到binlog消息之后进行解析，解析完成后将消息直接发送给Canal Client。在Canal Server端可以设置配置文件进行具体scheme（数据库）和table（数据库表）的筛选，从而实现动态地增加对数据库表的监视。\nCanal Client端。Canal Client端接收到Canal Server的消息后直接将消息存到Kafka指定Partition中，并将最新的binlogid发送给zookeeper集群保存。\nKafka消息消费端\nCanal技术变更平台在获取到对应的数据库变更消息后会将其放到指定的Kafka分片里，具体的业务项目需要到指定的Kafka片区里消费对应的数据变更消息，之后根据具体的业务需求进行处理。\n因为Canal变化是根据表为最小单位进行地，因此我在实现方面定义了一个以表为处理单位的MsgDealer接口：\npublic interface MsgDealer { void deal(CanalMsgVo canalMsgVo); }\n搜索库涉及对5个表的监视，因此我实现了5个对应的处理类：\nElasticSearch + Canal 开发千万级的实时搜索系统\n针对不同表的数据变化，自动调用不同的实现类进行处理。","slug":"ElasticSearch-Canal-开发千万级的实时搜索系统","published":1,"updated":"2018-04-25T12:46:59.494Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2fj0noe0009q4vg83kv3frk","content":"<p>公司是做社交相关产品的，社交类产品对搜索功能需求要求就比较高，需要根据用户城市、用户ID昵称等进行搜索。<br>项目原先的搜索接口采用SQL查询的方式实现，数据库表采用了按城市分表的方式。但随着业务的发展，搜索接口调用频次越来越高，搜索接口压力越来越大，搜索数据库经常崩溃，从而导致搜索功能经常不能使用。<br>ElasticSearch + Canal 开发千万级的实时搜索系统<br>从上面的系统架构图可以看出，当用户修改资料时，接口会修改用户库信息，接着触发器会将改变的用户信息写入临时表。定时脚本每隔1分钟扫描一次临时表，将变更的数据写入到搜索库中。当用户再次请求搜索接口时，就可以搜索到最新的数据。<br>从技术层面分析，原搜索系统的设计有以下缺点：<br>搜索信息不实时。当用户修改信息时，需要等待1分钟的时间才能将最新的用户信息同步到搜索数据库中。<br>ID、昵称搜索速度慢。按照地区分表的数据库设计是为了减轻数据库压力，保证大部分按照地区搜索的请求能正常响应。但是如果用户按照ID或昵称搜索，那么我们就需要对成千上万个地区表全都搜索一次，这时间复杂度可想而知。很多时候按照昵称和ID搜索速度太慢，需要10多秒才能响应。<br>系统稳定性、拓展性以及处理能力差。这可以归结为技术老旧，无法满足业务需求。随着搜索量的提升，对数据库的压力将会越来越大，而MySQL数据库天然不适合用来应对海量的请求。现在已经有更加成熟的ElasticSearch可以用来做搜索方面的业务。<br>触发器不便于管理。触发器这种东西不好维护，并且扩展性很差，一旦修改的请求变多，很可能导致整个数据库崩溃（用户库崩溃是很严重的）。<br>我们总结一下新搜索系统需要解决的几个问题：<br>海量请求。几百万的请求毫无压力，上千万上亿也要可以扛得住。<br>实时搜索。指的是当一个用户修改了其数据之后，另一个用户能实时地搜索到改用户。<br>海量请求。要扛得起海量的搜索请求，可以使用ElasticSearch来实现，它是在Lucene的基础上进行封装的一个开源项目，它将Lucene复杂的原理以及API封装起来，对外提供了一个易用的API接口。ElasticSearch现在已经广泛地被许多公司使用，其中包括：爱奇艺、百姓网、58到家等公司。<br>实时搜索。阿里有一个开源项目Canal，就是用来解决这个问题的，Canal项目利用了MySQL数据库主从同步的原理，将Canal Server模拟成一台需要同步的从库，从而让主库将binlog日志流发送到Canal Server接口。Canal项目对binlog日志的解析进行了封装，我们可以直接得到解析后的数据，而不需要理会binlog的日志格式。而且Canal项目整合了zookeeper，整体实现了高可用，可伸缩性强，是一个不错的解决方案。<br>经过一段时间的技术预研，我们设计了整个搜索技术架构：<br>ElasticSearch + Canal 开发千万级的实时搜索系统<br>从架构图可以看出整个系统分为两大部分：<br>Canal数据变更服务平台。这部分负责解析MySQL的binlog日志，并将其解析后的数据封装成特定的对象放到Kafka中。<br>Kafka数据消费方。这部分负责消费存放在Kafka中的消息，当消费方拿到具体的用户表变更消息时，将最新的用户信息存放到ES数据仓库中。<br>Canal技术变更基础平台<br>因为考虑到未来可能有其他项目需要监控数据库某些表的变化，因此我们将Canal获取MySQL数据变更部分做成一个公用的平台。当有其他业务需要增加监控的表时，我们可以直接修改配置文件，重启服务器即可完成添加，极大地提高了开发效率。<br>在这一部分中，主要分为两大部分：Canal Server 和 Canal Client。<br>Canal Server端。Canal Server伪装成MySQL的一个从库，使主库发送binlog日志给 Canal Server，Canal Server 收到binlog消息之后进行解析，解析完成后将消息直接发送给Canal Client。在Canal Server端可以设置配置文件进行具体scheme（数据库）和table（数据库表）的筛选，从而实现动态地增加对数据库表的监视。<br>Canal Client端。Canal Client端接收到Canal Server的消息后直接将消息存到Kafka指定Partition中，并将最新的binlogid发送给zookeeper集群保存。<br>Kafka消息消费端<br>Canal技术变更平台在获取到对应的数据库变更消息后会将其放到指定的Kafka分片里，具体的业务项目需要到指定的Kafka片区里消费对应的数据变更消息，之后根据具体的业务需求进行处理。<br>因为Canal变化是根据表为最小单位进行地，因此我在实现方面定义了一个以表为处理单位的MsgDealer接口：<br>public interface MsgDealer { void deal(CanalMsgVo canalMsgVo); }<br>搜索库涉及对5个表的监视，因此我实现了5个对应的处理类：<br>ElasticSearch + Canal 开发千万级的实时搜索系统<br>针对不同表的数据变化，自动调用不同的实现类进行处理。</p>","site":{"data":{}},"excerpt":"","more":"<p>公司是做社交相关产品的，社交类产品对搜索功能需求要求就比较高，需要根据用户城市、用户ID昵称等进行搜索。<br>项目原先的搜索接口采用SQL查询的方式实现，数据库表采用了按城市分表的方式。但随着业务的发展，搜索接口调用频次越来越高，搜索接口压力越来越大，搜索数据库经常崩溃，从而导致搜索功能经常不能使用。<br>ElasticSearch + Canal 开发千万级的实时搜索系统<br>从上面的系统架构图可以看出，当用户修改资料时，接口会修改用户库信息，接着触发器会将改变的用户信息写入临时表。定时脚本每隔1分钟扫描一次临时表，将变更的数据写入到搜索库中。当用户再次请求搜索接口时，就可以搜索到最新的数据。<br>从技术层面分析，原搜索系统的设计有以下缺点：<br>搜索信息不实时。当用户修改信息时，需要等待1分钟的时间才能将最新的用户信息同步到搜索数据库中。<br>ID、昵称搜索速度慢。按照地区分表的数据库设计是为了减轻数据库压力，保证大部分按照地区搜索的请求能正常响应。但是如果用户按照ID或昵称搜索，那么我们就需要对成千上万个地区表全都搜索一次，这时间复杂度可想而知。很多时候按照昵称和ID搜索速度太慢，需要10多秒才能响应。<br>系统稳定性、拓展性以及处理能力差。这可以归结为技术老旧，无法满足业务需求。随着搜索量的提升，对数据库的压力将会越来越大，而MySQL数据库天然不适合用来应对海量的请求。现在已经有更加成熟的ElasticSearch可以用来做搜索方面的业务。<br>触发器不便于管理。触发器这种东西不好维护，并且扩展性很差，一旦修改的请求变多，很可能导致整个数据库崩溃（用户库崩溃是很严重的）。<br>我们总结一下新搜索系统需要解决的几个问题：<br>海量请求。几百万的请求毫无压力，上千万上亿也要可以扛得住。<br>实时搜索。指的是当一个用户修改了其数据之后，另一个用户能实时地搜索到改用户。<br>海量请求。要扛得起海量的搜索请求，可以使用ElasticSearch来实现，它是在Lucene的基础上进行封装的一个开源项目，它将Lucene复杂的原理以及API封装起来，对外提供了一个易用的API接口。ElasticSearch现在已经广泛地被许多公司使用，其中包括：爱奇艺、百姓网、58到家等公司。<br>实时搜索。阿里有一个开源项目Canal，就是用来解决这个问题的，Canal项目利用了MySQL数据库主从同步的原理，将Canal Server模拟成一台需要同步的从库，从而让主库将binlog日志流发送到Canal Server接口。Canal项目对binlog日志的解析进行了封装，我们可以直接得到解析后的数据，而不需要理会binlog的日志格式。而且Canal项目整合了zookeeper，整体实现了高可用，可伸缩性强，是一个不错的解决方案。<br>经过一段时间的技术预研，我们设计了整个搜索技术架构：<br>ElasticSearch + Canal 开发千万级的实时搜索系统<br>从架构图可以看出整个系统分为两大部分：<br>Canal数据变更服务平台。这部分负责解析MySQL的binlog日志，并将其解析后的数据封装成特定的对象放到Kafka中。<br>Kafka数据消费方。这部分负责消费存放在Kafka中的消息，当消费方拿到具体的用户表变更消息时，将最新的用户信息存放到ES数据仓库中。<br>Canal技术变更基础平台<br>因为考虑到未来可能有其他项目需要监控数据库某些表的变化，因此我们将Canal获取MySQL数据变更部分做成一个公用的平台。当有其他业务需要增加监控的表时，我们可以直接修改配置文件，重启服务器即可完成添加，极大地提高了开发效率。<br>在这一部分中，主要分为两大部分：Canal Server 和 Canal Client。<br>Canal Server端。Canal Server伪装成MySQL的一个从库，使主库发送binlog日志给 Canal Server，Canal Server 收到binlog消息之后进行解析，解析完成后将消息直接发送给Canal Client。在Canal Server端可以设置配置文件进行具体scheme（数据库）和table（数据库表）的筛选，从而实现动态地增加对数据库表的监视。<br>Canal Client端。Canal Client端接收到Canal Server的消息后直接将消息存到Kafka指定Partition中，并将最新的binlogid发送给zookeeper集群保存。<br>Kafka消息消费端<br>Canal技术变更平台在获取到对应的数据库变更消息后会将其放到指定的Kafka分片里，具体的业务项目需要到指定的Kafka片区里消费对应的数据变更消息，之后根据具体的业务需求进行处理。<br>因为Canal变化是根据表为最小单位进行地，因此我在实现方面定义了一个以表为处理单位的MsgDealer接口：<br>public interface MsgDealer { void deal(CanalMsgVo canalMsgVo); }<br>搜索库涉及对5个表的监视，因此我实现了5个对应的处理类：<br>ElasticSearch + Canal 开发千万级的实时搜索系统<br>针对不同表的数据变化，自动调用不同的实现类进行处理。</p>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Apr 25 2018 20:46:59 GMT+0800 (GMT+08:00)","title":"ElasticSearch + Canal 开发千万级的实时搜索系统","path":"2017/04/08/ElasticSearch-Canal-开发千万级的实时搜索系统/","eyeCatchImage":null,"excerpt":null,"date":"2017-04-08T09:50:29.000Z","pv":0,"totalPV":0,"categories":"Essay","tags":["Java","ElasticSearch"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2091},{"title":"Docker的Secrets管理","date":"2017-05-18T12:41:58.000Z","_content":"我相信当我们意识到重要且敏感的访问信息已经暴露到公共网络上，并可能使您的微服务无条件被访问。随着我们依赖于的开发出来的服务化的量不断增加， 这时跟踪敏感细节的数量也有所增加。为了应对这个问题，在“secrets managemen”领域出现了工具。\n\n在这篇文章中，我们将看Docker Secrets，要求在Docker 1.13及更高版本的新秘密管理功能。\n\n从Docker的角度来看，该功能不需要太多的工作，但是您可能需要重构应用程序以利用它。我们将介绍如何做到这一点的想法，但不是详细的。\n\nDocker的 Secrets只适用于Docker群集，主要是因为这是秘密管理最有意义的领域。毕竟，Swarm是针对多个Docker实例需要在他们之间共享访问细节的生产用途。如果要在独立容器中使用秘密管理，则需要运行\n\nscale值设置为1 的容器。适用于Mac和Windows的Docker不支持多节点群集模式，但您可以使用它们使用Docker Machine创建多节点群集。\n\n创建两个机器，然后创建一个两个节点，并从该组中的一个swarm环境中运行本文中的案例。\n\n### 获得Secrets\n\n当您从命令行创建Secrets时，您可以使用所有可用的工具来创建随机密码和管道输出。例如，为数据库用户创建一个随机密码：\n\nopensslrand-base6420|dockersecretcreatemariadb_password-\n\n这将返回一个秘密的ID。\n\n您需要再次发出此命令以生成MariaDB root用户的密码。您将需要这样才能开始使用，但您不需要为每项服务。\n\nopensslrand-base6420|dockersecretcreatemariadb_root_password-\n\n如果你已经忘记了你创建的秘密， 可以用ls查看，也可以用以下命令查看docker secret ls\n\n### 替换secrets\n\n为了保持秘密，良好的秘密，服务之间的通信发生在您定义的覆盖网络中。它们只能通过调用其ID来在该覆盖网络中使用。\n\ndockernetworkcreate-doverlaymariadb_private\n\n这也将返回该网络的ID。再次，你可以docker network ls查看相关网络\n\n### 创建服务\n\n这个例子将有一个Docker节点运行MariaDB，一个运行Python的节点。在最终的应用程序中，Python应用程序将读取和写入数据库。\n\n首先，添加一个MariaDB服务。此服务使用您创建的网络进行通信，之前创建的秘密保存为两个文件：一个用于根密码，一个用于默认用户密码。然后将所需的所有变量作为环境变量传递给服务。\n\ndockerservicecreate\\ --namemariadb\\ --replicas1\\ --networkmariadb_private\\ --mounttype=volume,source=mydata,destination=/var/lib/mariadb\\ --secretsource=mariadb_root_password,target=mariadb_root_password\\ --secretsource=mariadb_password,target=mariadb_password\\ -eMARIADB_ROOT_PASSWORD_FILE=\"/run/secrets/mariadb_root_password\"\\ -eMARIADB_PASSWORD_FILE=\"/run/secrets/mariadb_password\"\\ -eMARIADB_USER=\"python\"\\ -eMARIADB_DATABASE=\"python\"\\\n\nPython实例再次使用您创建的专用网络，并复制网络中可访问的秘密。一个更好的（生产就绪的）选项将是创建您的应用程序在管理程序中需要的数据库，而不会给应用程序访问根密码，但这仅仅是一个例子。\n\ndockerservicecreate\\ --namecspython\\ --replicas1\\ --networkmariadb_private\\ --publish50000:5000\\ --mounttype=volume,source=pydata,destination=/var/www/html\\ --secretsource=mariadb_root_password,target=python_root_password,mode=0400\\ --secretsource=mariadb_password,target=python_password,mode=0400\\ -ePYTHON_DB_USER=\"python\"\\ -ePYTHON_DB_ROOT_PASSWORD_FILE=\"/run/secrets/python_root_password\"\\ -ePYTHON_DB_PASSWORD_FILE=\"/run/secrets/python_password\"\\ -ePYTHON_DB_HOST=\"mariadb:3306\"\\ -ePYTHON_DB_NAME=\"python\"\\\n\n上面的示例使用我创建的一个简单的Docker映像，它设置用于使用Flask创建Web应用程序的软件包，用于提供Web页面和PyMySQL来进行数据库访问。代码没有做太多，但显示了如何从Docker容器访问环境变量。\n\n例如，要连接到没有指定数据库的数据库服务器：\n\nimportos importMySQLdb db=MySQLdb.connect(host=os.environ['PYTHON_DB_HOST'], user=os.environ['PYTHON_DB_ROOT_USER'], passwd=os.environ['PYTHON_DB_PASSWORD_FILE']) cur=db.cursor() print(db) db.close()\n\n更新secrets\n\n频繁更改敏感信息是个好习惯。但是，您可能知道，在应用程序中更新这些细节是一个沉闷的过程，最不愿意避免。通过服务，Docker Secrets管理允许您更改值，而无需更改代码。\n\n创建一个新秘密：\n\nopensslrand-base6420|dockersecretcreatemariadb_password_march-\n\n从MariaDB服务中删除当前密码的访问权限：\n\ndockerserviceupdate\\ --secret-rmmariadb_password\\\n\n并让它访问新的秘密，将目标指向新的值：\n\ndockerserviceupdate\\ --secret-addsource=mariadb_password_march,target=mysql_password\\\n\n更新Python服务：\n\ndockerserviceupdate\\ --secret-rmmariadb_password\\ --secret-addsource=mariadb_password_march,target=python_password,mode=0400\\\n\n并删除旧秘密：\n\ndockersecretrmmariadb_password\n\n### 扩展说明\n\nDocker Secrets是一个新功能，但Docker鼓励镜像维护人员尽快为Docker用户提供更好的安全性。这需要允许与上述示例类似的过程，其中容器可以从通过生成秘密而不是硬编码到应用中创建的文件来读取其需要的每个参数。这可以强制实施集装箱应用程序，因为容器可以来回走动，但是始终可以访问您的应用程序运行所需的重要信息。","source":"_posts/Docker的Secrets管理.md","raw":"---\ntitle: Docker的Secrets管理\ndate: 2017-05-18 20:41:58\ntags: \n  - Docker\ncategories: [Essay]\n---\n我相信当我们意识到重要且敏感的访问信息已经暴露到公共网络上，并可能使您的微服务无条件被访问。随着我们依赖于的开发出来的服务化的量不断增加， 这时跟踪敏感细节的数量也有所增加。为了应对这个问题，在“secrets managemen”领域出现了工具。\n\n在这篇文章中，我们将看Docker Secrets，要求在Docker 1.13及更高版本的新秘密管理功能。\n\n从Docker的角度来看，该功能不需要太多的工作，但是您可能需要重构应用程序以利用它。我们将介绍如何做到这一点的想法，但不是详细的。\n\nDocker的 Secrets只适用于Docker群集，主要是因为这是秘密管理最有意义的领域。毕竟，Swarm是针对多个Docker实例需要在他们之间共享访问细节的生产用途。如果要在独立容器中使用秘密管理，则需要运行\n\nscale值设置为1 的容器。适用于Mac和Windows的Docker不支持多节点群集模式，但您可以使用它们使用Docker Machine创建多节点群集。\n\n创建两个机器，然后创建一个两个节点，并从该组中的一个swarm环境中运行本文中的案例。\n\n### 获得Secrets\n\n当您从命令行创建Secrets时，您可以使用所有可用的工具来创建随机密码和管道输出。例如，为数据库用户创建一个随机密码：\n\nopensslrand-base6420|dockersecretcreatemariadb_password-\n\n这将返回一个秘密的ID。\n\n您需要再次发出此命令以生成MariaDB root用户的密码。您将需要这样才能开始使用，但您不需要为每项服务。\n\nopensslrand-base6420|dockersecretcreatemariadb_root_password-\n\n如果你已经忘记了你创建的秘密， 可以用ls查看，也可以用以下命令查看docker secret ls\n\n### 替换secrets\n\n为了保持秘密，良好的秘密，服务之间的通信发生在您定义的覆盖网络中。它们只能通过调用其ID来在该覆盖网络中使用。\n\ndockernetworkcreate-doverlaymariadb_private\n\n这也将返回该网络的ID。再次，你可以docker network ls查看相关网络\n\n### 创建服务\n\n这个例子将有一个Docker节点运行MariaDB，一个运行Python的节点。在最终的应用程序中，Python应用程序将读取和写入数据库。\n\n首先，添加一个MariaDB服务。此服务使用您创建的网络进行通信，之前创建的秘密保存为两个文件：一个用于根密码，一个用于默认用户密码。然后将所需的所有变量作为环境变量传递给服务。\n\ndockerservicecreate\\ --namemariadb\\ --replicas1\\ --networkmariadb_private\\ --mounttype=volume,source=mydata,destination=/var/lib/mariadb\\ --secretsource=mariadb_root_password,target=mariadb_root_password\\ --secretsource=mariadb_password,target=mariadb_password\\ -eMARIADB_ROOT_PASSWORD_FILE=\"/run/secrets/mariadb_root_password\"\\ -eMARIADB_PASSWORD_FILE=\"/run/secrets/mariadb_password\"\\ -eMARIADB_USER=\"python\"\\ -eMARIADB_DATABASE=\"python\"\\\n\nPython实例再次使用您创建的专用网络，并复制网络中可访问的秘密。一个更好的（生产就绪的）选项将是创建您的应用程序在管理程序中需要的数据库，而不会给应用程序访问根密码，但这仅仅是一个例子。\n\ndockerservicecreate\\ --namecspython\\ --replicas1\\ --networkmariadb_private\\ --publish50000:5000\\ --mounttype=volume,source=pydata,destination=/var/www/html\\ --secretsource=mariadb_root_password,target=python_root_password,mode=0400\\ --secretsource=mariadb_password,target=python_password,mode=0400\\ -ePYTHON_DB_USER=\"python\"\\ -ePYTHON_DB_ROOT_PASSWORD_FILE=\"/run/secrets/python_root_password\"\\ -ePYTHON_DB_PASSWORD_FILE=\"/run/secrets/python_password\"\\ -ePYTHON_DB_HOST=\"mariadb:3306\"\\ -ePYTHON_DB_NAME=\"python\"\\\n\n上面的示例使用我创建的一个简单的Docker映像，它设置用于使用Flask创建Web应用程序的软件包，用于提供Web页面和PyMySQL来进行数据库访问。代码没有做太多，但显示了如何从Docker容器访问环境变量。\n\n例如，要连接到没有指定数据库的数据库服务器：\n\nimportos importMySQLdb db=MySQLdb.connect(host=os.environ['PYTHON_DB_HOST'], user=os.environ['PYTHON_DB_ROOT_USER'], passwd=os.environ['PYTHON_DB_PASSWORD_FILE']) cur=db.cursor() print(db) db.close()\n\n更新secrets\n\n频繁更改敏感信息是个好习惯。但是，您可能知道，在应用程序中更新这些细节是一个沉闷的过程，最不愿意避免。通过服务，Docker Secrets管理允许您更改值，而无需更改代码。\n\n创建一个新秘密：\n\nopensslrand-base6420|dockersecretcreatemariadb_password_march-\n\n从MariaDB服务中删除当前密码的访问权限：\n\ndockerserviceupdate\\ --secret-rmmariadb_password\\\n\n并让它访问新的秘密，将目标指向新的值：\n\ndockerserviceupdate\\ --secret-addsource=mariadb_password_march,target=mysql_password\\\n\n更新Python服务：\n\ndockerserviceupdate\\ --secret-rmmariadb_password\\ --secret-addsource=mariadb_password_march,target=python_password,mode=0400\\\n\n并删除旧秘密：\n\ndockersecretrmmariadb_password\n\n### 扩展说明\n\nDocker Secrets是一个新功能，但Docker鼓励镜像维护人员尽快为Docker用户提供更好的安全性。这需要允许与上述示例类似的过程，其中容器可以从通过生成秘密而不是硬编码到应用中创建的文件来读取其需要的每个参数。这可以强制实施集装箱应用程序，因为容器可以来回走动，但是始终可以访问您的应用程序运行所需的重要信息。","slug":"Docker的Secrets管理","published":1,"updated":"2018-04-25T12:46:59.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2fj0nog000aq4vg63l27kfk","content":"<p>我相信当我们意识到重要且敏感的访问信息已经暴露到公共网络上，并可能使您的微服务无条件被访问。随着我们依赖于的开发出来的服务化的量不断增加， 这时跟踪敏感细节的数量也有所增加。为了应对这个问题，在“secrets managemen”领域出现了工具。</p><p>在这篇文章中，我们将看Docker Secrets，要求在Docker 1.13及更高版本的新秘密管理功能。</p><a id=\"more\"></a>\n\n<p>从Docker的角度来看，该功能不需要太多的工作，但是您可能需要重构应用程序以利用它。我们将介绍如何做到这一点的想法，但不是详细的。</p>\n<p>Docker的 Secrets只适用于Docker群集，主要是因为这是秘密管理最有意义的领域。毕竟，Swarm是针对多个Docker实例需要在他们之间共享访问细节的生产用途。如果要在独立容器中使用秘密管理，则需要运行</p>\n<p>scale值设置为1 的容器。适用于Mac和Windows的Docker不支持多节点群集模式，但您可以使用它们使用Docker Machine创建多节点群集。</p>\n<p>创建两个机器，然后创建一个两个节点，并从该组中的一个swarm环境中运行本文中的案例。</p>\n<h3 id=\"获得Secrets\"><a href=\"#获得Secrets\" class=\"headerlink\" title=\"获得Secrets\"></a>获得Secrets</h3><p>当您从命令行创建Secrets时，您可以使用所有可用的工具来创建随机密码和管道输出。例如，为数据库用户创建一个随机密码：</p>\n<p>opensslrand-base6420|dockersecretcreatemariadb_password-</p>\n<p>这将返回一个秘密的ID。</p>\n<p>您需要再次发出此命令以生成MariaDB root用户的密码。您将需要这样才能开始使用，但您不需要为每项服务。</p>\n<p>opensslrand-base6420|dockersecretcreatemariadb_root_password-</p>\n<p>如果你已经忘记了你创建的秘密， 可以用ls查看，也可以用以下命令查看docker secret ls</p>\n<h3 id=\"替换secrets\"><a href=\"#替换secrets\" class=\"headerlink\" title=\"替换secrets\"></a>替换secrets</h3><p>为了保持秘密，良好的秘密，服务之间的通信发生在您定义的覆盖网络中。它们只能通过调用其ID来在该覆盖网络中使用。</p>\n<p>dockernetworkcreate-doverlaymariadb_private</p>\n<p>这也将返回该网络的ID。再次，你可以docker network ls查看相关网络</p>\n<h3 id=\"创建服务\"><a href=\"#创建服务\" class=\"headerlink\" title=\"创建服务\"></a>创建服务</h3><p>这个例子将有一个Docker节点运行MariaDB，一个运行Python的节点。在最终的应用程序中，Python应用程序将读取和写入数据库。</p>\n<p>首先，添加一个MariaDB服务。此服务使用您创建的网络进行通信，之前创建的秘密保存为两个文件：一个用于根密码，一个用于默认用户密码。然后将所需的所有变量作为环境变量传递给服务。</p>\n<p>dockerservicecreate\\ –namemariadb\\ –replicas1\\ –networkmariadb_private\\ –mounttype=volume,source=mydata,destination=/var/lib/mariadb\\ –secretsource=mariadb_root_password,target=mariadb_root_password\\ –secretsource=mariadb_password,target=mariadb_password\\ -eMARIADB_ROOT_PASSWORD_FILE=”/run/secrets/mariadb_root_password”\\ -eMARIADB_PASSWORD_FILE=”/run/secrets/mariadb_password”\\ -eMARIADB_USER=”python”\\ -eMARIADB_DATABASE=”python”\\</p>\n<p>Python实例再次使用您创建的专用网络，并复制网络中可访问的秘密。一个更好的（生产就绪的）选项将是创建您的应用程序在管理程序中需要的数据库，而不会给应用程序访问根密码，但这仅仅是一个例子。</p>\n<p>dockerservicecreate\\ –namecspython\\ –replicas1\\ –networkmariadb_private\\ –publish50000:5000\\ –mounttype=volume,source=pydata,destination=/var/www/html\\ –secretsource=mariadb_root_password,target=python_root_password,mode=0400\\ –secretsource=mariadb_password,target=python_password,mode=0400\\ -ePYTHON_DB_USER=”python”\\ -ePYTHON_DB_ROOT_PASSWORD_FILE=”/run/secrets/python_root_password”\\ -ePYTHON_DB_PASSWORD_FILE=”/run/secrets/python_password”\\ -ePYTHON_DB_HOST=”mariadb:3306”\\ -ePYTHON_DB_NAME=”python”\\</p>\n<p>上面的示例使用我创建的一个简单的Docker映像，它设置用于使用Flask创建Web应用程序的软件包，用于提供Web页面和PyMySQL来进行数据库访问。代码没有做太多，但显示了如何从Docker容器访问环境变量。</p>\n<p>例如，要连接到没有指定数据库的数据库服务器：</p>\n<p>importos importMySQLdb db=MySQLdb.connect(host=os.environ[‘PYTHON_DB_HOST’], user=os.environ[‘PYTHON_DB_ROOT_USER’], passwd=os.environ[‘PYTHON_DB_PASSWORD_FILE’]) cur=db.cursor() print(db) db.close()</p>\n<p>更新secrets</p>\n<p>频繁更改敏感信息是个好习惯。但是，您可能知道，在应用程序中更新这些细节是一个沉闷的过程，最不愿意避免。通过服务，Docker Secrets管理允许您更改值，而无需更改代码。</p>\n<p>创建一个新秘密：</p>\n<p>opensslrand-base6420|dockersecretcreatemariadb_password_march-</p>\n<p>从MariaDB服务中删除当前密码的访问权限：</p>\n<p>dockerserviceupdate\\ –secret-rmmariadb_password\\</p>\n<p>并让它访问新的秘密，将目标指向新的值：</p>\n<p>dockerserviceupdate\\ –secret-addsource=mariadb_password_march,target=mysql_password\\</p>\n<p>更新Python服务：</p>\n<p>dockerserviceupdate\\ –secret-rmmariadb_password\\ –secret-addsource=mariadb_password_march,target=python_password,mode=0400\\</p>\n<p>并删除旧秘密：</p>\n<p>dockersecretrmmariadb_password</p>\n<h3 id=\"扩展说明\"><a href=\"#扩展说明\" class=\"headerlink\" title=\"扩展说明\"></a>扩展说明</h3><p>Docker Secrets是一个新功能，但Docker鼓励镜像维护人员尽快为Docker用户提供更好的安全性。这需要允许与上述示例类似的过程，其中容器可以从通过生成秘密而不是硬编码到应用中创建的文件来读取其需要的每个参数。这可以强制实施集装箱应用程序，因为容器可以来回走动，但是始终可以访问您的应用程序运行所需的重要信息。</p>\n","site":{"data":{}},"excerpt":"<p>我相信当我们意识到重要且敏感的访问信息已经暴露到公共网络上，并可能使您的微服务无条件被访问。随着我们依赖于的开发出来的服务化的量不断增加， 这时跟踪敏感细节的数量也有所增加。为了应对这个问题，在“secrets managemen”领域出现了工具。</p><p>在这篇文章中，我们将看Docker Secrets，要求在Docker 1.13及更高版本的新秘密管理功能。</p>","more":"\n\n<p>从Docker的角度来看，该功能不需要太多的工作，但是您可能需要重构应用程序以利用它。我们将介绍如何做到这一点的想法，但不是详细的。</p>\n<p>Docker的 Secrets只适用于Docker群集，主要是因为这是秘密管理最有意义的领域。毕竟，Swarm是针对多个Docker实例需要在他们之间共享访问细节的生产用途。如果要在独立容器中使用秘密管理，则需要运行</p>\n<p>scale值设置为1 的容器。适用于Mac和Windows的Docker不支持多节点群集模式，但您可以使用它们使用Docker Machine创建多节点群集。</p>\n<p>创建两个机器，然后创建一个两个节点，并从该组中的一个swarm环境中运行本文中的案例。</p>\n<h3 id=\"获得Secrets\"><a href=\"#获得Secrets\" class=\"headerlink\" title=\"获得Secrets\"></a>获得Secrets</h3><p>当您从命令行创建Secrets时，您可以使用所有可用的工具来创建随机密码和管道输出。例如，为数据库用户创建一个随机密码：</p>\n<p>opensslrand-base6420|dockersecretcreatemariadb_password-</p>\n<p>这将返回一个秘密的ID。</p>\n<p>您需要再次发出此命令以生成MariaDB root用户的密码。您将需要这样才能开始使用，但您不需要为每项服务。</p>\n<p>opensslrand-base6420|dockersecretcreatemariadb_root_password-</p>\n<p>如果你已经忘记了你创建的秘密， 可以用ls查看，也可以用以下命令查看docker secret ls</p>\n<h3 id=\"替换secrets\"><a href=\"#替换secrets\" class=\"headerlink\" title=\"替换secrets\"></a>替换secrets</h3><p>为了保持秘密，良好的秘密，服务之间的通信发生在您定义的覆盖网络中。它们只能通过调用其ID来在该覆盖网络中使用。</p>\n<p>dockernetworkcreate-doverlaymariadb_private</p>\n<p>这也将返回该网络的ID。再次，你可以docker network ls查看相关网络</p>\n<h3 id=\"创建服务\"><a href=\"#创建服务\" class=\"headerlink\" title=\"创建服务\"></a>创建服务</h3><p>这个例子将有一个Docker节点运行MariaDB，一个运行Python的节点。在最终的应用程序中，Python应用程序将读取和写入数据库。</p>\n<p>首先，添加一个MariaDB服务。此服务使用您创建的网络进行通信，之前创建的秘密保存为两个文件：一个用于根密码，一个用于默认用户密码。然后将所需的所有变量作为环境变量传递给服务。</p>\n<p>dockerservicecreate\\ –namemariadb\\ –replicas1\\ –networkmariadb_private\\ –mounttype=volume,source=mydata,destination=/var/lib/mariadb\\ –secretsource=mariadb_root_password,target=mariadb_root_password\\ –secretsource=mariadb_password,target=mariadb_password\\ -eMARIADB_ROOT_PASSWORD_FILE=”/run/secrets/mariadb_root_password”\\ -eMARIADB_PASSWORD_FILE=”/run/secrets/mariadb_password”\\ -eMARIADB_USER=”python”\\ -eMARIADB_DATABASE=”python”\\</p>\n<p>Python实例再次使用您创建的专用网络，并复制网络中可访问的秘密。一个更好的（生产就绪的）选项将是创建您的应用程序在管理程序中需要的数据库，而不会给应用程序访问根密码，但这仅仅是一个例子。</p>\n<p>dockerservicecreate\\ –namecspython\\ –replicas1\\ –networkmariadb_private\\ –publish50000:5000\\ –mounttype=volume,source=pydata,destination=/var/www/html\\ –secretsource=mariadb_root_password,target=python_root_password,mode=0400\\ –secretsource=mariadb_password,target=python_password,mode=0400\\ -ePYTHON_DB_USER=”python”\\ -ePYTHON_DB_ROOT_PASSWORD_FILE=”/run/secrets/python_root_password”\\ -ePYTHON_DB_PASSWORD_FILE=”/run/secrets/python_password”\\ -ePYTHON_DB_HOST=”mariadb:3306”\\ -ePYTHON_DB_NAME=”python”\\</p>\n<p>上面的示例使用我创建的一个简单的Docker映像，它设置用于使用Flask创建Web应用程序的软件包，用于提供Web页面和PyMySQL来进行数据库访问。代码没有做太多，但显示了如何从Docker容器访问环境变量。</p>\n<p>例如，要连接到没有指定数据库的数据库服务器：</p>\n<p>importos importMySQLdb db=MySQLdb.connect(host=os.environ[‘PYTHON_DB_HOST’], user=os.environ[‘PYTHON_DB_ROOT_USER’], passwd=os.environ[‘PYTHON_DB_PASSWORD_FILE’]) cur=db.cursor() print(db) db.close()</p>\n<p>更新secrets</p>\n<p>频繁更改敏感信息是个好习惯。但是，您可能知道，在应用程序中更新这些细节是一个沉闷的过程，最不愿意避免。通过服务，Docker Secrets管理允许您更改值，而无需更改代码。</p>\n<p>创建一个新秘密：</p>\n<p>opensslrand-base6420|dockersecretcreatemariadb_password_march-</p>\n<p>从MariaDB服务中删除当前密码的访问权限：</p>\n<p>dockerserviceupdate\\ –secret-rmmariadb_password\\</p>\n<p>并让它访问新的秘密，将目标指向新的值：</p>\n<p>dockerserviceupdate\\ –secret-addsource=mariadb_password_march,target=mysql_password\\</p>\n<p>更新Python服务：</p>\n<p>dockerserviceupdate\\ –secret-rmmariadb_password\\ –secret-addsource=mariadb_password_march,target=python_password,mode=0400\\</p>\n<p>并删除旧秘密：</p>\n<p>dockersecretrmmariadb_password</p>\n<h3 id=\"扩展说明\"><a href=\"#扩展说明\" class=\"headerlink\" title=\"扩展说明\"></a>扩展说明</h3><p>Docker Secrets是一个新功能，但Docker鼓励镜像维护人员尽快为Docker用户提供更好的安全性。这需要允许与上述示例类似的过程，其中容器可以从通过生成秘密而不是硬编码到应用中创建的文件来读取其需要的每个参数。这可以强制实施集装箱应用程序，因为容器可以来回走动，但是始终可以访问您的应用程序运行所需的重要信息。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Apr 25 2018 20:46:59 GMT+0800 (GMT+08:00)","title":"Docker的Secrets管理","path":"2017/05/18/Docker的Secrets管理/","eyeCatchImage":null,"excerpt":null,"date":"2017-05-18T12:41:58.000Z","pv":0,"totalPV":0,"categories":"Essay","tags":["Docker"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":3077},{"title":"Git Commit message 的写法规范之《Angular 规范》","date":"2017-04-11T12:47:40.000Z","_content":" > 目前，社区有多种 Commit message 的写法规范。本文介绍[《Angular 规范》](https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0)，这是目前使用最广的写法，比较合理和系统化，并且有配套的工具。 \n\n# 一、Commit message 的作用\n\n格式化的Commit message，有几个好处。\n\n## （1）提供更多的历史信息，方便快速浏览。\n\n比如，下面的命令显示上次发布后的变动，每个commit占据一行。你只看行首，就知道某次 commit 的目的。\n\n```\n$ git log <last tag> HEAD --pretty=format:%s\n```\n\n## （2）可以过滤某些commit（比如文档改动），便于快速查找信息。\n\n比如，下面的命令仅仅显示本次发布新增加的功能。\n\n```\n$ git log <last release> HEAD --grep feature\n```\n\n## （3）可以直接从commit生成Change log。\n\nChange Log 是发布新版本时，用来说明与上一个版本差异的文档，详见后文。\n\n# 二、Commit message 的格式\n\n每次提交，Commit message 都包括三个部分：Header，Body 和 Footer。\n\n```\n<type>(<scope>): <subject>\n// 空一行\n<body>\n// 空一行\n<footer>\n```\n\n其中，Header 是必需的，Body 和 Footer 可以省略。\n不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观。\n\n## 2.1 Header\n\nHeader部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）。\n\n### （1）type\n\n* type用于说明 commit 的类别，只允许使用下面7个标识。\n* feat：新功能（feature）\n* fix：修补bug\n* docs：文档（documentation）\n* style： 格式（不影响代码运行的变动）\n* refactor：重构（即不是新增功能，也不是修改bug的代码变动）\n* test：增加测试\n* chore：构建过程或辅助工具的变动\n\n如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要。\n\n### （2）scope\n\nscope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。\n\n### （3）subject\n\nsubject是 commit 目的的简短描述，不超过50个字符。\n以动词开头，使用第一人称现在时，比如change，而不是changed或changes\n第一个字母小写\n结尾不加句号（.）\n\n## 2.2 Body\n\nBody 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。\n\n```\nMore detailed explanatory text, if necessary.  Wrap it to \nabout 72 characters or so. \n\nFurther paragraphs come after blank lines.\n\n- Bullet points are okay, too\n- Use a hanging indent\n```\n\n有两个注意点。\n（1）使用第一人称现在时，比如使用change而不是changed或changes。\n（2）应该说明代码变动的动机，以及与以前行为的对比。\n\n## 2.3 Footer\n\nFooter 部分只用于两种情况。\n\n### （1）不兼容变动\n\n如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法。\n\n```\nBREAKING CHANGE: isolate scope bindings definition has changed.\n\n    To migrate the code follow the example below:\n\n    Before:\n\n    scope: {\n      myAttr: 'attribute',\n    }\n\n    After:\n\n    scope: {\n      myAttr: '@',\n    }\n\n    The removed `inject` wasn't generaly useful for directives so there should be no code using it.\n```\n\n### （2）关闭 Issue\n\n如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。\n\n```\nCloses #234\n```\n\n也可以一次关闭多个 issue 。\n\n```\nCloses #123, #245, #992\n```\n\n## 2.4 Revert\n\n还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以revert:开头，后面跟着被撤销 Commit 的 Header。\n\n```\nrevert: feat(pencil): add 'graphiteWidth' option\n\nThis reverts commit 667ecc1654a317a13331b17617d973392f415f02.\n```\n\nBody部分的格式是固定的，必须写成This reverts commit &lt;hash>.，其中的hash是被撤销 commit 的 SHA 标识符。\n如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的Reverts小标题下面。\n\n# 三、Commitizen\n\nCommitizen是一个撰写合格 Commit message 的工具。\n安装命令如下。\n\n```\n$ npm install -g commitizen\n```\n\n然后，在项目目录里，运行下面的命令，使其支持 Angular 的 Commit message 格式。\n\n```\n$ commitizen init cz-conventional-changelog --save --save-exact\n```\n\n以后，凡是用到git commit命令，一律改为使用git cz。这时，就会出现选项，用来生成符合格式的 Commit message。\n\n# 四、validate-commit-msg\n\nvalidate-commit-msg 用于检查 Node 项目的 Commit message 是否符合格式。\n它的安装是手动的。首先，拷贝下面这个JS文件，放入你的代码库。文件名可以取为validate-commit-msg.js。\n接着，把这个脚本加入 Git 的 hook。下面是在package.json里面使用 ghooks，把这个脚本加为commit-msg时运行。\n\n```\n  \"config\": {\n    \"ghooks\": {\n      \"commit-msg\": \"./validate-commit-msg.js\"\n    }\n  }\n```\n\n然后，每次git commit的时候，这个脚本就会自动检查 Commit message 是否合格。如果不合格，就会报错。\n\n```\n$ git add -A \n$ git commit -m \"edit markdown\" \nINVALID COMMIT MSG: does not match \"<type>(<scope>): <subject>\" ! was: edit markdown\n```\n\n# 五、生成 Change log\n\n如果你的所有 Commit 都符合 Angular 格式，那么发布新版本时， Change log 就可以用脚本自动生成（例1，例2，例3）。\n生成的文档包括以下三个部分。\n\n```\nNew features\nBug fixes\nBreaking changes.\n```\n\n每个部分都会罗列相关的 commit ，并且有指向这些 commit 的链接。当然，生成的文档允许手动修改，所以发布前，你还可以添加其他内容。\nconventional-changelog 就是生成 Change log 的工具，运行下面的命令即可。\n\n```\n$ npm install -g conventional-changelog\n$ cd my-project\n$ conventional-changelog -p angular -i CHANGELOG.md -w\n```\n\n上面命令不会覆盖以前的 Change log，只会在CHANGELOG.md的头部加上自从上次发布以来的变动。\n如果你想生成所有发布的 Change log，要改为运行下面的命令。\n\n```\n$ conventional-changelog -p angular -i CHANGELOG.md -w -r 0\n```\n\n为了方便使用，可以将其写入package.json的scripts字段。\n\n```\n{\n  \"scripts\": {\n    \"changelog\": \"conventional-changelog -p angular -i CHANGELOG.md -w -r 0\"\n  }\n}\n```\n\n以后，直接运行下面的命令即可。\n\n```\n$ npm run changelog\n```\n\n---\n\n> 转自http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html\n\n---","source":"_posts/Git-Commit-message-的写法规范之《Angular-规范》.md","raw":"---\ntitle: Git Commit message 的写法规范之《Angular 规范》\ndate: 2017-04-11 20:47:40\ntags: Git\ncategories: Essay\n---\n > 目前，社区有多种 Commit message 的写法规范。本文介绍[《Angular 规范》](https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0)，这是目前使用最广的写法，比较合理和系统化，并且有配套的工具。 \n\n# 一、Commit message 的作用\n\n格式化的Commit message，有几个好处。\n\n## （1）提供更多的历史信息，方便快速浏览。\n\n比如，下面的命令显示上次发布后的变动，每个commit占据一行。你只看行首，就知道某次 commit 的目的。\n\n```\n$ git log <last tag> HEAD --pretty=format:%s\n```\n\n## （2）可以过滤某些commit（比如文档改动），便于快速查找信息。\n\n比如，下面的命令仅仅显示本次发布新增加的功能。\n\n```\n$ git log <last release> HEAD --grep feature\n```\n\n## （3）可以直接从commit生成Change log。\n\nChange Log 是发布新版本时，用来说明与上一个版本差异的文档，详见后文。\n\n# 二、Commit message 的格式\n\n每次提交，Commit message 都包括三个部分：Header，Body 和 Footer。\n\n```\n<type>(<scope>): <subject>\n// 空一行\n<body>\n// 空一行\n<footer>\n```\n\n其中，Header 是必需的，Body 和 Footer 可以省略。\n不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观。\n\n## 2.1 Header\n\nHeader部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）。\n\n### （1）type\n\n* type用于说明 commit 的类别，只允许使用下面7个标识。\n* feat：新功能（feature）\n* fix：修补bug\n* docs：文档（documentation）\n* style： 格式（不影响代码运行的变动）\n* refactor：重构（即不是新增功能，也不是修改bug的代码变动）\n* test：增加测试\n* chore：构建过程或辅助工具的变动\n\n如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要。\n\n### （2）scope\n\nscope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。\n\n### （3）subject\n\nsubject是 commit 目的的简短描述，不超过50个字符。\n以动词开头，使用第一人称现在时，比如change，而不是changed或changes\n第一个字母小写\n结尾不加句号（.）\n\n## 2.2 Body\n\nBody 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。\n\n```\nMore detailed explanatory text, if necessary.  Wrap it to \nabout 72 characters or so. \n\nFurther paragraphs come after blank lines.\n\n- Bullet points are okay, too\n- Use a hanging indent\n```\n\n有两个注意点。\n（1）使用第一人称现在时，比如使用change而不是changed或changes。\n（2）应该说明代码变动的动机，以及与以前行为的对比。\n\n## 2.3 Footer\n\nFooter 部分只用于两种情况。\n\n### （1）不兼容变动\n\n如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法。\n\n```\nBREAKING CHANGE: isolate scope bindings definition has changed.\n\n    To migrate the code follow the example below:\n\n    Before:\n\n    scope: {\n      myAttr: 'attribute',\n    }\n\n    After:\n\n    scope: {\n      myAttr: '@',\n    }\n\n    The removed `inject` wasn't generaly useful for directives so there should be no code using it.\n```\n\n### （2）关闭 Issue\n\n如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。\n\n```\nCloses #234\n```\n\n也可以一次关闭多个 issue 。\n\n```\nCloses #123, #245, #992\n```\n\n## 2.4 Revert\n\n还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以revert:开头，后面跟着被撤销 Commit 的 Header。\n\n```\nrevert: feat(pencil): add 'graphiteWidth' option\n\nThis reverts commit 667ecc1654a317a13331b17617d973392f415f02.\n```\n\nBody部分的格式是固定的，必须写成This reverts commit &lt;hash>.，其中的hash是被撤销 commit 的 SHA 标识符。\n如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的Reverts小标题下面。\n\n# 三、Commitizen\n\nCommitizen是一个撰写合格 Commit message 的工具。\n安装命令如下。\n\n```\n$ npm install -g commitizen\n```\n\n然后，在项目目录里，运行下面的命令，使其支持 Angular 的 Commit message 格式。\n\n```\n$ commitizen init cz-conventional-changelog --save --save-exact\n```\n\n以后，凡是用到git commit命令，一律改为使用git cz。这时，就会出现选项，用来生成符合格式的 Commit message。\n\n# 四、validate-commit-msg\n\nvalidate-commit-msg 用于检查 Node 项目的 Commit message 是否符合格式。\n它的安装是手动的。首先，拷贝下面这个JS文件，放入你的代码库。文件名可以取为validate-commit-msg.js。\n接着，把这个脚本加入 Git 的 hook。下面是在package.json里面使用 ghooks，把这个脚本加为commit-msg时运行。\n\n```\n  \"config\": {\n    \"ghooks\": {\n      \"commit-msg\": \"./validate-commit-msg.js\"\n    }\n  }\n```\n\n然后，每次git commit的时候，这个脚本就会自动检查 Commit message 是否合格。如果不合格，就会报错。\n\n```\n$ git add -A \n$ git commit -m \"edit markdown\" \nINVALID COMMIT MSG: does not match \"<type>(<scope>): <subject>\" ! was: edit markdown\n```\n\n# 五、生成 Change log\n\n如果你的所有 Commit 都符合 Angular 格式，那么发布新版本时， Change log 就可以用脚本自动生成（例1，例2，例3）。\n生成的文档包括以下三个部分。\n\n```\nNew features\nBug fixes\nBreaking changes.\n```\n\n每个部分都会罗列相关的 commit ，并且有指向这些 commit 的链接。当然，生成的文档允许手动修改，所以发布前，你还可以添加其他内容。\nconventional-changelog 就是生成 Change log 的工具，运行下面的命令即可。\n\n```\n$ npm install -g conventional-changelog\n$ cd my-project\n$ conventional-changelog -p angular -i CHANGELOG.md -w\n```\n\n上面命令不会覆盖以前的 Change log，只会在CHANGELOG.md的头部加上自从上次发布以来的变动。\n如果你想生成所有发布的 Change log，要改为运行下面的命令。\n\n```\n$ conventional-changelog -p angular -i CHANGELOG.md -w -r 0\n```\n\n为了方便使用，可以将其写入package.json的scripts字段。\n\n```\n{\n  \"scripts\": {\n    \"changelog\": \"conventional-changelog -p angular -i CHANGELOG.md -w -r 0\"\n  }\n}\n```\n\n以后，直接运行下面的命令即可。\n\n```\n$ npm run changelog\n```\n\n---\n\n> 转自http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html\n\n---","slug":"Git-Commit-message-的写法规范之《Angular-规范》","published":1,"updated":"2018-04-25T12:46:59.494Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2fj0nol000dq4vg97u4cqd5","content":"<blockquote>\n<p>目前，社区有多种 Commit message 的写法规范。本文介绍<a href=\"https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0\" target=\"_blank\" rel=\"noopener\">《Angular 规范》</a>，这是目前使用最广的写法，比较合理和系统化，并且有配套的工具。 </p>\n</blockquote><h1 id=\"一、Commit-message-的作用\"><a href=\"#一、Commit-message-的作用\" class=\"headerlink\" title=\"一、Commit message 的作用\"></a>一、Commit message 的作用</h1><p>格式化的Commit message，有几个好处。</p><h2 id=\"（1）提供更多的历史信息，方便快速浏览。\"><a href=\"#（1）提供更多的历史信息，方便快速浏览。\" class=\"headerlink\" title=\"（1）提供更多的历史信息，方便快速浏览。\"></a>（1）提供更多的历史信息，方便快速浏览。</h2><p>比如，下面的命令显示上次发布后的变动，每个commit占据一行。你只看行首，就知道某次 commit 的目的。</p><a id=\"more\"></a>\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log &lt;last tag&gt; HEAD --pretty=format:%s</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"（2）可以过滤某些commit（比如文档改动），便于快速查找信息。\"><a href=\"#（2）可以过滤某些commit（比如文档改动），便于快速查找信息。\" class=\"headerlink\" title=\"（2）可以过滤某些commit（比如文档改动），便于快速查找信息。\"></a>（2）可以过滤某些commit（比如文档改动），便于快速查找信息。</h2><p>比如，下面的命令仅仅显示本次发布新增加的功能。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log &lt;last release&gt; HEAD --grep feature</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"（3）可以直接从commit生成Change-log。\"><a href=\"#（3）可以直接从commit生成Change-log。\" class=\"headerlink\" title=\"（3）可以直接从commit生成Change log。\"></a>（3）可以直接从commit生成Change log。</h2><p>Change Log 是发布新版本时，用来说明与上一个版本差异的文档，详见后文。</p>\n<h1 id=\"二、Commit-message-的格式\"><a href=\"#二、Commit-message-的格式\" class=\"headerlink\" title=\"二、Commit message 的格式\"></a>二、Commit message 的格式</h1><p>每次提交，Commit message 都包括三个部分：Header，Body 和 Footer。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class=\"line\">// 空一行</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">// 空一行</span><br><span class=\"line\">&lt;footer&gt;</span><br></pre></td></tr></table></figure>\n\n<p>其中，Header 是必需的，Body 和 Footer 可以省略。<br>不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观。</p>\n<h2 id=\"2-1-Header\"><a href=\"#2-1-Header\" class=\"headerlink\" title=\"2.1 Header\"></a>2.1 Header</h2><p>Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）。</p>\n<h3 id=\"（1）type\"><a href=\"#（1）type\" class=\"headerlink\" title=\"（1）type\"></a>（1）type</h3><ul>\n<li>type用于说明 commit 的类别，只允许使用下面7个标识。</li>\n<li>feat：新功能（feature）</li>\n<li>fix：修补bug</li>\n<li>docs：文档（documentation）</li>\n<li>style： 格式（不影响代码运行的变动）</li>\n<li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li>\n<li>test：增加测试</li>\n<li>chore：构建过程或辅助工具的变动</li>\n</ul>\n<p>如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要。</p>\n<h3 id=\"（2）scope\"><a href=\"#（2）scope\" class=\"headerlink\" title=\"（2）scope\"></a>（2）scope</h3><p>scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p>\n<h3 id=\"（3）subject\"><a href=\"#（3）subject\" class=\"headerlink\" title=\"（3）subject\"></a>（3）subject</h3><p>subject是 commit 目的的简短描述，不超过50个字符。<br>以动词开头，使用第一人称现在时，比如change，而不是changed或changes<br>第一个字母小写<br>结尾不加句号（.）</p>\n<h2 id=\"2-2-Body\"><a href=\"#2-2-Body\" class=\"headerlink\" title=\"2.2 Body\"></a>2.2 Body</h2><p>Body 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">More detailed explanatory text, if necessary.  Wrap it to </span><br><span class=\"line\">about 72 characters or so. </span><br><span class=\"line\"></span><br><span class=\"line\">Further paragraphs come after blank lines.</span><br><span class=\"line\"></span><br><span class=\"line\">- Bullet points are okay, too</span><br><span class=\"line\">- Use a hanging indent</span><br></pre></td></tr></table></figure>\n\n<p>有两个注意点。<br>（1）使用第一人称现在时，比如使用change而不是changed或changes。<br>（2）应该说明代码变动的动机，以及与以前行为的对比。</p>\n<h2 id=\"2-3-Footer\"><a href=\"#2-3-Footer\" class=\"headerlink\" title=\"2.3 Footer\"></a>2.3 Footer</h2><p>Footer 部分只用于两种情况。</p>\n<h3 id=\"（1）不兼容变动\"><a href=\"#（1）不兼容变动\" class=\"headerlink\" title=\"（1）不兼容变动\"></a>（1）不兼容变动</h3><p>如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BREAKING CHANGE: isolate scope bindings definition has changed.</span><br><span class=\"line\"></span><br><span class=\"line\">    To migrate the code follow the example below:</span><br><span class=\"line\"></span><br><span class=\"line\">    Before:</span><br><span class=\"line\"></span><br><span class=\"line\">    scope: &#123;</span><br><span class=\"line\">      myAttr: &apos;attribute&apos;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    After:</span><br><span class=\"line\"></span><br><span class=\"line\">    scope: &#123;</span><br><span class=\"line\">      myAttr: &apos;@&apos;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    The removed `inject` wasn&apos;t generaly useful for directives so there should be no code using it.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"（2）关闭-Issue\"><a href=\"#（2）关闭-Issue\" class=\"headerlink\" title=\"（2）关闭 Issue\"></a>（2）关闭 Issue</h3><p>如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Closes #234</span><br></pre></td></tr></table></figure>\n\n<p>也可以一次关闭多个 issue 。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Closes #123, #245, #992</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-4-Revert\"><a href=\"#2-4-Revert\" class=\"headerlink\" title=\"2.4 Revert\"></a>2.4 Revert</h2><p>还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以revert:开头，后面跟着被撤销 Commit 的 Header。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">revert: feat(pencil): add &apos;graphiteWidth&apos; option</span><br><span class=\"line\"></span><br><span class=\"line\">This reverts commit 667ecc1654a317a13331b17617d973392f415f02.</span><br></pre></td></tr></table></figure>\n\n<p>Body部分的格式是固定的，必须写成This reverts commit &lt;hash&gt;.，其中的hash是被撤销 commit 的 SHA 标识符。<br>如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的Reverts小标题下面。</p>\n<h1 id=\"三、Commitizen\"><a href=\"#三、Commitizen\" class=\"headerlink\" title=\"三、Commitizen\"></a>三、Commitizen</h1><p>Commitizen是一个撰写合格 Commit message 的工具。<br>安装命令如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g commitizen</span><br></pre></td></tr></table></figure>\n\n<p>然后，在项目目录里，运行下面的命令，使其支持 Angular 的 Commit message 格式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ commitizen init cz-conventional-changelog --save --save-exact</span><br></pre></td></tr></table></figure>\n\n<p>以后，凡是用到git commit命令，一律改为使用git cz。这时，就会出现选项，用来生成符合格式的 Commit message。</p>\n<h1 id=\"四、validate-commit-msg\"><a href=\"#四、validate-commit-msg\" class=\"headerlink\" title=\"四、validate-commit-msg\"></a>四、validate-commit-msg</h1><p>validate-commit-msg 用于检查 Node 项目的 Commit message 是否符合格式。<br>它的安装是手动的。首先，拷贝下面这个JS文件，放入你的代码库。文件名可以取为validate-commit-msg.js。<br>接着，把这个脚本加入 Git 的 hook。下面是在package.json里面使用 ghooks，把这个脚本加为commit-msg时运行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;config&quot;: &#123;</span><br><span class=\"line\">  &quot;ghooks&quot;: &#123;</span><br><span class=\"line\">    &quot;commit-msg&quot;: &quot;./validate-commit-msg.js&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后，每次git commit的时候，这个脚本就会自动检查 Commit message 是否合格。如果不合格，就会报错。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add -A </span><br><span class=\"line\">$ git commit -m &quot;edit markdown&quot; </span><br><span class=\"line\">INVALID COMMIT MSG: does not match &quot;&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;&quot; ! was: edit markdown</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"五、生成-Change-log\"><a href=\"#五、生成-Change-log\" class=\"headerlink\" title=\"五、生成 Change log\"></a>五、生成 Change log</h1><p>如果你的所有 Commit 都符合 Angular 格式，那么发布新版本时， Change log 就可以用脚本自动生成（例1，例2，例3）。<br>生成的文档包括以下三个部分。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">New features</span><br><span class=\"line\">Bug fixes</span><br><span class=\"line\">Breaking changes.</span><br></pre></td></tr></table></figure>\n\n<p>每个部分都会罗列相关的 commit ，并且有指向这些 commit 的链接。当然，生成的文档允许手动修改，所以发布前，你还可以添加其他内容。<br>conventional-changelog 就是生成 Change log 的工具，运行下面的命令即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g conventional-changelog</span><br><span class=\"line\">$ cd my-project</span><br><span class=\"line\">$ conventional-changelog -p angular -i CHANGELOG.md -w</span><br></pre></td></tr></table></figure>\n\n<p>上面命令不会覆盖以前的 Change log，只会在CHANGELOG.md的头部加上自从上次发布以来的变动。<br>如果你想生成所有发布的 Change log，要改为运行下面的命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ conventional-changelog -p angular -i CHANGELOG.md -w -r 0</span><br></pre></td></tr></table></figure>\n\n<p>为了方便使用，可以将其写入package.json的scripts字段。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;changelog&quot;: &quot;conventional-changelog -p angular -i CHANGELOG.md -w -r 0&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以后，直接运行下面的命令即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm run changelog</span><br></pre></td></tr></table></figure>\n\n<hr>\n<blockquote>\n<p>转自<a href=\"http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html</a></p>\n</blockquote>\n<hr>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>目前，社区有多种 Commit message 的写法规范。本文介绍<a href=\"https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0\" target=\"_blank\" rel=\"noopener\">《Angular 规范》</a>，这是目前使用最广的写法，比较合理和系统化，并且有配套的工具。 </p>\n</blockquote><h1 id=\"一、Commit-message-的作用\"><a href=\"#一、Commit-message-的作用\" class=\"headerlink\" title=\"一、Commit message 的作用\"></a>一、Commit message 的作用</h1><p>格式化的Commit message，有几个好处。</p><h2 id=\"（1）提供更多的历史信息，方便快速浏览。\"><a href=\"#（1）提供更多的历史信息，方便快速浏览。\" class=\"headerlink\" title=\"（1）提供更多的历史信息，方便快速浏览。\"></a>（1）提供更多的历史信息，方便快速浏览。</h2><p>比如，下面的命令显示上次发布后的变动，每个commit占据一行。你只看行首，就知道某次 commit 的目的。</p>","more":"\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log &lt;last tag&gt; HEAD --pretty=format:%s</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"（2）可以过滤某些commit（比如文档改动），便于快速查找信息。\"><a href=\"#（2）可以过滤某些commit（比如文档改动），便于快速查找信息。\" class=\"headerlink\" title=\"（2）可以过滤某些commit（比如文档改动），便于快速查找信息。\"></a>（2）可以过滤某些commit（比如文档改动），便于快速查找信息。</h2><p>比如，下面的命令仅仅显示本次发布新增加的功能。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log &lt;last release&gt; HEAD --grep feature</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"（3）可以直接从commit生成Change-log。\"><a href=\"#（3）可以直接从commit生成Change-log。\" class=\"headerlink\" title=\"（3）可以直接从commit生成Change log。\"></a>（3）可以直接从commit生成Change log。</h2><p>Change Log 是发布新版本时，用来说明与上一个版本差异的文档，详见后文。</p>\n<h1 id=\"二、Commit-message-的格式\"><a href=\"#二、Commit-message-的格式\" class=\"headerlink\" title=\"二、Commit message 的格式\"></a>二、Commit message 的格式</h1><p>每次提交，Commit message 都包括三个部分：Header，Body 和 Footer。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class=\"line\">// 空一行</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">// 空一行</span><br><span class=\"line\">&lt;footer&gt;</span><br></pre></td></tr></table></figure>\n\n<p>其中，Header 是必需的，Body 和 Footer 可以省略。<br>不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观。</p>\n<h2 id=\"2-1-Header\"><a href=\"#2-1-Header\" class=\"headerlink\" title=\"2.1 Header\"></a>2.1 Header</h2><p>Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）。</p>\n<h3 id=\"（1）type\"><a href=\"#（1）type\" class=\"headerlink\" title=\"（1）type\"></a>（1）type</h3><ul>\n<li>type用于说明 commit 的类别，只允许使用下面7个标识。</li>\n<li>feat：新功能（feature）</li>\n<li>fix：修补bug</li>\n<li>docs：文档（documentation）</li>\n<li>style： 格式（不影响代码运行的变动）</li>\n<li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li>\n<li>test：增加测试</li>\n<li>chore：构建过程或辅助工具的变动</li>\n</ul>\n<p>如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要。</p>\n<h3 id=\"（2）scope\"><a href=\"#（2）scope\" class=\"headerlink\" title=\"（2）scope\"></a>（2）scope</h3><p>scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p>\n<h3 id=\"（3）subject\"><a href=\"#（3）subject\" class=\"headerlink\" title=\"（3）subject\"></a>（3）subject</h3><p>subject是 commit 目的的简短描述，不超过50个字符。<br>以动词开头，使用第一人称现在时，比如change，而不是changed或changes<br>第一个字母小写<br>结尾不加句号（.）</p>\n<h2 id=\"2-2-Body\"><a href=\"#2-2-Body\" class=\"headerlink\" title=\"2.2 Body\"></a>2.2 Body</h2><p>Body 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">More detailed explanatory text, if necessary.  Wrap it to </span><br><span class=\"line\">about 72 characters or so. </span><br><span class=\"line\"></span><br><span class=\"line\">Further paragraphs come after blank lines.</span><br><span class=\"line\"></span><br><span class=\"line\">- Bullet points are okay, too</span><br><span class=\"line\">- Use a hanging indent</span><br></pre></td></tr></table></figure>\n\n<p>有两个注意点。<br>（1）使用第一人称现在时，比如使用change而不是changed或changes。<br>（2）应该说明代码变动的动机，以及与以前行为的对比。</p>\n<h2 id=\"2-3-Footer\"><a href=\"#2-3-Footer\" class=\"headerlink\" title=\"2.3 Footer\"></a>2.3 Footer</h2><p>Footer 部分只用于两种情况。</p>\n<h3 id=\"（1）不兼容变动\"><a href=\"#（1）不兼容变动\" class=\"headerlink\" title=\"（1）不兼容变动\"></a>（1）不兼容变动</h3><p>如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BREAKING CHANGE: isolate scope bindings definition has changed.</span><br><span class=\"line\"></span><br><span class=\"line\">    To migrate the code follow the example below:</span><br><span class=\"line\"></span><br><span class=\"line\">    Before:</span><br><span class=\"line\"></span><br><span class=\"line\">    scope: &#123;</span><br><span class=\"line\">      myAttr: &apos;attribute&apos;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    After:</span><br><span class=\"line\"></span><br><span class=\"line\">    scope: &#123;</span><br><span class=\"line\">      myAttr: &apos;@&apos;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    The removed `inject` wasn&apos;t generaly useful for directives so there should be no code using it.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"（2）关闭-Issue\"><a href=\"#（2）关闭-Issue\" class=\"headerlink\" title=\"（2）关闭 Issue\"></a>（2）关闭 Issue</h3><p>如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Closes #234</span><br></pre></td></tr></table></figure>\n\n<p>也可以一次关闭多个 issue 。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Closes #123, #245, #992</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-4-Revert\"><a href=\"#2-4-Revert\" class=\"headerlink\" title=\"2.4 Revert\"></a>2.4 Revert</h2><p>还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以revert:开头，后面跟着被撤销 Commit 的 Header。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">revert: feat(pencil): add &apos;graphiteWidth&apos; option</span><br><span class=\"line\"></span><br><span class=\"line\">This reverts commit 667ecc1654a317a13331b17617d973392f415f02.</span><br></pre></td></tr></table></figure>\n\n<p>Body部分的格式是固定的，必须写成This reverts commit &lt;hash&gt;.，其中的hash是被撤销 commit 的 SHA 标识符。<br>如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的Reverts小标题下面。</p>\n<h1 id=\"三、Commitizen\"><a href=\"#三、Commitizen\" class=\"headerlink\" title=\"三、Commitizen\"></a>三、Commitizen</h1><p>Commitizen是一个撰写合格 Commit message 的工具。<br>安装命令如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g commitizen</span><br></pre></td></tr></table></figure>\n\n<p>然后，在项目目录里，运行下面的命令，使其支持 Angular 的 Commit message 格式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ commitizen init cz-conventional-changelog --save --save-exact</span><br></pre></td></tr></table></figure>\n\n<p>以后，凡是用到git commit命令，一律改为使用git cz。这时，就会出现选项，用来生成符合格式的 Commit message。</p>\n<h1 id=\"四、validate-commit-msg\"><a href=\"#四、validate-commit-msg\" class=\"headerlink\" title=\"四、validate-commit-msg\"></a>四、validate-commit-msg</h1><p>validate-commit-msg 用于检查 Node 项目的 Commit message 是否符合格式。<br>它的安装是手动的。首先，拷贝下面这个JS文件，放入你的代码库。文件名可以取为validate-commit-msg.js。<br>接着，把这个脚本加入 Git 的 hook。下面是在package.json里面使用 ghooks，把这个脚本加为commit-msg时运行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;config&quot;: &#123;</span><br><span class=\"line\">  &quot;ghooks&quot;: &#123;</span><br><span class=\"line\">    &quot;commit-msg&quot;: &quot;./validate-commit-msg.js&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后，每次git commit的时候，这个脚本就会自动检查 Commit message 是否合格。如果不合格，就会报错。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add -A </span><br><span class=\"line\">$ git commit -m &quot;edit markdown&quot; </span><br><span class=\"line\">INVALID COMMIT MSG: does not match &quot;&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;&quot; ! was: edit markdown</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"五、生成-Change-log\"><a href=\"#五、生成-Change-log\" class=\"headerlink\" title=\"五、生成 Change log\"></a>五、生成 Change log</h1><p>如果你的所有 Commit 都符合 Angular 格式，那么发布新版本时， Change log 就可以用脚本自动生成（例1，例2，例3）。<br>生成的文档包括以下三个部分。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">New features</span><br><span class=\"line\">Bug fixes</span><br><span class=\"line\">Breaking changes.</span><br></pre></td></tr></table></figure>\n\n<p>每个部分都会罗列相关的 commit ，并且有指向这些 commit 的链接。当然，生成的文档允许手动修改，所以发布前，你还可以添加其他内容。<br>conventional-changelog 就是生成 Change log 的工具，运行下面的命令即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g conventional-changelog</span><br><span class=\"line\">$ cd my-project</span><br><span class=\"line\">$ conventional-changelog -p angular -i CHANGELOG.md -w</span><br></pre></td></tr></table></figure>\n\n<p>上面命令不会覆盖以前的 Change log，只会在CHANGELOG.md的头部加上自从上次发布以来的变动。<br>如果你想生成所有发布的 Change log，要改为运行下面的命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ conventional-changelog -p angular -i CHANGELOG.md -w -r 0</span><br></pre></td></tr></table></figure>\n\n<p>为了方便使用，可以将其写入package.json的scripts字段。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;changelog&quot;: &quot;conventional-changelog -p angular -i CHANGELOG.md -w -r 0&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以后，直接运行下面的命令即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm run changelog</span><br></pre></td></tr></table></figure>\n\n<hr>\n<blockquote>\n<p>转自<a href=\"http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html</a></p>\n</blockquote>\n<hr>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Apr 25 2018 20:46:59 GMT+0800 (GMT+08:00)","title":"Git Commit message 的写法规范之《Angular 规范》","path":"2017/04/11/Git-Commit-message-的写法规范之《Angular-规范》/","eyeCatchImage":null,"excerpt":null,"date":"2017-04-11T12:47:40.000Z","pv":0,"totalPV":0,"categories":"Essay","tags":["Git"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":3789},{"title":"IDEA中非常用的几款插件，分享","date":"2017-04-08T09:43:52.000Z","_content":"插件名称 | 插件介绍 | 官网地址\n--------|---------|-------\nGitOSC|\t开源中国的码云插件|\thttps://plugins.jetbrains.com/plugin/8383-gitosc\nIDE Features Trainer|\tIntelliJ IDEA 官方出的学习辅助插件|\thttps://plugins.jetbrains.com/plugin/8554?pr=idea\nKey promoter|\t快捷键提示\t|https://plugins.jetbrains.com/plugin/4455?pr=idea\nGrep Console|\t自定义设置控制台输出颜色|\thttps://plugins.jetbrains.com/idea/plugin/7125-grep-console\nString Manipulation\t|驼峰式命名和下划线命名交替变化|\thttps://plugins.jetbrains.com/plugin/2162?pr=idea\nCheckStyle-IDEA\t|代码规范检查|\thttps://plugins.jetbrains.com/plugin/1065?pr=idea\nFindBugs-IDEA|\t潜在 Bug 检查|\thttps://plugins.jetbrains.com/plugin/3847?pr=idea\nMetricsReloaded\t|代码复杂度检查|\thttps://plugins.jetbrains.com/plugin/93?pr=idea\nStatistic\t|代码统计\t|https://plugins.jetbrains.com/plugin/4509?pr=idea\nJRebel Plugin|\t热部署|\thttps://plugins.jetbrains.com/plugin/?id=4441\nCodeGlance|\t在编辑代码最右侧，显示一块代码小地图|\thttps://plugins.jetbrains.com/plugin/7275?pr=idea\nGsonFormat\t|把 JSON 字符串直接实例化成类|\thttps://plugins.jetbrains.com/plugin/7654?pr=idea\nMultiMarkdown\t|书写 Markdown 文章\t|https://plugins.jetbrains.com/plugin/7896?pr=idea\nEclipse Code Formatter|\t使用 Eclipse 的代码格式化风格，在一个团队中如果公司有规定格式化风格，这个可以使用。|\thttps://plugins.jetbrains.com/plugin/6546?pr=idea\nJindent-Source Code Formatter\t|自定义类、方法、doc、变量注释模板|\thttp://plugins.jetbrains.com/plugin/2170?pr=idea\nECTranslation\t|翻译插件\t|https://github.com/Skykai521/ECTranslation/releases\nMaven Helper|\tMaven 辅助插件|\thttps://plugins.jetbrains.com/plugin/7179-maven-helper","source":"_posts/IDEA中非常用的几款插件，分享.md","raw":"---\ntitle: IDEA中非常用的几款插件，分享\ndate: 2017-04-08 17:43:52\ntags: [IDE, JetBrains, IntelliJ IDEA]\ncategories: Collection\n---\n插件名称 | 插件介绍 | 官网地址\n--------|---------|-------\nGitOSC|\t开源中国的码云插件|\thttps://plugins.jetbrains.com/plugin/8383-gitosc\nIDE Features Trainer|\tIntelliJ IDEA 官方出的学习辅助插件|\thttps://plugins.jetbrains.com/plugin/8554?pr=idea\nKey promoter|\t快捷键提示\t|https://plugins.jetbrains.com/plugin/4455?pr=idea\nGrep Console|\t自定义设置控制台输出颜色|\thttps://plugins.jetbrains.com/idea/plugin/7125-grep-console\nString Manipulation\t|驼峰式命名和下划线命名交替变化|\thttps://plugins.jetbrains.com/plugin/2162?pr=idea\nCheckStyle-IDEA\t|代码规范检查|\thttps://plugins.jetbrains.com/plugin/1065?pr=idea\nFindBugs-IDEA|\t潜在 Bug 检查|\thttps://plugins.jetbrains.com/plugin/3847?pr=idea\nMetricsReloaded\t|代码复杂度检查|\thttps://plugins.jetbrains.com/plugin/93?pr=idea\nStatistic\t|代码统计\t|https://plugins.jetbrains.com/plugin/4509?pr=idea\nJRebel Plugin|\t热部署|\thttps://plugins.jetbrains.com/plugin/?id=4441\nCodeGlance|\t在编辑代码最右侧，显示一块代码小地图|\thttps://plugins.jetbrains.com/plugin/7275?pr=idea\nGsonFormat\t|把 JSON 字符串直接实例化成类|\thttps://plugins.jetbrains.com/plugin/7654?pr=idea\nMultiMarkdown\t|书写 Markdown 文章\t|https://plugins.jetbrains.com/plugin/7896?pr=idea\nEclipse Code Formatter|\t使用 Eclipse 的代码格式化风格，在一个团队中如果公司有规定格式化风格，这个可以使用。|\thttps://plugins.jetbrains.com/plugin/6546?pr=idea\nJindent-Source Code Formatter\t|自定义类、方法、doc、变量注释模板|\thttp://plugins.jetbrains.com/plugin/2170?pr=idea\nECTranslation\t|翻译插件\t|https://github.com/Skykai521/ECTranslation/releases\nMaven Helper|\tMaven 辅助插件|\thttps://plugins.jetbrains.com/plugin/7179-maven-helper","slug":"IDEA中非常用的几款插件，分享","published":1,"updated":"2018-04-25T12:46:59.494Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2fj0not000fq4vg9bdk2k7j","content":"<table>\n<thead>\n<tr>\n<th>插件名称</th>\n<th>插件介绍</th>\n<th>官网地址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GitOSC</td>\n<td>开源中国的码云插件</td>\n<td><a href=\"https://plugins.jetbrains.com/plugin/8383-gitosc\" target=\"_blank\" rel=\"noopener\">https://plugins.jetbrains.com/plugin/8383-gitosc</a></td>\n</tr>\n<tr>\n<td>IDE Features Trainer</td>\n<td>IntelliJ IDEA 官方出的学习辅助插件</td>\n<td><a href=\"https://plugins.jetbrains.com/plugin/8554?pr=idea\" target=\"_blank\" rel=\"noopener\">https://plugins.jetbrains.com/plugin/8554?pr=idea</a></td>\n</tr>\n<tr>\n<td>Key promoter</td>\n<td>快捷键提示</td>\n<td><a href=\"https://plugins.jetbrains.com/plugin/4455?pr=idea\" target=\"_blank\" rel=\"noopener\">https://plugins.jetbrains.com/plugin/4455?pr=idea</a></td>\n</tr>\n<tr>\n<td>Grep Console</td>\n<td>自定义设置控制台输出颜色</td>\n<td><a href=\"https://plugins.jetbrains.com/idea/plugin/7125-grep-console\" target=\"_blank\" rel=\"noopener\">https://plugins.jetbrains.com/idea/plugin/7125-grep-console</a></td>\n</tr>\n<tr>\n<td>String Manipulation</td>\n<td>驼峰式命名和下划线命名交替变化</td>\n<td><a href=\"https://plugins.jetbrains.com/plugin/2162?pr=idea\" target=\"_blank\" rel=\"noopener\">https://plugins.jetbrains.com/plugin/2162?pr=idea</a></td>\n</tr>\n<tr>\n<td>CheckStyle-IDEA</td>\n<td>代码规范检查</td>\n<td><a href=\"https://plugins.jetbrains.com/plugin/1065?pr=idea\" target=\"_blank\" rel=\"noopener\">https://plugins.jetbrains.com/plugin/1065?pr=idea</a></td>\n</tr>\n<tr>\n<td>FindBugs-IDEA</td>\n<td>潜在 Bug 检查</td>\n<td><a href=\"https://plugins.jetbrains.com/plugin/3847?pr=idea\" target=\"_blank\" rel=\"noopener\">https://plugins.jetbrains.com/plugin/3847?pr=idea</a></td>\n</tr>\n<tr>\n<td>MetricsReloaded</td>\n<td>代码复杂度检查</td>\n<td><a href=\"https://plugins.jetbrains.com/plugin/93?pr=idea\" target=\"_blank\" rel=\"noopener\">https://plugins.jetbrains.com/plugin/93?pr=idea</a></td>\n</tr>\n<tr>\n<td>Statistic</td>\n<td>代码统计</td>\n<td><a href=\"https://plugins.jetbrains.com/plugin/4509?pr=idea\" target=\"_blank\" rel=\"noopener\">https://plugins.jetbrains.com/plugin/4509?pr=idea</a></td>\n</tr>\n<tr>\n<td>JRebel Plugin</td>\n<td>热部署</td>\n<td><a href=\"https://plugins.jetbrains.com/plugin/?id=4441\" target=\"_blank\" rel=\"noopener\">https://plugins.jetbrains.com/plugin/?id=4441</a></td>\n</tr>\n<tr>\n<td>CodeGlance</td>\n<td>在编辑代码最右侧，显示一块代码小地图</td>\n<td><a href=\"https://plugins.jetbrains.com/plugin/7275?pr=idea\" target=\"_blank\" rel=\"noopener\">https://plugins.jetbrains.com/plugin/7275?pr=idea</a></td>\n</tr>\n<tr>\n<td>GsonFormat</td>\n<td>把 JSON 字符串直接实例化成类</td>\n<td><a href=\"https://plugins.jetbrains.com/plugin/7654?pr=idea\" target=\"_blank\" rel=\"noopener\">https://plugins.jetbrains.com/plugin/7654?pr=idea</a></td>\n</tr>\n<tr>\n<td>MultiMarkdown</td>\n<td>书写 Markdown 文章</td>\n<td><a href=\"https://plugins.jetbrains.com/plugin/7896?pr=idea\" target=\"_blank\" rel=\"noopener\">https://plugins.jetbrains.com/plugin/7896?pr=idea</a></td>\n</tr>\n<tr>\n<td>Eclipse Code Formatter</td>\n<td>使用 Eclipse 的代码格式化风格，在一个团队中如果公司有规定格式化风格，这个可以使用。</td>\n<td><a href=\"https://plugins.jetbrains.com/plugin/6546?pr=idea\" target=\"_blank\" rel=\"noopener\">https://plugins.jetbrains.com/plugin/6546?pr=idea</a></td>\n</tr>\n<tr>\n<td>Jindent-Source Code Formatter</td>\n<td>自定义类、方法、doc、变量注释模板</td>\n<td><a href=\"http://plugins.jetbrains.com/plugin/2170?pr=idea\" target=\"_blank\" rel=\"noopener\">http://plugins.jetbrains.com/plugin/2170?pr=idea</a></td>\n</tr>\n<tr>\n<td>ECTranslation</td>\n<td>翻译插件</td>\n<td><a href=\"https://github.com/Skykai521/ECTranslation/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/Skykai521/ECTranslation/releases</a></td>\n</tr>\n<tr>\n<td>Maven Helper</td>\n<td>Maven 辅助插件</td>\n<td><a href=\"https://plugins.jetbrains.com/plugin/7179-maven-helper\" target=\"_blank\" rel=\"noopener\">https://plugins.jetbrains.com/plugin/7179-maven-helper</a></td>\n</tr>\n</tbody></table>","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>插件名称</th>\n<th>插件介绍</th>\n<th>官网地址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GitOSC</td>\n<td>开源中国的码云插件</td>\n<td><a href=\"https://plugins.jetbrains.com/plugin/8383-gitosc\" target=\"_blank\" rel=\"noopener\">https://plugins.jetbrains.com/plugin/8383-gitosc</a></td>\n</tr>\n<tr>\n<td>IDE Features Trainer</td>\n<td>IntelliJ IDEA 官方出的学习辅助插件</td>\n<td><a href=\"https://plugins.jetbrains.com/plugin/8554?pr=idea\" target=\"_blank\" rel=\"noopener\">https://plugins.jetbrains.com/plugin/8554?pr=idea</a></td>\n</tr>\n<tr>\n<td>Key promoter</td>\n<td>快捷键提示</td>\n<td><a href=\"https://plugins.jetbrains.com/plugin/4455?pr=idea\" target=\"_blank\" rel=\"noopener\">https://plugins.jetbrains.com/plugin/4455?pr=idea</a></td>\n</tr>\n<tr>\n<td>Grep Console</td>\n<td>自定义设置控制台输出颜色</td>\n<td><a href=\"https://plugins.jetbrains.com/idea/plugin/7125-grep-console\" target=\"_blank\" rel=\"noopener\">https://plugins.jetbrains.com/idea/plugin/7125-grep-console</a></td>\n</tr>\n<tr>\n<td>String Manipulation</td>\n<td>驼峰式命名和下划线命名交替变化</td>\n<td><a href=\"https://plugins.jetbrains.com/plugin/2162?pr=idea\" target=\"_blank\" rel=\"noopener\">https://plugins.jetbrains.com/plugin/2162?pr=idea</a></td>\n</tr>\n<tr>\n<td>CheckStyle-IDEA</td>\n<td>代码规范检查</td>\n<td><a href=\"https://plugins.jetbrains.com/plugin/1065?pr=idea\" target=\"_blank\" rel=\"noopener\">https://plugins.jetbrains.com/plugin/1065?pr=idea</a></td>\n</tr>\n<tr>\n<td>FindBugs-IDEA</td>\n<td>潜在 Bug 检查</td>\n<td><a href=\"https://plugins.jetbrains.com/plugin/3847?pr=idea\" target=\"_blank\" rel=\"noopener\">https://plugins.jetbrains.com/plugin/3847?pr=idea</a></td>\n</tr>\n<tr>\n<td>MetricsReloaded</td>\n<td>代码复杂度检查</td>\n<td><a href=\"https://plugins.jetbrains.com/plugin/93?pr=idea\" target=\"_blank\" rel=\"noopener\">https://plugins.jetbrains.com/plugin/93?pr=idea</a></td>\n</tr>\n<tr>\n<td>Statistic</td>\n<td>代码统计</td>\n<td><a href=\"https://plugins.jetbrains.com/plugin/4509?pr=idea\" target=\"_blank\" rel=\"noopener\">https://plugins.jetbrains.com/plugin/4509?pr=idea</a></td>\n</tr>\n<tr>\n<td>JRebel Plugin</td>\n<td>热部署</td>\n<td><a href=\"https://plugins.jetbrains.com/plugin/?id=4441\" target=\"_blank\" rel=\"noopener\">https://plugins.jetbrains.com/plugin/?id=4441</a></td>\n</tr>\n<tr>\n<td>CodeGlance</td>\n<td>在编辑代码最右侧，显示一块代码小地图</td>\n<td><a href=\"https://plugins.jetbrains.com/plugin/7275?pr=idea\" target=\"_blank\" rel=\"noopener\">https://plugins.jetbrains.com/plugin/7275?pr=idea</a></td>\n</tr>\n<tr>\n<td>GsonFormat</td>\n<td>把 JSON 字符串直接实例化成类</td>\n<td><a href=\"https://plugins.jetbrains.com/plugin/7654?pr=idea\" target=\"_blank\" rel=\"noopener\">https://plugins.jetbrains.com/plugin/7654?pr=idea</a></td>\n</tr>\n<tr>\n<td>MultiMarkdown</td>\n<td>书写 Markdown 文章</td>\n<td><a href=\"https://plugins.jetbrains.com/plugin/7896?pr=idea\" target=\"_blank\" rel=\"noopener\">https://plugins.jetbrains.com/plugin/7896?pr=idea</a></td>\n</tr>\n<tr>\n<td>Eclipse Code Formatter</td>\n<td>使用 Eclipse 的代码格式化风格，在一个团队中如果公司有规定格式化风格，这个可以使用。</td>\n<td><a href=\"https://plugins.jetbrains.com/plugin/6546?pr=idea\" target=\"_blank\" rel=\"noopener\">https://plugins.jetbrains.com/plugin/6546?pr=idea</a></td>\n</tr>\n<tr>\n<td>Jindent-Source Code Formatter</td>\n<td>自定义类、方法、doc、变量注释模板</td>\n<td><a href=\"http://plugins.jetbrains.com/plugin/2170?pr=idea\" target=\"_blank\" rel=\"noopener\">http://plugins.jetbrains.com/plugin/2170?pr=idea</a></td>\n</tr>\n<tr>\n<td>ECTranslation</td>\n<td>翻译插件</td>\n<td><a href=\"https://github.com/Skykai521/ECTranslation/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/Skykai521/ECTranslation/releases</a></td>\n</tr>\n<tr>\n<td>Maven Helper</td>\n<td>Maven 辅助插件</td>\n<td><a href=\"https://plugins.jetbrains.com/plugin/7179-maven-helper\" target=\"_blank\" rel=\"noopener\">https://plugins.jetbrains.com/plugin/7179-maven-helper</a></td>\n</tr>\n</tbody></table>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Apr 25 2018 20:46:59 GMT+0800 (GMT+08:00)","title":"IDEA中非常用的几款插件，分享","path":"2017/04/08/IDEA中非常用的几款插件，分享/","eyeCatchImage":null,"excerpt":null,"date":"2017-04-08T09:43:52.000Z","pv":0,"totalPV":0,"categories":"Collection","tags":["IDE","JetBrains","IntelliJ IDEA"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1296},{"title":"JAVA不借助中间变量交换2个变量的值","date":"2017-04-09T05:29:50.000Z","_content":"```java\npublic static void main(String[] args) {\n    /*方法一*/\n    int a = 3;\n    int b = 4;\n    a=a+b;\n    b=a-b;\n    a=a-b;\n    System.out.println(\"a=\"+a+\",b=\"+b);\n    \n    /*方法二利用位运算交换，效率很高*/\n    int aa=3;\n    int bb=4;\n    aa=aa^bb;\n    bb=bb^aa;\n    aa=aa^bb;\n    System.out.println(\"aa=\"+aa+\",bb=\"+bb);\n}\n\n```","source":"_posts/JAVA不借助中间变量交换2个变量的值.md","raw":"---\ntitle: JAVA不借助中间变量交换2个变量的值\ndate: 2017-04-09 13:29:50\ntags: Java\ncategories: Essay\n---\n```java\npublic static void main(String[] args) {\n    /*方法一*/\n    int a = 3;\n    int b = 4;\n    a=a+b;\n    b=a-b;\n    a=a-b;\n    System.out.println(\"a=\"+a+\",b=\"+b);\n    \n    /*方法二利用位运算交换，效率很高*/\n    int aa=3;\n    int bb=4;\n    aa=aa^bb;\n    bb=bb^aa;\n    aa=aa^bb;\n    System.out.println(\"aa=\"+aa+\",bb=\"+bb);\n}\n\n```","slug":"JAVA不借助中间变量交换2个变量的值","published":1,"updated":"2018-04-25T12:46:59.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2fj0np0000jq4vgflwe6yro","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*方法一*/</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = <span class=\"number\">4</span>;</span><br><span class=\"line\">    a=a+b;</span><br><span class=\"line\">    b=a-b;</span><br><span class=\"line\">    a=a-b;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"a=\"</span>+a+<span class=\"string\">\",b=\"</span>+b);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/*方法二利用位运算交换，效率很高*/</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> aa=<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> bb=<span class=\"number\">4</span>;</span><br><span class=\"line\">    aa=aa^bb;</span><br><span class=\"line\">    bb=bb^aa;</span><br><span class=\"line\">    aa=aa^bb;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"aa=\"</span>+aa+<span class=\"string\">\",bb=\"</span>+bb);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*方法一*/</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = <span class=\"number\">4</span>;</span><br><span class=\"line\">    a=a+b;</span><br><span class=\"line\">    b=a-b;</span><br><span class=\"line\">    a=a-b;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"a=\"</span>+a+<span class=\"string\">\",b=\"</span>+b);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/*方法二利用位运算交换，效率很高*/</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> aa=<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> bb=<span class=\"number\">4</span>;</span><br><span class=\"line\">    aa=aa^bb;</span><br><span class=\"line\">    bb=bb^aa;</span><br><span class=\"line\">    aa=aa^bb;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"aa=\"</span>+aa+<span class=\"string\">\",bb=\"</span>+bb);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Apr 25 2018 20:46:59 GMT+0800 (GMT+08:00)","title":"JAVA不借助中间变量交换2个变量的值","path":"2017/04/09/JAVA不借助中间变量交换2个变量的值/","eyeCatchImage":null,"excerpt":null,"date":"2017-04-09T05:29:50.000Z","pv":0,"totalPV":0,"categories":"Essay","tags":["Java"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":246},{"title":"Java 9 中的 9 个新特性","author":"Zhang Fei","date":"2017-05-16T14:52:00.000Z","_content":"# Java 9 中的 9 个新特性\n\n![upload successful](/images/pasted-0.png)\n\nJava 8 发布三年多之后，即将快到2017年7月下一个版本发布的日期了。 你可能已经听说过 Java 9 的模块系统，但是这个新版本还有许多其它的更新。 这里有九个令人兴奋的新功能将与 Java 9 一起发布。\n\n## Java 平台级模块系统\n\nJava 9 的定义功能是一套全新的模块系统。当代码库越来越大，创建复杂，盘根错节的“意大利面条式代码”的几率呈指数级的增长。这时候就得面对两个基础的问题: 很难真正地对代码进行封装, 而系统并没有对不同部分（也就是 JAR 文件）之间的依赖关系有个明确的概念。每一个公共类都可以被类路径之下任何其它的公共类所访问到, 这样就会导致无意中使用了并不想被公开访问的 API。此外，类路径本身也存在问题: 你怎么知晓所有需要的 JAR 都已经有了, 或者是不是会有重复的项呢? 模块系统把这俩个问题都给解决了。\n\n模块化的 JAR 文件都包含一个额外的模块描述器。在这个模块描述器中, 对其它模块的依赖是通过 “requires” 来表示的。另外, “exports” 语句控制着哪些包是可以被其它模块访问到的。所有不被导出的包默认都封装在模块的里面。如下是一个模块描述器的示例，存在于 “module-info.java” 文件中:\n\nmodule blog {\n我们可以如下展示模块：\n\n![upload successful](/images/pasted-1.png)\n\n请注意，两个模块都包含封装的包，因为它们没有被导出（使用橙色盾牌可视化）。 没有人会偶然地使用来自这些包中的类。Java 平台本身也使用自己的模块系统进行了模块化。通过封装 JDK 的内部类，平台更安全，持续改进也更容易。\n\n当启动一个模块化应用时， JVM 会验证是否所有的模块都能使用，这基于 `requires` 语句——比脆弱的类路径迈进了一大步。模块允许你更好地强制结构化封装你的应用并明确依赖。你可以在这个课程中学习更多关于 Java 9 中模块工作的信息 。\n\n## Linking\n\n当你使用具有显式依赖关系的模块和模块化的 JDK 时，新的可能性出现了。你的应用程序模块现在将声明其对其他应用程序模块的依赖以及对其所使用的 JDK 模块的依赖。为什么不使用这些信息创建一个最小的运行时环境，其中只包含运行应用程序所需的那些模块呢？ 这可以通过 Java 9 中的新的 jlink 工具实现。你可以创建针对应用程序进行优化的最小运行时映像而不需要使用完全加载 JDK 安装版本。\n\n## JShell: 交互式 Java REPL\n\n许多语言已经具有交互式编程环境，Java 现在加入了这个俱乐部。您可以从控制台启动 jshell ，并直接启动输入和执行 Java 代码。 jshell 的即时反馈使它成为探索 API 和尝试语言特性的好工具。\n\n![upload successful](/images/pasted-2.png)\n\n测试一个 Java 正则表达式是一个很好的说明 jshell 如何使您的生活更轻松的例子。 交互式 shell 还可以提供良好的教学环境以及提高生产力，您可以在此了解更多信息。在教人们如何编写 Java 的过程中，不再需要解释 “public static void main（String [] args）” 这句废话。\n\n## 改进的 Javadoc\n\n有时一些小事情可以带来很大的不同。你是否就像我一样在一直使用 Google 来查找正确的 Javadoc 页面呢？ 这不再需要了。Javadoc 现在支持在 API 文档中的进行搜索。另外，Javadoc 的输出现在符合兼容 HTML5 标准。此外，你会注意到，每个 Javadoc 页面都包含有关 JDK 模块类或接口来源的信息。\n\n![upload successful](/images/pasted-3.png)\n\n## 集合工厂方法\n\n通常，您希望在代码中创建一个集合（例如，List 或 Set ），并直接用一些元素填充它。 实例化集合，几个 “add” 调用，使得代码重复。 Java 9，添加了几种集合工厂方法：\n\nSet<Integer> ints = Set.of(1, 2, 3);List<String> strings = List.of(\"first\", \"second\");\n除了更短和更好阅读之外，这些方法也可以避免您选择特定的集合实现。 事实上，从工厂方法返回已放入数个元素的集合实现是高度优化的。这是可能的，因为它们是不可变的：在创建后，继续添加元素到这些集合会导致 “UnsupportedOperationException” 。\n\n## 改进的 Stream API\n\n长期以来，Stream API 都是 Java 标准库最好的改进之一。通过这套 API 可以在集合上建立用于转换的申明管道。在 Java 9 中它会变得更好。Stream 接口中添加了 4 个新的方法：dropWhile, takeWhile, ofNullable。还有个 iterate 方法的新重载方法，可以让你提供一个 Predicate (判断条件)来指定什么时候结束迭代：\n\nIntStream.iterate(1, i -> i < 100, i -> i + 1).forEach(System.out::println);\n第二个参数是一个 Lambda，它会在当前 IntStream 中的元素到达 100 的时候返回 true。因此这个简单的示例是向控制台打印 1 到 99。\n\n除了对 Stream 本身的扩展，Optional 和 Stream 之间的结合也得到了改进。现在可以通过 Optional 的新方法 `stram` 将一个 Optional 对象转换为一个(可能是空的) Stream 对象：\n\nStream<Integer> s = Optional.of(1).stream();\n在组合复杂的 Stream 管道时，将 Optional 转换为 Stream 非常有用。\n\n## 私有接口方法\n\nJava 8 为我们带来了接口的默认方法。 接口现在也可以包含行为，而不仅仅是方法签名。 但是，如果在接口上有几个默认方法，代码几乎相同，会发生什么情况？ 通常，您将重构这些方法，调用一个可复用的私有方法。 但默认方法不能是私有的。 将复用代码创建为一个默认方法不是一个解决方案，因为该辅助方法会成为公共API的一部分。 使用 Java 9，您可以向接口添加私有辅助方法来解决此问题：\n\npublic interface MyInterface {\n如果您使用默认方法开发 API ，那么私有接口方法可能有助于构建其实现。\n\n## HTTP/2\n\nJava 9 中有新的方式来处理 HTTP 调用。这个迟到的特性用于代替老旧的 `HttpURLConnection` API，并提供对 WebSocket 和 HTTP/2 的支持。注意：新的 HttpClient API 在 Java 9 中以所谓的孵化器模块交付。也就是说，这套 API 不能保证 100% 完成。不过你可以在 Java 9 中开始使用这套 API：\n\nHttpClient client = HttpClient.newHttpClient();HttpRequest req =\n除了这个简单的请求/响应模型之外，HttpClient 还提供了新的 API 来处理 HTTP/2 的特性，比如流和服务端推送。\n\n## 多版本兼容 JAR\n\n我们最后要来着重介绍的这个特性对于库的维护者而言是个特别好的消息。当一个新版本的 Java 出现的时候，你的库用户要花费数年时间才会切换到这个新的版本。这就意味着库得去向后兼容你想要支持的最老的 Java 版本 (许多情况下就是 Java 6 或者 7)。这实际上意味着未来的很长一段时间，你都不能在库中运用 Java 9 所提供的新特性。幸运的是，多版本兼容 JAR 功能能让你创建仅在特定版本的 Java 环境中运行库程序时选择使用的 class 版本：\n\nmultirelease.jar\n在上述场景中， multirelease.jar 可以在 Java 9 中使用, 不过 Helper 这个类使用的不是顶层的multirelease.Helper 这个 class, 而是处在“META-INF/versions/9”下面的这个。这是特别为 Java 9 准备的 class 版本，可以运用 Java 9 所提供的特性和库。同时，在早期的 Java 诸版本中使用这个 JAR 也是能运行的，因为较老版本的 Java 只会看到顶层的这个 Helper 类。","source":"_posts/Java-9-中的-9-个新特性.md","raw":"---\ntitle: Java 9 中的 9 个新特性\nauthor: Zhang Fei\ntags:\n  - Java\ncategories: [Essay]\ndate: 2017-05-16 22:52:00\n---\n# Java 9 中的 9 个新特性\n\n![upload successful](/images/pasted-0.png)\n\nJava 8 发布三年多之后，即将快到2017年7月下一个版本发布的日期了。 你可能已经听说过 Java 9 的模块系统，但是这个新版本还有许多其它的更新。 这里有九个令人兴奋的新功能将与 Java 9 一起发布。\n\n## Java 平台级模块系统\n\nJava 9 的定义功能是一套全新的模块系统。当代码库越来越大，创建复杂，盘根错节的“意大利面条式代码”的几率呈指数级的增长。这时候就得面对两个基础的问题: 很难真正地对代码进行封装, 而系统并没有对不同部分（也就是 JAR 文件）之间的依赖关系有个明确的概念。每一个公共类都可以被类路径之下任何其它的公共类所访问到, 这样就会导致无意中使用了并不想被公开访问的 API。此外，类路径本身也存在问题: 你怎么知晓所有需要的 JAR 都已经有了, 或者是不是会有重复的项呢? 模块系统把这俩个问题都给解决了。\n\n模块化的 JAR 文件都包含一个额外的模块描述器。在这个模块描述器中, 对其它模块的依赖是通过 “requires” 来表示的。另外, “exports” 语句控制着哪些包是可以被其它模块访问到的。所有不被导出的包默认都封装在模块的里面。如下是一个模块描述器的示例，存在于 “module-info.java” 文件中:\n\nmodule blog {\n我们可以如下展示模块：\n\n![upload successful](/images/pasted-1.png)\n\n请注意，两个模块都包含封装的包，因为它们没有被导出（使用橙色盾牌可视化）。 没有人会偶然地使用来自这些包中的类。Java 平台本身也使用自己的模块系统进行了模块化。通过封装 JDK 的内部类，平台更安全，持续改进也更容易。\n\n当启动一个模块化应用时， JVM 会验证是否所有的模块都能使用，这基于 `requires` 语句——比脆弱的类路径迈进了一大步。模块允许你更好地强制结构化封装你的应用并明确依赖。你可以在这个课程中学习更多关于 Java 9 中模块工作的信息 。\n\n## Linking\n\n当你使用具有显式依赖关系的模块和模块化的 JDK 时，新的可能性出现了。你的应用程序模块现在将声明其对其他应用程序模块的依赖以及对其所使用的 JDK 模块的依赖。为什么不使用这些信息创建一个最小的运行时环境，其中只包含运行应用程序所需的那些模块呢？ 这可以通过 Java 9 中的新的 jlink 工具实现。你可以创建针对应用程序进行优化的最小运行时映像而不需要使用完全加载 JDK 安装版本。\n\n## JShell: 交互式 Java REPL\n\n许多语言已经具有交互式编程环境，Java 现在加入了这个俱乐部。您可以从控制台启动 jshell ，并直接启动输入和执行 Java 代码。 jshell 的即时反馈使它成为探索 API 和尝试语言特性的好工具。\n\n![upload successful](/images/pasted-2.png)\n\n测试一个 Java 正则表达式是一个很好的说明 jshell 如何使您的生活更轻松的例子。 交互式 shell 还可以提供良好的教学环境以及提高生产力，您可以在此了解更多信息。在教人们如何编写 Java 的过程中，不再需要解释 “public static void main（String [] args）” 这句废话。\n\n## 改进的 Javadoc\n\n有时一些小事情可以带来很大的不同。你是否就像我一样在一直使用 Google 来查找正确的 Javadoc 页面呢？ 这不再需要了。Javadoc 现在支持在 API 文档中的进行搜索。另外，Javadoc 的输出现在符合兼容 HTML5 标准。此外，你会注意到，每个 Javadoc 页面都包含有关 JDK 模块类或接口来源的信息。\n\n![upload successful](/images/pasted-3.png)\n\n## 集合工厂方法\n\n通常，您希望在代码中创建一个集合（例如，List 或 Set ），并直接用一些元素填充它。 实例化集合，几个 “add” 调用，使得代码重复。 Java 9，添加了几种集合工厂方法：\n\nSet<Integer> ints = Set.of(1, 2, 3);List<String> strings = List.of(\"first\", \"second\");\n除了更短和更好阅读之外，这些方法也可以避免您选择特定的集合实现。 事实上，从工厂方法返回已放入数个元素的集合实现是高度优化的。这是可能的，因为它们是不可变的：在创建后，继续添加元素到这些集合会导致 “UnsupportedOperationException” 。\n\n## 改进的 Stream API\n\n长期以来，Stream API 都是 Java 标准库最好的改进之一。通过这套 API 可以在集合上建立用于转换的申明管道。在 Java 9 中它会变得更好。Stream 接口中添加了 4 个新的方法：dropWhile, takeWhile, ofNullable。还有个 iterate 方法的新重载方法，可以让你提供一个 Predicate (判断条件)来指定什么时候结束迭代：\n\nIntStream.iterate(1, i -> i < 100, i -> i + 1).forEach(System.out::println);\n第二个参数是一个 Lambda，它会在当前 IntStream 中的元素到达 100 的时候返回 true。因此这个简单的示例是向控制台打印 1 到 99。\n\n除了对 Stream 本身的扩展，Optional 和 Stream 之间的结合也得到了改进。现在可以通过 Optional 的新方法 `stram` 将一个 Optional 对象转换为一个(可能是空的) Stream 对象：\n\nStream<Integer> s = Optional.of(1).stream();\n在组合复杂的 Stream 管道时，将 Optional 转换为 Stream 非常有用。\n\n## 私有接口方法\n\nJava 8 为我们带来了接口的默认方法。 接口现在也可以包含行为，而不仅仅是方法签名。 但是，如果在接口上有几个默认方法，代码几乎相同，会发生什么情况？ 通常，您将重构这些方法，调用一个可复用的私有方法。 但默认方法不能是私有的。 将复用代码创建为一个默认方法不是一个解决方案，因为该辅助方法会成为公共API的一部分。 使用 Java 9，您可以向接口添加私有辅助方法来解决此问题：\n\npublic interface MyInterface {\n如果您使用默认方法开发 API ，那么私有接口方法可能有助于构建其实现。\n\n## HTTP/2\n\nJava 9 中有新的方式来处理 HTTP 调用。这个迟到的特性用于代替老旧的 `HttpURLConnection` API，并提供对 WebSocket 和 HTTP/2 的支持。注意：新的 HttpClient API 在 Java 9 中以所谓的孵化器模块交付。也就是说，这套 API 不能保证 100% 完成。不过你可以在 Java 9 中开始使用这套 API：\n\nHttpClient client = HttpClient.newHttpClient();HttpRequest req =\n除了这个简单的请求/响应模型之外，HttpClient 还提供了新的 API 来处理 HTTP/2 的特性，比如流和服务端推送。\n\n## 多版本兼容 JAR\n\n我们最后要来着重介绍的这个特性对于库的维护者而言是个特别好的消息。当一个新版本的 Java 出现的时候，你的库用户要花费数年时间才会切换到这个新的版本。这就意味着库得去向后兼容你想要支持的最老的 Java 版本 (许多情况下就是 Java 6 或者 7)。这实际上意味着未来的很长一段时间，你都不能在库中运用 Java 9 所提供的新特性。幸运的是，多版本兼容 JAR 功能能让你创建仅在特定版本的 Java 环境中运行库程序时选择使用的 class 版本：\n\nmultirelease.jar\n在上述场景中， multirelease.jar 可以在 Java 9 中使用, 不过 Helper 这个类使用的不是顶层的multirelease.Helper 这个 class, 而是处在“META-INF/versions/9”下面的这个。这是特别为 Java 9 准备的 class 版本，可以运用 Java 9 所提供的特性和库。同时，在早期的 Java 诸版本中使用这个 JAR 也是能运行的，因为较老版本的 Java 只会看到顶层的这个 Helper 类。","slug":"Java-9-中的-9-个新特性","published":1,"updated":"2018-04-25T12:46:59.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2fj0np4000lq4vg8i6j18sj","content":"<h1 id=\"Java-9-中的-9-个新特性\"><a href=\"#Java-9-中的-9-个新特性\" class=\"headerlink\" title=\"Java 9 中的 9 个新特性\"></a>Java 9 中的 9 个新特性</h1><p><img src=\"/images/pasted-0.png\" alt=\"upload successful\"></p><p>Java 8 发布三年多之后，即将快到2017年7月下一个版本发布的日期了。 你可能已经听说过 Java 9 的模块系统，但是这个新版本还有许多其它的更新。 这里有九个令人兴奋的新功能将与 Java 9 一起发布。</p><h2 id=\"Java-平台级模块系统\"><a href=\"#Java-平台级模块系统\" class=\"headerlink\" title=\"Java 平台级模块系统\"></a>Java 平台级模块系统</h2><p>Java 9 的定义功能是一套全新的模块系统。当代码库越来越大，创建复杂，盘根错节的“意大利面条式代码”的几率呈指数级的增长。这时候就得面对两个基础的问题: 很难真正地对代码进行封装, 而系统并没有对不同部分（也就是 JAR 文件）之间的依赖关系有个明确的概念。每一个公共类都可以被类路径之下任何其它的公共类所访问到, 这样就会导致无意中使用了并不想被公开访问的 API。此外，类路径本身也存在问题: 你怎么知晓所有需要的 JAR 都已经有了, 或者是不是会有重复的项呢? 模块系统把这俩个问题都给解决了。</p><a id=\"more\"></a>\n\n\n<p>模块化的 JAR 文件都包含一个额外的模块描述器。在这个模块描述器中, 对其它模块的依赖是通过 “requires” 来表示的。另外, “exports” 语句控制着哪些包是可以被其它模块访问到的。所有不被导出的包默认都封装在模块的里面。如下是一个模块描述器的示例，存在于 “module-info.java” 文件中:</p>\n<p>module blog {<br>我们可以如下展示模块：</p>\n<p><img src=\"/images/pasted-1.png\" alt=\"upload successful\"></p>\n<p>请注意，两个模块都包含封装的包，因为它们没有被导出（使用橙色盾牌可视化）。 没有人会偶然地使用来自这些包中的类。Java 平台本身也使用自己的模块系统进行了模块化。通过封装 JDK 的内部类，平台更安全，持续改进也更容易。</p>\n<p>当启动一个模块化应用时， JVM 会验证是否所有的模块都能使用，这基于 <code>requires</code> 语句——比脆弱的类路径迈进了一大步。模块允许你更好地强制结构化封装你的应用并明确依赖。你可以在这个课程中学习更多关于 Java 9 中模块工作的信息 。</p>\n<h2 id=\"Linking\"><a href=\"#Linking\" class=\"headerlink\" title=\"Linking\"></a>Linking</h2><p>当你使用具有显式依赖关系的模块和模块化的 JDK 时，新的可能性出现了。你的应用程序模块现在将声明其对其他应用程序模块的依赖以及对其所使用的 JDK 模块的依赖。为什么不使用这些信息创建一个最小的运行时环境，其中只包含运行应用程序所需的那些模块呢？ 这可以通过 Java 9 中的新的 jlink 工具实现。你可以创建针对应用程序进行优化的最小运行时映像而不需要使用完全加载 JDK 安装版本。</p>\n<h2 id=\"JShell-交互式-Java-REPL\"><a href=\"#JShell-交互式-Java-REPL\" class=\"headerlink\" title=\"JShell: 交互式 Java REPL\"></a>JShell: 交互式 Java REPL</h2><p>许多语言已经具有交互式编程环境，Java 现在加入了这个俱乐部。您可以从控制台启动 jshell ，并直接启动输入和执行 Java 代码。 jshell 的即时反馈使它成为探索 API 和尝试语言特性的好工具。</p>\n<p><img src=\"/images/pasted-2.png\" alt=\"upload successful\"></p>\n<p>测试一个 Java 正则表达式是一个很好的说明 jshell 如何使您的生活更轻松的例子。 交互式 shell 还可以提供良好的教学环境以及提高生产力，您可以在此了解更多信息。在教人们如何编写 Java 的过程中，不再需要解释 “public static void main（String [] args）” 这句废话。</p>\n<h2 id=\"改进的-Javadoc\"><a href=\"#改进的-Javadoc\" class=\"headerlink\" title=\"改进的 Javadoc\"></a>改进的 Javadoc</h2><p>有时一些小事情可以带来很大的不同。你是否就像我一样在一直使用 Google 来查找正确的 Javadoc 页面呢？ 这不再需要了。Javadoc 现在支持在 API 文档中的进行搜索。另外，Javadoc 的输出现在符合兼容 HTML5 标准。此外，你会注意到，每个 Javadoc 页面都包含有关 JDK 模块类或接口来源的信息。</p>\n<p><img src=\"/images/pasted-3.png\" alt=\"upload successful\"></p>\n<h2 id=\"集合工厂方法\"><a href=\"#集合工厂方法\" class=\"headerlink\" title=\"集合工厂方法\"></a>集合工厂方法</h2><p>通常，您希望在代码中创建一个集合（例如，List 或 Set ），并直接用一些元素填充它。 实例化集合，几个 “add” 调用，使得代码重复。 Java 9，添加了几种集合工厂方法：</p>\n<p>Set<integer> ints = Set.of(1, 2, 3);List<string> strings = List.of(“first”, “second”);<br>除了更短和更好阅读之外，这些方法也可以避免您选择特定的集合实现。 事实上，从工厂方法返回已放入数个元素的集合实现是高度优化的。这是可能的，因为它们是不可变的：在创建后，继续添加元素到这些集合会导致 “UnsupportedOperationException” 。</string></integer></p>\n<h2 id=\"改进的-Stream-API\"><a href=\"#改进的-Stream-API\" class=\"headerlink\" title=\"改进的 Stream API\"></a>改进的 Stream API</h2><p>长期以来，Stream API 都是 Java 标准库最好的改进之一。通过这套 API 可以在集合上建立用于转换的申明管道。在 Java 9 中它会变得更好。Stream 接口中添加了 4 个新的方法：dropWhile, takeWhile, ofNullable。还有个 iterate 方法的新重载方法，可以让你提供一个 Predicate (判断条件)来指定什么时候结束迭代：</p>\n<p>IntStream.iterate(1, i -&gt; i &lt; 100, i -&gt; i + 1).forEach(System.out::println);<br>第二个参数是一个 Lambda，它会在当前 IntStream 中的元素到达 100 的时候返回 true。因此这个简单的示例是向控制台打印 1 到 99。</p>\n<p>除了对 Stream 本身的扩展，Optional 和 Stream 之间的结合也得到了改进。现在可以通过 Optional 的新方法 <code>stram</code> 将一个 Optional 对象转换为一个(可能是空的) Stream 对象：</p>\n<p>Stream<integer> s = Optional.of(1).stream();<br>在组合复杂的 Stream 管道时，将 Optional 转换为 Stream 非常有用。</integer></p>\n<h2 id=\"私有接口方法\"><a href=\"#私有接口方法\" class=\"headerlink\" title=\"私有接口方法\"></a>私有接口方法</h2><p>Java 8 为我们带来了接口的默认方法。 接口现在也可以包含行为，而不仅仅是方法签名。 但是，如果在接口上有几个默认方法，代码几乎相同，会发生什么情况？ 通常，您将重构这些方法，调用一个可复用的私有方法。 但默认方法不能是私有的。 将复用代码创建为一个默认方法不是一个解决方案，因为该辅助方法会成为公共API的一部分。 使用 Java 9，您可以向接口添加私有辅助方法来解决此问题：</p>\n<p>public interface MyInterface {<br>如果您使用默认方法开发 API ，那么私有接口方法可能有助于构建其实现。</p>\n<h2 id=\"HTTP-2\"><a href=\"#HTTP-2\" class=\"headerlink\" title=\"HTTP/2\"></a>HTTP/2</h2><p>Java 9 中有新的方式来处理 HTTP 调用。这个迟到的特性用于代替老旧的 <code>HttpURLConnection</code> API，并提供对 WebSocket 和 HTTP/2 的支持。注意：新的 HttpClient API 在 Java 9 中以所谓的孵化器模块交付。也就是说，这套 API 不能保证 100% 完成。不过你可以在 Java 9 中开始使用这套 API：</p>\n<p>HttpClient client = HttpClient.newHttpClient();HttpRequest req =<br>除了这个简单的请求/响应模型之外，HttpClient 还提供了新的 API 来处理 HTTP/2 的特性，比如流和服务端推送。</p>\n<h2 id=\"多版本兼容-JAR\"><a href=\"#多版本兼容-JAR\" class=\"headerlink\" title=\"多版本兼容 JAR\"></a>多版本兼容 JAR</h2><p>我们最后要来着重介绍的这个特性对于库的维护者而言是个特别好的消息。当一个新版本的 Java 出现的时候，你的库用户要花费数年时间才会切换到这个新的版本。这就意味着库得去向后兼容你想要支持的最老的 Java 版本 (许多情况下就是 Java 6 或者 7)。这实际上意味着未来的很长一段时间，你都不能在库中运用 Java 9 所提供的新特性。幸运的是，多版本兼容 JAR 功能能让你创建仅在特定版本的 Java 环境中运行库程序时选择使用的 class 版本：</p>\n<p>multirelease.jar<br>在上述场景中， multirelease.jar 可以在 Java 9 中使用, 不过 Helper 这个类使用的不是顶层的multirelease.Helper 这个 class, 而是处在“META-INF/versions/9”下面的这个。这是特别为 Java 9 准备的 class 版本，可以运用 Java 9 所提供的特性和库。同时，在早期的 Java 诸版本中使用这个 JAR 也是能运行的，因为较老版本的 Java 只会看到顶层的这个 Helper 类。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Java-9-中的-9-个新特性\"><a href=\"#Java-9-中的-9-个新特性\" class=\"headerlink\" title=\"Java 9 中的 9 个新特性\"></a>Java 9 中的 9 个新特性</h1><p><img src=\"/images/pasted-0.png\" alt=\"upload successful\"></p><p>Java 8 发布三年多之后，即将快到2017年7月下一个版本发布的日期了。 你可能已经听说过 Java 9 的模块系统，但是这个新版本还有许多其它的更新。 这里有九个令人兴奋的新功能将与 Java 9 一起发布。</p><h2 id=\"Java-平台级模块系统\"><a href=\"#Java-平台级模块系统\" class=\"headerlink\" title=\"Java 平台级模块系统\"></a>Java 平台级模块系统</h2><p>Java 9 的定义功能是一套全新的模块系统。当代码库越来越大，创建复杂，盘根错节的“意大利面条式代码”的几率呈指数级的增长。这时候就得面对两个基础的问题: 很难真正地对代码进行封装, 而系统并没有对不同部分（也就是 JAR 文件）之间的依赖关系有个明确的概念。每一个公共类都可以被类路径之下任何其它的公共类所访问到, 这样就会导致无意中使用了并不想被公开访问的 API。此外，类路径本身也存在问题: 你怎么知晓所有需要的 JAR 都已经有了, 或者是不是会有重复的项呢? 模块系统把这俩个问题都给解决了。</p>","more":"\n\n\n<p>模块化的 JAR 文件都包含一个额外的模块描述器。在这个模块描述器中, 对其它模块的依赖是通过 “requires” 来表示的。另外, “exports” 语句控制着哪些包是可以被其它模块访问到的。所有不被导出的包默认都封装在模块的里面。如下是一个模块描述器的示例，存在于 “module-info.java” 文件中:</p>\n<p>module blog {<br>我们可以如下展示模块：</p>\n<p><img src=\"/images/pasted-1.png\" alt=\"upload successful\"></p>\n<p>请注意，两个模块都包含封装的包，因为它们没有被导出（使用橙色盾牌可视化）。 没有人会偶然地使用来自这些包中的类。Java 平台本身也使用自己的模块系统进行了模块化。通过封装 JDK 的内部类，平台更安全，持续改进也更容易。</p>\n<p>当启动一个模块化应用时， JVM 会验证是否所有的模块都能使用，这基于 <code>requires</code> 语句——比脆弱的类路径迈进了一大步。模块允许你更好地强制结构化封装你的应用并明确依赖。你可以在这个课程中学习更多关于 Java 9 中模块工作的信息 。</p>\n<h2 id=\"Linking\"><a href=\"#Linking\" class=\"headerlink\" title=\"Linking\"></a>Linking</h2><p>当你使用具有显式依赖关系的模块和模块化的 JDK 时，新的可能性出现了。你的应用程序模块现在将声明其对其他应用程序模块的依赖以及对其所使用的 JDK 模块的依赖。为什么不使用这些信息创建一个最小的运行时环境，其中只包含运行应用程序所需的那些模块呢？ 这可以通过 Java 9 中的新的 jlink 工具实现。你可以创建针对应用程序进行优化的最小运行时映像而不需要使用完全加载 JDK 安装版本。</p>\n<h2 id=\"JShell-交互式-Java-REPL\"><a href=\"#JShell-交互式-Java-REPL\" class=\"headerlink\" title=\"JShell: 交互式 Java REPL\"></a>JShell: 交互式 Java REPL</h2><p>许多语言已经具有交互式编程环境，Java 现在加入了这个俱乐部。您可以从控制台启动 jshell ，并直接启动输入和执行 Java 代码。 jshell 的即时反馈使它成为探索 API 和尝试语言特性的好工具。</p>\n<p><img src=\"/images/pasted-2.png\" alt=\"upload successful\"></p>\n<p>测试一个 Java 正则表达式是一个很好的说明 jshell 如何使您的生活更轻松的例子。 交互式 shell 还可以提供良好的教学环境以及提高生产力，您可以在此了解更多信息。在教人们如何编写 Java 的过程中，不再需要解释 “public static void main（String [] args）” 这句废话。</p>\n<h2 id=\"改进的-Javadoc\"><a href=\"#改进的-Javadoc\" class=\"headerlink\" title=\"改进的 Javadoc\"></a>改进的 Javadoc</h2><p>有时一些小事情可以带来很大的不同。你是否就像我一样在一直使用 Google 来查找正确的 Javadoc 页面呢？ 这不再需要了。Javadoc 现在支持在 API 文档中的进行搜索。另外，Javadoc 的输出现在符合兼容 HTML5 标准。此外，你会注意到，每个 Javadoc 页面都包含有关 JDK 模块类或接口来源的信息。</p>\n<p><img src=\"/images/pasted-3.png\" alt=\"upload successful\"></p>\n<h2 id=\"集合工厂方法\"><a href=\"#集合工厂方法\" class=\"headerlink\" title=\"集合工厂方法\"></a>集合工厂方法</h2><p>通常，您希望在代码中创建一个集合（例如，List 或 Set ），并直接用一些元素填充它。 实例化集合，几个 “add” 调用，使得代码重复。 Java 9，添加了几种集合工厂方法：</p>\n<p>Set<integer> ints = Set.of(1, 2, 3);List<string> strings = List.of(“first”, “second”);<br>除了更短和更好阅读之外，这些方法也可以避免您选择特定的集合实现。 事实上，从工厂方法返回已放入数个元素的集合实现是高度优化的。这是可能的，因为它们是不可变的：在创建后，继续添加元素到这些集合会导致 “UnsupportedOperationException” 。</string></integer></p>\n<h2 id=\"改进的-Stream-API\"><a href=\"#改进的-Stream-API\" class=\"headerlink\" title=\"改进的 Stream API\"></a>改进的 Stream API</h2><p>长期以来，Stream API 都是 Java 标准库最好的改进之一。通过这套 API 可以在集合上建立用于转换的申明管道。在 Java 9 中它会变得更好。Stream 接口中添加了 4 个新的方法：dropWhile, takeWhile, ofNullable。还有个 iterate 方法的新重载方法，可以让你提供一个 Predicate (判断条件)来指定什么时候结束迭代：</p>\n<p>IntStream.iterate(1, i -&gt; i &lt; 100, i -&gt; i + 1).forEach(System.out::println);<br>第二个参数是一个 Lambda，它会在当前 IntStream 中的元素到达 100 的时候返回 true。因此这个简单的示例是向控制台打印 1 到 99。</p>\n<p>除了对 Stream 本身的扩展，Optional 和 Stream 之间的结合也得到了改进。现在可以通过 Optional 的新方法 <code>stram</code> 将一个 Optional 对象转换为一个(可能是空的) Stream 对象：</p>\n<p>Stream<integer> s = Optional.of(1).stream();<br>在组合复杂的 Stream 管道时，将 Optional 转换为 Stream 非常有用。</integer></p>\n<h2 id=\"私有接口方法\"><a href=\"#私有接口方法\" class=\"headerlink\" title=\"私有接口方法\"></a>私有接口方法</h2><p>Java 8 为我们带来了接口的默认方法。 接口现在也可以包含行为，而不仅仅是方法签名。 但是，如果在接口上有几个默认方法，代码几乎相同，会发生什么情况？ 通常，您将重构这些方法，调用一个可复用的私有方法。 但默认方法不能是私有的。 将复用代码创建为一个默认方法不是一个解决方案，因为该辅助方法会成为公共API的一部分。 使用 Java 9，您可以向接口添加私有辅助方法来解决此问题：</p>\n<p>public interface MyInterface {<br>如果您使用默认方法开发 API ，那么私有接口方法可能有助于构建其实现。</p>\n<h2 id=\"HTTP-2\"><a href=\"#HTTP-2\" class=\"headerlink\" title=\"HTTP/2\"></a>HTTP/2</h2><p>Java 9 中有新的方式来处理 HTTP 调用。这个迟到的特性用于代替老旧的 <code>HttpURLConnection</code> API，并提供对 WebSocket 和 HTTP/2 的支持。注意：新的 HttpClient API 在 Java 9 中以所谓的孵化器模块交付。也就是说，这套 API 不能保证 100% 完成。不过你可以在 Java 9 中开始使用这套 API：</p>\n<p>HttpClient client = HttpClient.newHttpClient();HttpRequest req =<br>除了这个简单的请求/响应模型之外，HttpClient 还提供了新的 API 来处理 HTTP/2 的特性，比如流和服务端推送。</p>\n<h2 id=\"多版本兼容-JAR\"><a href=\"#多版本兼容-JAR\" class=\"headerlink\" title=\"多版本兼容 JAR\"></a>多版本兼容 JAR</h2><p>我们最后要来着重介绍的这个特性对于库的维护者而言是个特别好的消息。当一个新版本的 Java 出现的时候，你的库用户要花费数年时间才会切换到这个新的版本。这就意味着库得去向后兼容你想要支持的最老的 Java 版本 (许多情况下就是 Java 6 或者 7)。这实际上意味着未来的很长一段时间，你都不能在库中运用 Java 9 所提供的新特性。幸运的是，多版本兼容 JAR 功能能让你创建仅在特定版本的 Java 环境中运行库程序时选择使用的 class 版本：</p>\n<p>multirelease.jar<br>在上述场景中， multirelease.jar 可以在 Java 9 中使用, 不过 Helper 这个类使用的不是顶层的multirelease.Helper 这个 class, 而是处在“META-INF/versions/9”下面的这个。这是特别为 Java 9 准备的 class 版本，可以运用 Java 9 所提供的特性和库。同时，在早期的 Java 诸版本中使用这个 JAR 也是能运行的，因为较老版本的 Java 只会看到顶层的这个 Helper 类。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"/images/pasted-0.png","popularPost_tmp_gaData":{"updated":"Wed Apr 25 2018 20:46:59 GMT+0800 (GMT+08:00)","title":"Java 9 中的 9 个新特性","path":"2017/05/16/Java-9-中的-9-个新特性/","eyeCatchImage":"/images/pasted-0.png","excerpt":null,"date":"2017-05-16T14:52:00.000Z","pv":0,"totalPV":0,"categories":"Essay","tags":["Java"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":3119},{"title":"Java中创建对象的5种不同方法","date":"2017-04-08T10:13:23.000Z","_content":"\n作为Java开发者，我们每天都会创建大量的对象，但是，我们总是使用管理依赖系统（如Spring框架）来创建这些对象。其实还有其他方法可以创建对象，在接下来的文章中我会进行详细介绍。\n1.使用new关键字\n这是最常见的创建对象的方法，并且也非常简单。通过使用这种方法我们可以调用任何我们需要调用的构造函数。\n```java\nEmployee emp1 = new Employee();\n0: new #19 // class org/programming/mitra/exercises/Employee 3: dup 4: invokespecial #21 // Method org/programming/mitra/exercises/Employee.\"\":V\n```\n2.使用class类的newInstance方法\n我们也可以使用class类的newInstance方法来创建对象。此newInstance方法调用无参构造函数以创建对象。\n我们可以通过newInstance 用以下方式创建对象：\n```java\nEmployee emp2 = (Employee) Class.forName(\"org.programming.mitra.exercises.Employee\").newInstance;\n```\n或者\n```java\nEmployee emp2 = Employee.class.newInstance;\n51: invokevirtual #70 // Method java/lang/Class.newInstance:Ljava/lang/Object;\n```\n3.使用构造函数类的 newInstance方法\n与使用class类的newInstance方法相似，java.lang.reflect.Constructor类中有一个可以用来创建对象的newInstance函数方法。通过使用这个newInstance方法我们也可以调用参数化构造函数和私有构造函数。\nConstructor\n111: invokevirtual #80 // Method java/lang/reflect/Constructor.newInstance:([Ljava/lang/Object;)Ljava/lang/Object;\n这些 newInstance 方法被认为是创建对象的反射手段。实际上，内部类的newInstance方法使用构造函数类的 newInstance 方法。这就是为什么后者是首选并且使用不同的框架如Spring, Hibernate, Struts等。\n4.使用clone方法\n实际上无论何时我们调用clone 方法，JAVA虚拟机都为我们创建了一个新的对象并且复制了之前对象的内容到这个新的对象中。使用 clone方法创建对象不会调用任何构造函数。\n为了在对象中使用clone方法，我们需要在其中实现可克隆类型并定义clone方法。\n```\nEmployee emp4 = (Employee) emp3.clone();\n162: invokevirtual #87 // Method org/programming/mitra/exercises/Employee.clone Ljava/lang/Object;\n```\n5.使用反序列化\n无论何时我们对一个对象进行序列化和反序列化，JAVA虚拟机都会为我们创建一个单独的对象。在反序列化中，JAVA虚拟机不会使用任何构造函数来创建对象。\n对一个对象进行序列化需要我们在类中实现可序列化的接口。\n```\nObjectInputStream in = new ObjectInputStream(new FileInputStream(\"data.obj\")); \nEmployee emp5 = (Employee) in.readObject();\ninvokevirtual #118 // Method java/io/ObjectInputStream.readObject:Ljava/lang/Object;\n```\n正如我们在以上的字节代码片段中所看到的，除第一种被转换为一个新的函数和一个 invokespecial 指令以外，其它4种方法都被调用并转换为invokevirtual。\n示例\n让我们来看看准备创建对象的 Employee 类：\n```java\nclass Employee implements Cloneable, Serializable {\n    private static final long serialVersionUID = 1L;\n    private String name;\n\n    public Employee() {\n        System.out.println(\"Employee Constructor Called...\");\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = (prime * result) + ((name == null) ? 0 : name.hashCode);\n        return (result);\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return (true);\n        }\n        if (obj == null) {\n            return (false);\n        }\n        if (getClass != obj.getClass) {\n            return (false);\n        }\n        Employee other = (Employee) obj;\n        if (name == null) {\n            if (other.name != null) {\n                return (false);\n            }\n        } else if (!name.equals(other.name)) {\n            return (false);\n        }\n        return (true);\n    }\n\n    @Override\n    public String toString() {\n        return (\"Employee [name=\" + name + \"]\");\n    }\n\n    @Override\n    public Object clone() {\n        Object obj = null;\n        try {\n            obj = super.clone;\n        } catch (CloneNotSupportedException e) {\n            e.printStackTrace;\n        }\n        return (obj);\n    }\n}\n```\n在下面的Java程序中我们用5种方式来创建 Employee对象。\n```java\npublic class ObjectCreation {\n    public static void main(String... args) throws Exception {\n        // By using new keyword \n        Employee emp1 = new Employee();\n        emp1.setName(\"Naresh\");\n        System.out.println(emp1 + \", hashcode : \" + emp1.hashCode());\n\n        // By using Class class's newInstance method \n        Employee emp2 = (Employee) Class.forName(\"org.programming.mitra.exercises.Employee\").newInstance();\n        // Or we can simply do this // Employee emp2 = Employee.class.newInstance(); \n        emp2.setName(\"Rishi\");\n        System.out.println(emp2 + \", hashcode : \" + emp2.hashCode());\n\n        // By using Constructor class's newInstance method Constructor\n    }\n}\n```\n此程序输出结果如下：\n```\nEmployee Constructor Called… Employee [name=Naresh], hashcode : -1968815046 \nEmployee Constructor Called… Employee [name=Rishi], hashcode : 78970652 \nEmployee Constructor Called… Employee [name=Yogesh], hashcode : -1641292792 \nEmployee [name=Atul], hashcode : 2051657 Employee [name=Akash], hashcode : 63313419\n```","source":"_posts/Java中创建对象的5种不同方法.md","raw":"---\ntitle: Java中创建对象的5种不同方法\ndate: 2017-04-08 18:13:23\ntags: Java\ncategories: Essay\n---\n\n作为Java开发者，我们每天都会创建大量的对象，但是，我们总是使用管理依赖系统（如Spring框架）来创建这些对象。其实还有其他方法可以创建对象，在接下来的文章中我会进行详细介绍。\n1.使用new关键字\n这是最常见的创建对象的方法，并且也非常简单。通过使用这种方法我们可以调用任何我们需要调用的构造函数。\n```java\nEmployee emp1 = new Employee();\n0: new #19 // class org/programming/mitra/exercises/Employee 3: dup 4: invokespecial #21 // Method org/programming/mitra/exercises/Employee.\"\":V\n```\n2.使用class类的newInstance方法\n我们也可以使用class类的newInstance方法来创建对象。此newInstance方法调用无参构造函数以创建对象。\n我们可以通过newInstance 用以下方式创建对象：\n```java\nEmployee emp2 = (Employee) Class.forName(\"org.programming.mitra.exercises.Employee\").newInstance;\n```\n或者\n```java\nEmployee emp2 = Employee.class.newInstance;\n51: invokevirtual #70 // Method java/lang/Class.newInstance:Ljava/lang/Object;\n```\n3.使用构造函数类的 newInstance方法\n与使用class类的newInstance方法相似，java.lang.reflect.Constructor类中有一个可以用来创建对象的newInstance函数方法。通过使用这个newInstance方法我们也可以调用参数化构造函数和私有构造函数。\nConstructor\n111: invokevirtual #80 // Method java/lang/reflect/Constructor.newInstance:([Ljava/lang/Object;)Ljava/lang/Object;\n这些 newInstance 方法被认为是创建对象的反射手段。实际上，内部类的newInstance方法使用构造函数类的 newInstance 方法。这就是为什么后者是首选并且使用不同的框架如Spring, Hibernate, Struts等。\n4.使用clone方法\n实际上无论何时我们调用clone 方法，JAVA虚拟机都为我们创建了一个新的对象并且复制了之前对象的内容到这个新的对象中。使用 clone方法创建对象不会调用任何构造函数。\n为了在对象中使用clone方法，我们需要在其中实现可克隆类型并定义clone方法。\n```\nEmployee emp4 = (Employee) emp3.clone();\n162: invokevirtual #87 // Method org/programming/mitra/exercises/Employee.clone Ljava/lang/Object;\n```\n5.使用反序列化\n无论何时我们对一个对象进行序列化和反序列化，JAVA虚拟机都会为我们创建一个单独的对象。在反序列化中，JAVA虚拟机不会使用任何构造函数来创建对象。\n对一个对象进行序列化需要我们在类中实现可序列化的接口。\n```\nObjectInputStream in = new ObjectInputStream(new FileInputStream(\"data.obj\")); \nEmployee emp5 = (Employee) in.readObject();\ninvokevirtual #118 // Method java/io/ObjectInputStream.readObject:Ljava/lang/Object;\n```\n正如我们在以上的字节代码片段中所看到的，除第一种被转换为一个新的函数和一个 invokespecial 指令以外，其它4种方法都被调用并转换为invokevirtual。\n示例\n让我们来看看准备创建对象的 Employee 类：\n```java\nclass Employee implements Cloneable, Serializable {\n    private static final long serialVersionUID = 1L;\n    private String name;\n\n    public Employee() {\n        System.out.println(\"Employee Constructor Called...\");\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = (prime * result) + ((name == null) ? 0 : name.hashCode);\n        return (result);\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return (true);\n        }\n        if (obj == null) {\n            return (false);\n        }\n        if (getClass != obj.getClass) {\n            return (false);\n        }\n        Employee other = (Employee) obj;\n        if (name == null) {\n            if (other.name != null) {\n                return (false);\n            }\n        } else if (!name.equals(other.name)) {\n            return (false);\n        }\n        return (true);\n    }\n\n    @Override\n    public String toString() {\n        return (\"Employee [name=\" + name + \"]\");\n    }\n\n    @Override\n    public Object clone() {\n        Object obj = null;\n        try {\n            obj = super.clone;\n        } catch (CloneNotSupportedException e) {\n            e.printStackTrace;\n        }\n        return (obj);\n    }\n}\n```\n在下面的Java程序中我们用5种方式来创建 Employee对象。\n```java\npublic class ObjectCreation {\n    public static void main(String... args) throws Exception {\n        // By using new keyword \n        Employee emp1 = new Employee();\n        emp1.setName(\"Naresh\");\n        System.out.println(emp1 + \", hashcode : \" + emp1.hashCode());\n\n        // By using Class class's newInstance method \n        Employee emp2 = (Employee) Class.forName(\"org.programming.mitra.exercises.Employee\").newInstance();\n        // Or we can simply do this // Employee emp2 = Employee.class.newInstance(); \n        emp2.setName(\"Rishi\");\n        System.out.println(emp2 + \", hashcode : \" + emp2.hashCode());\n\n        // By using Constructor class's newInstance method Constructor\n    }\n}\n```\n此程序输出结果如下：\n```\nEmployee Constructor Called… Employee [name=Naresh], hashcode : -1968815046 \nEmployee Constructor Called… Employee [name=Rishi], hashcode : 78970652 \nEmployee Constructor Called… Employee [name=Yogesh], hashcode : -1641292792 \nEmployee [name=Atul], hashcode : 2051657 Employee [name=Akash], hashcode : 63313419\n```","slug":"Java中创建对象的5种不同方法","published":1,"updated":"2018-04-25T12:46:59.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2fj0np7000qq4vg90oo4894","content":"<p>作为Java开发者，我们每天都会创建大量的对象，但是，我们总是使用管理依赖系统（如Spring框架）来创建这些对象。其实还有其他方法可以创建对象，在接下来的文章中我会进行详细介绍。<br>1.使用new关键字<br>这是最常见的创建对象的方法，并且也非常简单。通过使用这种方法我们可以调用任何我们需要调用的构造函数。</p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Employee emp1 = <span class=\"keyword\">new</span> Employee();</span><br><span class=\"line\">0: new #19 // class org/programming/mitra/exercises/Employee 3: dup 4: invokespecial #21 // Method org/programming/mitra/exercises/Employee.\"\":V</span><br></pre></td></tr></table></figure><a id=\"more\"></a>\n\n<p>2.使用class类的newInstance方法<br>我们也可以使用class类的newInstance方法来创建对象。此newInstance方法调用无参构造函数以创建对象。<br>我们可以通过newInstance 用以下方式创建对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Employee emp2 = (Employee) Class.forName(<span class=\"string\">\"org.programming.mitra.exercises.Employee\"</span>).newInstance;</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Employee emp2 = Employee.class.newInstance;</span><br><span class=\"line\">51: invokevirtual #70 // Method java/lang/Class.newInstance:Ljava/lang/Object;</span><br></pre></td></tr></table></figure>\n<p>3.使用构造函数类的 newInstance方法<br>与使用class类的newInstance方法相似，java.lang.reflect.Constructor类中有一个可以用来创建对象的newInstance函数方法。通过使用这个newInstance方法我们也可以调用参数化构造函数和私有构造函数。<br>Constructor<br>111: invokevirtual #80 // Method java/lang/reflect/Constructor.newInstance:([Ljava/lang/Object;)Ljava/lang/Object;<br>这些 newInstance 方法被认为是创建对象的反射手段。实际上，内部类的newInstance方法使用构造函数类的 newInstance 方法。这就是为什么后者是首选并且使用不同的框架如Spring, Hibernate, Struts等。<br>4.使用clone方法<br>实际上无论何时我们调用clone 方法，JAVA虚拟机都为我们创建了一个新的对象并且复制了之前对象的内容到这个新的对象中。使用 clone方法创建对象不会调用任何构造函数。<br>为了在对象中使用clone方法，我们需要在其中实现可克隆类型并定义clone方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Employee emp4 = (Employee) emp3.clone();</span><br><span class=\"line\">162: invokevirtual #87 // Method org/programming/mitra/exercises/Employee.clone Ljava/lang/Object;</span><br></pre></td></tr></table></figure>\n<p>5.使用反序列化<br>无论何时我们对一个对象进行序列化和反序列化，JAVA虚拟机都会为我们创建一个单独的对象。在反序列化中，JAVA虚拟机不会使用任何构造函数来创建对象。<br>对一个对象进行序列化需要我们在类中实现可序列化的接口。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ObjectInputStream in = new ObjectInputStream(new FileInputStream(&quot;data.obj&quot;)); </span><br><span class=\"line\">Employee emp5 = (Employee) in.readObject();</span><br><span class=\"line\">invokevirtual #118 // Method java/io/ObjectInputStream.readObject:Ljava/lang/Object;</span><br></pre></td></tr></table></figure>\n<p>正如我们在以上的字节代码片段中所看到的，除第一种被转换为一个新的函数和一个 invokespecial 指令以外，其它4种方法都被调用并转换为invokevirtual。<br>示例<br>让我们来看看准备创建对象的 Employee 类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span>, <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Employee</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Employee Constructor Called...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> prime = <span class=\"number\">31</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> result = <span class=\"number\">1</span>;</span><br><span class=\"line\">        result = (prime * result) + ((name == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : name.hashCode);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == obj) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getClass != obj.getClass) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Employee other = (Employee) obj;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (name == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (other.name != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!name.equals(other.name)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"string\">\"Employee [name=\"</span> + name + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Object obj = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            obj = <span class=\"keyword\">super</span>.clone;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在下面的Java程序中我们用5种方式来创建 Employee对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObjectCreation</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// By using new keyword </span></span><br><span class=\"line\">        Employee emp1 = <span class=\"keyword\">new</span> Employee();</span><br><span class=\"line\">        emp1.setName(<span class=\"string\">\"Naresh\"</span>);</span><br><span class=\"line\">        System.out.println(emp1 + <span class=\"string\">\", hashcode : \"</span> + emp1.hashCode());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// By using Class class's newInstance method </span></span><br><span class=\"line\">        Employee emp2 = (Employee) Class.forName(<span class=\"string\">\"org.programming.mitra.exercises.Employee\"</span>).newInstance();</span><br><span class=\"line\">        <span class=\"comment\">// Or we can simply do this // Employee emp2 = Employee.class.newInstance(); </span></span><br><span class=\"line\">        emp2.setName(<span class=\"string\">\"Rishi\"</span>);</span><br><span class=\"line\">        System.out.println(emp2 + <span class=\"string\">\", hashcode : \"</span> + emp2.hashCode());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// By using Constructor class's newInstance method Constructor</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此程序输出结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Employee Constructor Called… Employee [name=Naresh], hashcode : -1968815046 </span><br><span class=\"line\">Employee Constructor Called… Employee [name=Rishi], hashcode : 78970652 </span><br><span class=\"line\">Employee Constructor Called… Employee [name=Yogesh], hashcode : -1641292792 </span><br><span class=\"line\">Employee [name=Atul], hashcode : 2051657 Employee [name=Akash], hashcode : 63313419</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>作为Java开发者，我们每天都会创建大量的对象，但是，我们总是使用管理依赖系统（如Spring框架）来创建这些对象。其实还有其他方法可以创建对象，在接下来的文章中我会进行详细介绍。<br>1.使用new关键字<br>这是最常见的创建对象的方法，并且也非常简单。通过使用这种方法我们可以调用任何我们需要调用的构造函数。</p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Employee emp1 = <span class=\"keyword\">new</span> Employee();</span><br><span class=\"line\">0: new #19 // class org/programming/mitra/exercises/Employee 3: dup 4: invokespecial #21 // Method org/programming/mitra/exercises/Employee.\"\":V</span><br></pre></td></tr></table></figure>","more":"\n\n<p>2.使用class类的newInstance方法<br>我们也可以使用class类的newInstance方法来创建对象。此newInstance方法调用无参构造函数以创建对象。<br>我们可以通过newInstance 用以下方式创建对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Employee emp2 = (Employee) Class.forName(<span class=\"string\">\"org.programming.mitra.exercises.Employee\"</span>).newInstance;</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Employee emp2 = Employee.class.newInstance;</span><br><span class=\"line\">51: invokevirtual #70 // Method java/lang/Class.newInstance:Ljava/lang/Object;</span><br></pre></td></tr></table></figure>\n<p>3.使用构造函数类的 newInstance方法<br>与使用class类的newInstance方法相似，java.lang.reflect.Constructor类中有一个可以用来创建对象的newInstance函数方法。通过使用这个newInstance方法我们也可以调用参数化构造函数和私有构造函数。<br>Constructor<br>111: invokevirtual #80 // Method java/lang/reflect/Constructor.newInstance:([Ljava/lang/Object;)Ljava/lang/Object;<br>这些 newInstance 方法被认为是创建对象的反射手段。实际上，内部类的newInstance方法使用构造函数类的 newInstance 方法。这就是为什么后者是首选并且使用不同的框架如Spring, Hibernate, Struts等。<br>4.使用clone方法<br>实际上无论何时我们调用clone 方法，JAVA虚拟机都为我们创建了一个新的对象并且复制了之前对象的内容到这个新的对象中。使用 clone方法创建对象不会调用任何构造函数。<br>为了在对象中使用clone方法，我们需要在其中实现可克隆类型并定义clone方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Employee emp4 = (Employee) emp3.clone();</span><br><span class=\"line\">162: invokevirtual #87 // Method org/programming/mitra/exercises/Employee.clone Ljava/lang/Object;</span><br></pre></td></tr></table></figure>\n<p>5.使用反序列化<br>无论何时我们对一个对象进行序列化和反序列化，JAVA虚拟机都会为我们创建一个单独的对象。在反序列化中，JAVA虚拟机不会使用任何构造函数来创建对象。<br>对一个对象进行序列化需要我们在类中实现可序列化的接口。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ObjectInputStream in = new ObjectInputStream(new FileInputStream(&quot;data.obj&quot;)); </span><br><span class=\"line\">Employee emp5 = (Employee) in.readObject();</span><br><span class=\"line\">invokevirtual #118 // Method java/io/ObjectInputStream.readObject:Ljava/lang/Object;</span><br></pre></td></tr></table></figure>\n<p>正如我们在以上的字节代码片段中所看到的，除第一种被转换为一个新的函数和一个 invokespecial 指令以外，其它4种方法都被调用并转换为invokevirtual。<br>示例<br>让我们来看看准备创建对象的 Employee 类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span>, <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Employee</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Employee Constructor Called...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> prime = <span class=\"number\">31</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> result = <span class=\"number\">1</span>;</span><br><span class=\"line\">        result = (prime * result) + ((name == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : name.hashCode);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == obj) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getClass != obj.getClass) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Employee other = (Employee) obj;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (name == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (other.name != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!name.equals(other.name)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"string\">\"Employee [name=\"</span> + name + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Object obj = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            obj = <span class=\"keyword\">super</span>.clone;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在下面的Java程序中我们用5种方式来创建 Employee对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObjectCreation</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// By using new keyword </span></span><br><span class=\"line\">        Employee emp1 = <span class=\"keyword\">new</span> Employee();</span><br><span class=\"line\">        emp1.setName(<span class=\"string\">\"Naresh\"</span>);</span><br><span class=\"line\">        System.out.println(emp1 + <span class=\"string\">\", hashcode : \"</span> + emp1.hashCode());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// By using Class class's newInstance method </span></span><br><span class=\"line\">        Employee emp2 = (Employee) Class.forName(<span class=\"string\">\"org.programming.mitra.exercises.Employee\"</span>).newInstance();</span><br><span class=\"line\">        <span class=\"comment\">// Or we can simply do this // Employee emp2 = Employee.class.newInstance(); </span></span><br><span class=\"line\">        emp2.setName(<span class=\"string\">\"Rishi\"</span>);</span><br><span class=\"line\">        System.out.println(emp2 + <span class=\"string\">\", hashcode : \"</span> + emp2.hashCode());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// By using Constructor class's newInstance method Constructor</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此程序输出结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Employee Constructor Called… Employee [name=Naresh], hashcode : -1968815046 </span><br><span class=\"line\">Employee Constructor Called… Employee [name=Rishi], hashcode : 78970652 </span><br><span class=\"line\">Employee Constructor Called… Employee [name=Yogesh], hashcode : -1641292792 </span><br><span class=\"line\">Employee [name=Atul], hashcode : 2051657 Employee [name=Akash], hashcode : 63313419</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Apr 25 2018 20:46:59 GMT+0800 (GMT+08:00)","title":"Java中创建对象的5种不同方法","path":"2017/04/08/Java中创建对象的5种不同方法/","eyeCatchImage":null,"excerpt":null,"date":"2017-04-08T10:13:23.000Z","pv":0,"totalPV":0,"categories":"Essay","tags":["Java"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":3740},{"title":"Java动态代理与Cglib库","date":"2017-03-22T10:20:58.000Z","_content":"\nJDK动态代理\n\n　　代理模式是常用的Java设计模式，他的特征是代理类与委托类有同样的接口，代理类主要负责为委托类预处理消息、过滤消息、把消息转发给委托类，以及事后处理消息等。代理类与委托类之间通常会存在关联关系，一个代理类的对象与一个委托类的对象关联，代理类的对象本身并不真正实现服务，而是通过调用委托类的对象的相关方法，来提供特定的服务。 \n　　按照代理的创建时期，代理类可以分为两种。 \n　　静态代理：由程序员创建或特定工具自动生成源代码，再对其编译。在程序运行前，代理类的.class文件就已经存在了。 \n　　动态代理：在程序运行时，运用反射机制动态创建而成。 \n　　为什么使用动态代理？因为动态代理可以对请求进行任何处理。\n　　哪些地方需要动态代理？不允许直接访问某些类；对访问要做特殊处理等。\n　　目前Java开发包中包含了对动态代理的支持，但是其实现只支持对接口的的实现。 其实现主要通过java.lang.reflect.Proxy类和java.lang.reflect.InvocationHandler接口。 Proxy类主要用来获取动态代理对象，InvocationHandler接口用来约束调用者实现。\n　　以下为模拟案例，通过动态代理实现在方法调用前后向控制台输出两句字符串。\n　　定义一个HelloWorld接口：\n[java] view plain copy\npackage com.ljq.test;  \n  \n /** \n * 定义一个HelloWorld接口 \n *  \n * @author jiqinlin \n * \n */  \n public interface HelloWorld {  \n    public void sayHelloWorld();  \n}  \n　　类HelloWorldImpl是HelloWorld接口的实现：\n[java] view plain copy\npackage com.ljq.test;  \n  \n /** \n * 类HelloWorldImpl是HelloWorld接口的实现 \n *  \n * @author jiqinlin \n * \n */  \n public class HelloWorldImpl implements HelloWorld{  \n  \n    public void sayHelloWorld() {  \n        System.out.println(\"HelloWorld!\");  \n    }  \n  \n}  \n　　HelloWorldHandler是 InvocationHandler接口实现：\n[java] view plain copy\npackage com.ljq.test;  \n  \n import java.lang.reflect.InvocationHandler;  \n import java.lang.reflect.Method;  \n  \n /** \n * 实现在方法调用前后向控制台输出两句字符串 \n *  \n * @author jiqinlin \n * \n */  \n public class HelloWorldHandler implements InvocationHandler{  \n    //要代理的原始对象  \n     private Object obj;  \n      \n    public HelloWorldHandler(Object obj) {  \n        super();  \n        this.obj = obj;  \n    }  \n  \n    /** \n     * 在代理实例上处理方法调用并返回结果 \n     *  \n     * @param proxy 代理类 \n     * @param method 被代理的方法 \n     * @param args 该方法的参数数组 \n     */  \n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {  \n        Object result = null;  \n        //调用之前  \n         doBefore();  \n        //调用原始对象的方法  \n        result=method.invoke(obj, args);  \n        //调用之后  \n        doAfter();  \n        return result;  \n    }  \n      \n    private void doBefore(){  \n        System.out.println(\"before method invoke\");  \n    }  \n      \n    private void doAfter(){  \n        System.out.println(\"after method invoke\");  \n    }  \n      \n}  \n　　测试类：\n[java] view plain copy\npackage com.ljq.test;  \n  \nimport java.lang.reflect.InvocationHandler;  \nimport java.lang.reflect.Proxy;  \n  \n  \npublic class HelloWorldTest {  \n  \n    public static void main(String[] args) {  \n        HelloWorld helloWorld=new HelloWorldImpl();  \n        InvocationHandler handler=new HelloWorldHandler(helloWorld);  \n  \n        //创建动态代理对象  \n        HelloWorld proxy=(HelloWorld)Proxy.newProxyInstance(  \n            helloWorld.getClass().getClassLoader(),  \n            helloWorld.getClass().getInterfaces(),  \n            handler);  \n        proxy.sayHelloWorld();  \n    }  \n}  \n　　运行结果为：\n[plain] view plain copy\nbefore method invoke  \nHelloWorld!  \nafter method invoke  \n　　基本流程：用Proxy类创建目标类的动态代理，创建时需要指定一个自己实现InvocationHandler接口的回调类的对象，这个回调类中有一个invoke()用于拦截对目标类各个方法的调用。创建好代理后就可以直接在代理上调用目标对象的各个方法。\n　　JDK自从1.3版本开始，就引入了动态代理，并且经常被用来动态地创建代理。JDK的动态代理用起来非常简单，但它有一个限制，就是使用动态代理的对象必须实现一个或多个接口。比如上面的HelloWorldImpl类，实现了HelloWorld接口，所以可以用JDK的动态代理。如果想代理没有实现接口的继承的类，该怎么办？ CGLIB就是最好的选择（https://github.com/cglib/cglib，使用apache license 2.0）。其他比较有名的还有从JBoss项目衍生出来的Javassist（https://github.com/jboss-javassist/javassist），这里介绍Cglib。\n\nCglib代码生成库\n\n　　CGlib是一个强大的，高性能，高质量的Code生成类库。它可以在运行期扩展Java类与实现Java接口。其底层是通过小而快的字节码处理框架ASM（http://forge.ow2.org/projects/asm，使用BSD License）来转换字节码并生成新的类。大部分功能实际上是asm所提供的，CGlib只是封装了asm，简化了asm的操作，实现了在运行期动态生成新的class。\n　　CGlib被许多AOP的框架使用，例如spring AOP和dynaop，为他们提供方法的interception（拦截）；最流行的OR Mapping工具hibernate也使用CGLIB来代理单端single-ended（多对一和一对一）关联（对集合的延迟抓取，是采用其他机制实现的）；EasyMock和jMock是通过使用模仿（moke）对象来测试java代码的包，它们都通过使用CGLIB来为那些没有接口的类创建模仿（moke）对象。\n　　CGLIB包的基本代码很少，但学起来有一定的困难，主要是缺少文档，API描述过于简单，这也是开源软件的一个不足之处。目前CGLIB的版本是cglib-2.2.jar，主要由一下部分组成：\n　　（1）net.sf.cglib.core：底层字节码处理类，他们大部分与ASM有关系。\n　　（2）net.sf.cglib.transform：编译期或运行期类和类文件的转换。\n　　（3）net.sf.cglib.proxy ：实现创建代理和方法拦截器的类。\n　　（4）net.sf.cglib.reflect ：实现快速反射和C#风格代理的类。\n　　（5）net.sf.cglib.util：集合排序工具类。\n　　（6）net.sf.cglib.beans：JavaBean相关的工具类。\n　　CGLIB包是在ASM之上的一个高级别的层。对代理那些没有实现接口的类非常有用。本质上，它是通过动态的生成一个子类去覆盖所要代理类的不是final的方法，并设置好callback，则原有类的每个方法调用就会转变成调用用户定义的拦截方法（interceptors），这比JDK动态代理方法快多了。可见，Cglib的原理是对指定的目标类动态生成一个子类，并覆盖其中方法实现增强，但因为采用的是继承，所以不能对final修饰的类和final方法进行代理。\n\n用Cglib创建动态代理\n\n　　下图表示Cglib常用到的几类。\n\n图1 Cglib主要的接口\n　　创建一个具体类的代理时，通常要用到的CGLIB包的APIs：\n　　net.sf.cglib.proxy.Callback接口：在CGLIB包中是一个很关键的接口，所有被net.sf.cglib.proxy.Enhancer类调用的回调（callback）接口都要继承这个接口。\n　　net.sf.cglib.proxy.MethodInterceptor接口：是最通用的回调（callback）类型，它经常被AOP用来实现拦截（intercept）方法的调用。这个接口只定义了一个方法。\n[java] view plain copy\npublic Object intercept(Object object, java.lang.reflect.Method method, Object[] args, MethodProxy proxy) throws Throwable;  \n　　当net.sf.cglib.proxy.MethodInterceptor做为所有代理方法的回调 （callback）时，当对基于代理的方法调用时，在调用原对象的方法的之前会调用这个方法，如图下图所示。第一个参数是代理对像，第二和第三个参数分别 是拦截的方法和方法的参数。原来的方法可能通过使用java.lang.reflect.Method对象的一般反射调用，或者使用 net.sf.cglib.proxy.MethodProxy对象调用。net.sf.cglib.proxy.MethodProxy通常被首选使用，因为它更快。在这个方法中，我们可以在调用原方法之前或之后注入自己的代码。\n\n图1\n　　net.sf.cglib.proxy.MethodInterceptor能够满足任何的拦截（interception ）需要，当对有些情况下可能过度。为了简化和提高性能，CGLIB包提供了一些专门的回调（callback）类型。例如：\n　　net.sf.cglib.proxy.FixedValue：为提高性能，FixedValue回调对强制某一特别方法返回固定值是有用的。\n　　net.sf.cglib.proxy.NoOp：NoOp回调把对方法调用直接委派到这个方法在父类中的实现。\n　　net.sf.cglib.proxy.LazyLoader：当实际的对象需要延迟装载时，可以使用LazyLoader回调。一旦实际对象被装载，它将被每一个调用代理对象的方法使用。\n　　net.sf.cglib.proxy.Dispatcher：Dispathcer回调和LazyLoader回调有相同的特点，不同的是，当代理方法被调用时，装载对象的方法也总要被调用。\n　　 net.sf.cglib.proxy.ProxyRefDispatcher：ProxyRefDispatcher回调和Dispatcher一样，不同的是，它可以把代理对象作为装载对象方法的一个参数传递。\n　　代理类的所以方法经常会用到回调（callback），当然你也可以使用net.sf.cglib.proxy.CallbackFilter 有选择的对一些方法使用回调（callback），这种考虑周详的控制特性在JDK的动态代理中是没有的。在JDK代理中，对 java.lang.reflect.InvocationHandler方法的调用对代理类的所有方法都有效。\n　　CGLIB的代理包也对net.sf.cglib.proxy.Mixin提供支持。基本上，它允许多个对象被绑定到一个单一的大对象。在代理中对方法的调用委托到下面相应的对象中。\n　　接下来我们看看如何使 用CGLIB代理APIs创建代理。\n　　1、创建一个简单的代理\n　　CGLIB代理最核心类net.sf.cglib.proxy.Enhancer， 为了创建一个代理，最起码你要用到这个类。首先，让我们使用NoOp回调创建一个代理。\n[java] view plain copy\n/**  \n \n* Create a proxy using NoOp callback. The target class  \n* must have a default zero-argument constructor \n*  \n* @param targetClass the super class of the proxy  \n* @return a new proxy for a target class instance  \n*/   \npublic Object createProxy(Class targetClass) {   \n    Enhancer enhancer = new Enhancer();  \n    enhancer.setSuperclass(targetClass);  \n    enhancer.setCallback(NoOp.INSTANCE);  \n    return enhancer.create();  \n}   \n　　返回值是target类一个实例的代理。在这个例子中，我们为net.sf.cglib.proxy.Enhancer 配置了一个单一的回调（callback）。我们可以看到很少直接创建一个简单的代理，而是创建一个net.sf.cglib.proxy.Enhancer的实例，在net.sf.cglib.proxy.Enhancer类中你可使用静态帮助方法创建一个简单的代理。一般推荐使用上面例子的方法创建代理，因为它允许你通过配置net.sf.cglib.proxy.Enhancer实例很好的控制代理的创建。\n　　要注意的是，target类是作为产生的代理的父类传进来的。不同于JDK的动态代理，它不能在创建代理时传target对象，target对象必须被CGLIB包来创建。在这个例子中，默认的无参数构造器时用来创建target实例的。如果你想用CGLIB来创建有参数的实例，用net.sf.cglib.proxy.Enhancer.create(Class[], Object[])方法替代net.sf.cglib.proxy.Enhancer.create()就可以了。方法中第一个参数定义了参数的类型，第 二个是参数的值。在参数中，基本类型应被转化成类的类型。\n　　2、使用MethodInterceptor创建一个代理\n　　为了更好的使用代理，我们可以使用自己定义的MethodInterceptor类型回调（callback）来代替net.sf.cglib.proxy.NoOp回调。当对代理中所有方法的调用时，都会转向MethodInterceptor类型的拦截（intercept）方法，在拦截方法中再调用底层对象相应的方法。下面我们举个例子，假设你想对目标对象的所有方法调用进行权限的检查，如果没有经过授权，就抛出一个运行时的异常AuthorizationException。其中AuthorizationService.java接口的代码如下：\n[java] view plain copy\npackage com.lizjason.cglibproxy;   \n  \nimport java.lang.reflect.Method;   \n  \n/**  \n * A simple authorization service for illustration purpose.  \n * @author Jason Zhicheng Li (jason@lizjason.com)  \n */   \npublic interface AuthorizationService {   \n    void authorize(Method method);   \n}  \n　　对net.sf.cglib.proxy.MethodInterceptor接口的实现的类AuthorizationInterceptor.java代码如下：\n[java] view plain copy\npackage com.lizjason.cglibproxy.impl;  \nimport java.lang.reflect.Method;  \nimport net.sf.cglib.proxy.MethodInterceptor;  \nimport net.sf.cglib.proxy.MethodProxy;  \n  \nimport com.lizjason.cglibproxy.AuthorizationService;  \n  \n/** \n * A simple MethodInterceptor implementation to \n * apply authorization checks for proxy method calls. \n */  \npublic class AuthorizationInterceptor implements MethodInterceptor {  \n  \n    private AuthorizationService authorizationService;  \n  \n    /** \n     * Create a AuthorizationInterceptor with the given AuthorizationService \n     */  \n    public AuthorizationInterceptor (AuthorizationService authorizationService) {  \n        this.authorizationService = authorizationService;  \n    }  \n  \n    /** \n     * Intercept the proxy method invocations to inject authorization check. * The original \n     * method is invoked through MethodProxy. \n     */  \n    public Object intercept(Object object, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {  \n        if (authorizationService != null) {  \n            //may throw an AuthorizationException if authorization failed  \n            authorizationService.authorize(method);  \n        }  \n        return methodProxy.invokeSuper(object, args);  \n    }  \n}  \n　　我们可以看到在拦截方法中，首先进行权限的检查，如果通过权限的检查，拦截方法再调用目标对象的原始方法。由于性能的原因，对原始方法的调用我们使用CGLIB的net.sf.cglib.proxy.MethodProxy对象，而不是反射中一般使用java.lang.reflect.Method对象。\n　　下面是一个完整的使用MethodInterceptor的例子。\n[java] view plain copy\npackage cglibexample;  \n  \nimport java.lang.reflect.Method;  \nimport net.sf.cglib.proxy.Enhancer;  \nimport net.sf.cglib.proxy.MethodInterceptor;  \nimport net.sf.cglib.proxy.MethodProxy;  \n  \n/** \n * 定义一个HelloWorld类，没有实现接口 \n * \n */  \nclass HelloWorld {  \n  \n    public void sayHelloWorld() {  \n        System.out.println(\"HelloWorld!\");  \n    }  \n}  \n  \n/** \n * 通过Cglib实现在方法调用前后向控制台输出两句字符串 \n * \n */  \nclass CglibProxy implements MethodInterceptor {  \n  \n    //要代理的原始对象  \n    private Object obj;  \n  \n    public Object createProxy(Object target) {  \n        this.obj = target;  \n        Enhancer enhancer = new Enhancer();  \n        // 设置要代理的目标类，以扩展它的功能  \n        enhancer.setSuperclass(this.obj.getClass());  \n        // 设置单一回调对象，在回调中拦截对目标方法的调用  \n        enhancer.setCallback(this);  \n        //设置类装载器  \n        enhancer.setClassLoader(target.getClass().getClassLoader());  \n        //创建代理对象  \n        return enhancer.create();  \n    }  \n  \n    /** \n     * 回调方法:在代理实例上拦截并处理目标方法的调用，返回结果 \n     * \n     * @param proxy 代理类 \n     * @param method 被代理的方法 \n     * @param params 该方法的参数数组 \n     * @param methodProxy \n     */  \n    @Override  \n    public Object intercept(Object proxy, Method method, Object[] params,  \n            MethodProxy methodProxy) throws Throwable {  \n        Object result = null;  \n        // 调用之前  \n        doBefore();  \n        // 调用目标方法，用methodProxy,  \n        // 而不是原始的method，以提高性能  \n        result = methodProxy.invokeSuper(proxy, params);  \n        // 调用之后  \n        doAfter();  \n        return result;  \n    }  \n  \n    private void doBefore() {  \n        System.out.println(\"before method invoke\");  \n    }  \n  \n    private void doAfter() {  \n        System.out.println(\"after method invoke\");  \n    }  \n}  \n  \npublic class TestCglib {  \n  \n    public static void main(String[] args) {  \n        CglibProxy cglibProxy = new CglibProxy();  \n        HelloWorld hw = (HelloWorld) cglibProxy.createProxy(new HelloWorld());  \n        hw.sayHelloWorld();  \n    }  \n}  \n　　输出结果：\n[plain] view plain copy\nbefore method invoke  \nHelloWorld!  \nafter method invoke  \n　　基本流程：需要自己写代理类，它实现MethodInterceptor接口，有一个intercept()回调方法用于拦截对目标方法的调用，里面使用methodProxy来调用目标方法。创建代理对象要用Enhance类，用它设置好代理的目标类、有intercept()回调的代理类实例、最后用create()创建并返回代理实例。\n　　3、使用CallbackFilter在方法层设置回调\n　　net.sf.cglib.proxy.CallbackFilter允许我们在方法层设置回调（callback）。假如你有一个PersistenceServiceImpl类，它有两个方法：save和load，其中方法save需要权限检查，而方法load不需要权限检查。\n[java] view plain copy\nimport com.lizjason.cglibproxy.PersistenceService;  \nimport java.lang.reflect.Method;  \nimport net.sf.cglib.proxy.CallbackFilter;  \n  \n/** \n * A simple implementation of PersistenceService interface \n */  \nclass PersistenceServiceImpl implements PersistenceService {  \n  \n    //需要权限检查  \n    public void save(long id, String data) {  \n        System.out.println(data + \" has been saved successfully.\");  \n    }  \n  \n    //不需要权限检查  \n    public String load(long id) {  \n        return \"Test CGLIB CallBackFilter\";  \n    }  \n}  \n  \n/** \n * An implementation of CallbackFilter for PersistenceServiceImpl \n */  \npublic class PersistenceServiceCallbackFilter implements CallbackFilter {   \n    //callback index for save method  \n    private static final int SAVE = 0;  \n    //callback index for load method  \n    private static final int LOAD = 1;  \n  \n    /** \n     * Specify which callback to use for the method being invoked.  \n     * @param method the method being invoked. \n     * @return  \n     */  \n    @Override  \n    public int accept(Method method) {  \n        //指定各方法的代理回调索引  \n        String name = method.getName();  \n        if (\"save\".equals(name)) {  \n            return SAVE;  \n        }  \n        // for other methods, including the load method, use the  \n        // second callback  \n        return LOAD;  \n    }  \n}  \n　　accept方法中对代理方法和回调进行了匹配，返回的值是某方法在回调数组中的索引。下面是PersistenceServiceImpl类代理的实现。\n[java] view plain copy\n...  \nEnhancer enhancer = new Enhancer();  \nenhancer.setSuperclass(PersistenceServiceImpl.class);  \n//设置回调过滤器  \nCallbackFilter callbackFilter = new PersistenceServiceCallbackFilter();  \nenhancer.setCallbackFilter(callbackFilter);  \n//创建各个目标方法的代理回调  \nAuthorizationService authorizationService = ...  \nCallback saveCallback = new AuthorizationInterceptor(authorizationService);  \nCallback loadCallback = NoOp.INSTANCE;  \n//顺序要与指定的回调索引一致  \nCallback[] callbacks = new Callback[]{saveCallback, loadCallback };  \nenhancer.setCallbacks(callbacks);  //设置回调  \n...  \nreturn (PersistenceServiceImpl)enhancer.create();  //创建代理对象  \n　　在这个例子中save方法使用了AuthorizationInterceptor实例，load方法使用了NoOp实例。此外，你也可以通过net.sf.cglib.proxy.Enhancer.setInterfaces(Class[])方法指定代理对象所实现的接口。\n　　除了为net.sf.cglib.proxy.Enhancer指定回调数组，你还可以通过net.sf.cglib.proxy.Enhancer.setCallbackTypes(Class[]) 方法指定回调类型数组。当创建代理时，如果你没有回调实例的数组，就可以使用回调类型。象使用回调一样，你必须使用net.sf.cglib.proxy.CallbackFilter为每一个方法指定一个回调类型索引。\n　　4、使用Mixin\n　　Mixin通过代理方式将多种类型的对象绑定到一个大对象上，这样对各个目标类型中的方法调用可以直接在这个大对象上进行。下面是一个例子。\n\n[java] view plain copy\nimport net.sf.cglib.proxy.Mixin;  \n  \ninterface MyInterfaceA {  \n  \n    public void methodA();  \n}  \n  \ninterface MyInterfaceB {  \n  \n    public void methodB();  \n}  \n  \nclass MyInterfaceAImpl implements MyInterfaceA {  \n  \n    @Override  \n    public void methodA() {  \n        System.out.println(\"MyInterfaceAImpl.methodA()\");  \n    }  \n}  \n  \nclass MyInterfaceBImpl implements MyInterfaceB {  \n  \n    @Override  \n    public void methodB() {  \n        System.out.println(\"MyInterfaceBImpl.methodB()\");  \n    }  \n}  \n  \npublic class Main {  \n  \n    public static void main(String[] args) {  \n        //各个对象对应的类型  \n        Class[] interfaces = new Class[]{MyInterfaceA.class, MyInterfaceB.class};  \n        //各个对象  \n        Object[] delegates = new Object[]{new MyInterfaceAImpl(), new MyInterfaceBImpl()};  \n        //将多个对象绑定到一个大对象上  \n        Object obj = Mixin.create(interfaces, delegates);  \n        //直接在大对象上调用各个目标方法  \n        ((MyInterfaceA)obj).methodA();  \n        ((MyInterfaceB)obj).methodB();  \n    }  \n}  \n\n动态生成Bean\n\n　　我们知道，Java Bean包含一组属性字段，用这些属性来存储和获取值。通过指定一组属性名和属性值的类型，我们可以使用Cglib的BeanGenerator和BeanMap来动态生成Bean。下面是一个例子。\n[java] view plain copy\nimport java.lang.reflect.Method;  \nimport java.util.HashMap;  \nimport java.util.Iterator;  \nimport java.util.Map;  \nimport java.util.Set;  \nimport net.sf.cglib.beans.BeanGenerator;  \nimport net.sf.cglib.beans.BeanMap;  \n  \n/** \n * 动态实体bean \n * \n * @author cuiran \n * @version 1.0 \n */  \nclass CglibBean {  \n  \n    //Bean实体Object  \n    public Object object = null;  \n    //属性map  \n    public BeanMap beanMap = null;  \n  \n    public CglibBean() {  \n        super();  \n    }  \n  \n    @SuppressWarnings(\"unchecked\")  \n    public CglibBean(Map<String, Class> propertyMap) {  \n        //用一组属性生成实体Bean  \n        this.object = generateBean(propertyMap);  \n        //用实体Bean创建BeanMap，以便可以设置和获取Bean属性的值  \n        this.beanMap = BeanMap.create(this.object);  \n    }  \n  \n    /** \n     * 给bean中的属性赋值 \n     * \n     * @param property 属性名 \n     * @param value 值 \n     */  \n    public void setValue(String property, Object value) {  \n        beanMap.put(property, value);  \n    }  \n  \n    /** \n     * 获取bean中属性的值 \n     * \n     * @param property 属性名 \n     * @return 值 \n     */  \n    public Object getValue(String property) {  \n        return beanMap.get(property);  \n    }  \n  \n    /** \n     * 得到该实体bean对象 \n     * \n     * @return \n     */  \n    public Object getObject() {  \n        return this.object;  \n    }  \n  \n    @SuppressWarnings(\"unchecked\")  \n    private Object generateBean(Map<String, Class> propertyMap) {  \n        //根据一组属性名和属性值的类型，动态创建Bean对象  \n        BeanGenerator generator = new BeanGenerator();  \n        Set keySet = propertyMap.keySet();  \n        for (Iterator i = keySet.iterator(); i.hasNext();) {  \n            String key = (String) i.next();  \n            generator.addProperty(key, (Class) propertyMap.get(key));  \n        }  \n        return generator.create();  //创建Bean  \n    }  \n}  \n  \n/** \n * Cglib测试类 \n * \n * @author cuiran \n * @version 1.0 \n */  \npublic class CglibTest {  \n  \n    @SuppressWarnings(\"unchecked\")  \n    public static void main(String[] args) throws ClassNotFoundException { // 设置类成员属性  \n        HashMap<String, Class> propertyMap = new HashMap<>();  \n        propertyMap.put(\"id\", Class.forName(\"java.lang.Integer\"));  \n        propertyMap.put(\"name\", Class.forName(\"java.lang.String\"));  \n        propertyMap.put(\"address\", Class.forName(\"java.lang.String\")); // 生成动态Bean  \n        CglibBean bean = new CglibBean(propertyMap);  \n        // 给Bean设置值  \n        bean.setValue(\"id\", 123);  //Auto-boxing  \n        bean.setValue(\"name\", \"454\");  \n        bean.setValue(\"address\", \"789\");  \n        // 从Bean中获取值，当然获得值的类型是Object  \n        System.out.println(\" >> id = \" + bean.getValue(\"id\"));  \n        System.out.println(\" >> name = \" + bean.getValue(\"name\"));  \n        System.out.println(\" >> address = \" + bean.getValue(\"address\"));  \n        // 获得bean的实体  \n        Object object = bean.getObject();  \n        // 通过反射查看所有方法名  \n        Class clazz = object.getClass();  \n        Method[] methods = clazz.getDeclaredMethods();  \n        for (Method curMethod : methods) {  \n            System.out.println(curMethod.getName());  \n        }  \n    }  \n}  \n　　输出结果：\n[java] view plain copy\n >> id = 123  \n >> name = 454  \n >> address = 789  \ngetAddress  \ngetName  \ngetId  \nsetName  \nsetId  \nsetAddress  \n\nCGLIB轻松实现延迟加载\n\n　　通过使用LazyLoader，可以实现延迟加载，即在没有访问对象的字段或方法之前并不加载对象，只有当要访问对象的字段或方法时才进行加载。下面是一个例子。\n[java] view plain copy\nimport net.sf.cglib.proxy.Enhancer;  \nimport net.sf.cglib.proxy.LazyLoader;  \n  \nclass TestBean {  \n    private String userName;  \n  \n    /** \n     * @return the userName \n     */  \n    public String getUserName() {  \n        return userName;  \n    }  \n  \n    /** \n     * @param userName the userName to set \n     */  \n    public void setUserName(String userName) {  \n        this.userName = userName;  \n    }  \n}  \n  \n//延迟加载代理类  \nclass LazyProxy implements LazyLoader {  \n  \n    //拦截Bean的加载，本方法会延迟处理  \n    @Override  \n    public Object loadObject() throws Exception {  \n        System.out.println(\"开始延迟加载!\");  \n        TestBean bean = new TestBean(); //创建实体Bean  \n        bean.setUserName(\"test\");  //给一个属性赋值  \n        return bean;  //返回Bean  \n    }  \n}  \n  \npublic class BeanTest {  \n  \n    public static void main(String[] args) {  \n        //创建Bean类型的延迟加载代理实例  \n        TestBean bean = (TestBean) Enhancer.create(TestBean.class, new LazyProxy());  \n        System.out.println(\"------\");  \n        System.out.println(bean.getUserName());  \n    }  \n}  \n　　输出结果：\n[java] view plain copy\n------  \n开始延迟加载!  \ntest  \n　　我们创建TestBean类的延迟代理，通过LazyLoader中的loadObject()方法的拦截，实现对TestBean类的对象进行延迟加载。从输出可以看出，当创建延迟代理时，并没有立刻加载目标对象（因为还有输出“开始延迟加载!”），当通过代理访问目标对象的getUserName()方法时，就会加载目标对象。可见loadObject()是延迟执行的。\n","source":"_posts/Java动态代理与Cglib库.md","raw":"---\ntitle: Java动态代理与Cglib库\ndate: 2017-03-22 18:20:58\ntags: Java\ncategories: Essay\n---\n\nJDK动态代理\n\n　　代理模式是常用的Java设计模式，他的特征是代理类与委托类有同样的接口，代理类主要负责为委托类预处理消息、过滤消息、把消息转发给委托类，以及事后处理消息等。代理类与委托类之间通常会存在关联关系，一个代理类的对象与一个委托类的对象关联，代理类的对象本身并不真正实现服务，而是通过调用委托类的对象的相关方法，来提供特定的服务。 \n　　按照代理的创建时期，代理类可以分为两种。 \n　　静态代理：由程序员创建或特定工具自动生成源代码，再对其编译。在程序运行前，代理类的.class文件就已经存在了。 \n　　动态代理：在程序运行时，运用反射机制动态创建而成。 \n　　为什么使用动态代理？因为动态代理可以对请求进行任何处理。\n　　哪些地方需要动态代理？不允许直接访问某些类；对访问要做特殊处理等。\n　　目前Java开发包中包含了对动态代理的支持，但是其实现只支持对接口的的实现。 其实现主要通过java.lang.reflect.Proxy类和java.lang.reflect.InvocationHandler接口。 Proxy类主要用来获取动态代理对象，InvocationHandler接口用来约束调用者实现。\n　　以下为模拟案例，通过动态代理实现在方法调用前后向控制台输出两句字符串。\n　　定义一个HelloWorld接口：\n[java] view plain copy\npackage com.ljq.test;  \n  \n /** \n * 定义一个HelloWorld接口 \n *  \n * @author jiqinlin \n * \n */  \n public interface HelloWorld {  \n    public void sayHelloWorld();  \n}  \n　　类HelloWorldImpl是HelloWorld接口的实现：\n[java] view plain copy\npackage com.ljq.test;  \n  \n /** \n * 类HelloWorldImpl是HelloWorld接口的实现 \n *  \n * @author jiqinlin \n * \n */  \n public class HelloWorldImpl implements HelloWorld{  \n  \n    public void sayHelloWorld() {  \n        System.out.println(\"HelloWorld!\");  \n    }  \n  \n}  \n　　HelloWorldHandler是 InvocationHandler接口实现：\n[java] view plain copy\npackage com.ljq.test;  \n  \n import java.lang.reflect.InvocationHandler;  \n import java.lang.reflect.Method;  \n  \n /** \n * 实现在方法调用前后向控制台输出两句字符串 \n *  \n * @author jiqinlin \n * \n */  \n public class HelloWorldHandler implements InvocationHandler{  \n    //要代理的原始对象  \n     private Object obj;  \n      \n    public HelloWorldHandler(Object obj) {  \n        super();  \n        this.obj = obj;  \n    }  \n  \n    /** \n     * 在代理实例上处理方法调用并返回结果 \n     *  \n     * @param proxy 代理类 \n     * @param method 被代理的方法 \n     * @param args 该方法的参数数组 \n     */  \n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {  \n        Object result = null;  \n        //调用之前  \n         doBefore();  \n        //调用原始对象的方法  \n        result=method.invoke(obj, args);  \n        //调用之后  \n        doAfter();  \n        return result;  \n    }  \n      \n    private void doBefore(){  \n        System.out.println(\"before method invoke\");  \n    }  \n      \n    private void doAfter(){  \n        System.out.println(\"after method invoke\");  \n    }  \n      \n}  \n　　测试类：\n[java] view plain copy\npackage com.ljq.test;  \n  \nimport java.lang.reflect.InvocationHandler;  \nimport java.lang.reflect.Proxy;  \n  \n  \npublic class HelloWorldTest {  \n  \n    public static void main(String[] args) {  \n        HelloWorld helloWorld=new HelloWorldImpl();  \n        InvocationHandler handler=new HelloWorldHandler(helloWorld);  \n  \n        //创建动态代理对象  \n        HelloWorld proxy=(HelloWorld)Proxy.newProxyInstance(  \n            helloWorld.getClass().getClassLoader(),  \n            helloWorld.getClass().getInterfaces(),  \n            handler);  \n        proxy.sayHelloWorld();  \n    }  \n}  \n　　运行结果为：\n[plain] view plain copy\nbefore method invoke  \nHelloWorld!  \nafter method invoke  \n　　基本流程：用Proxy类创建目标类的动态代理，创建时需要指定一个自己实现InvocationHandler接口的回调类的对象，这个回调类中有一个invoke()用于拦截对目标类各个方法的调用。创建好代理后就可以直接在代理上调用目标对象的各个方法。\n　　JDK自从1.3版本开始，就引入了动态代理，并且经常被用来动态地创建代理。JDK的动态代理用起来非常简单，但它有一个限制，就是使用动态代理的对象必须实现一个或多个接口。比如上面的HelloWorldImpl类，实现了HelloWorld接口，所以可以用JDK的动态代理。如果想代理没有实现接口的继承的类，该怎么办？ CGLIB就是最好的选择（https://github.com/cglib/cglib，使用apache license 2.0）。其他比较有名的还有从JBoss项目衍生出来的Javassist（https://github.com/jboss-javassist/javassist），这里介绍Cglib。\n\nCglib代码生成库\n\n　　CGlib是一个强大的，高性能，高质量的Code生成类库。它可以在运行期扩展Java类与实现Java接口。其底层是通过小而快的字节码处理框架ASM（http://forge.ow2.org/projects/asm，使用BSD License）来转换字节码并生成新的类。大部分功能实际上是asm所提供的，CGlib只是封装了asm，简化了asm的操作，实现了在运行期动态生成新的class。\n　　CGlib被许多AOP的框架使用，例如spring AOP和dynaop，为他们提供方法的interception（拦截）；最流行的OR Mapping工具hibernate也使用CGLIB来代理单端single-ended（多对一和一对一）关联（对集合的延迟抓取，是采用其他机制实现的）；EasyMock和jMock是通过使用模仿（moke）对象来测试java代码的包，它们都通过使用CGLIB来为那些没有接口的类创建模仿（moke）对象。\n　　CGLIB包的基本代码很少，但学起来有一定的困难，主要是缺少文档，API描述过于简单，这也是开源软件的一个不足之处。目前CGLIB的版本是cglib-2.2.jar，主要由一下部分组成：\n　　（1）net.sf.cglib.core：底层字节码处理类，他们大部分与ASM有关系。\n　　（2）net.sf.cglib.transform：编译期或运行期类和类文件的转换。\n　　（3）net.sf.cglib.proxy ：实现创建代理和方法拦截器的类。\n　　（4）net.sf.cglib.reflect ：实现快速反射和C#风格代理的类。\n　　（5）net.sf.cglib.util：集合排序工具类。\n　　（6）net.sf.cglib.beans：JavaBean相关的工具类。\n　　CGLIB包是在ASM之上的一个高级别的层。对代理那些没有实现接口的类非常有用。本质上，它是通过动态的生成一个子类去覆盖所要代理类的不是final的方法，并设置好callback，则原有类的每个方法调用就会转变成调用用户定义的拦截方法（interceptors），这比JDK动态代理方法快多了。可见，Cglib的原理是对指定的目标类动态生成一个子类，并覆盖其中方法实现增强，但因为采用的是继承，所以不能对final修饰的类和final方法进行代理。\n\n用Cglib创建动态代理\n\n　　下图表示Cglib常用到的几类。\n\n图1 Cglib主要的接口\n　　创建一个具体类的代理时，通常要用到的CGLIB包的APIs：\n　　net.sf.cglib.proxy.Callback接口：在CGLIB包中是一个很关键的接口，所有被net.sf.cglib.proxy.Enhancer类调用的回调（callback）接口都要继承这个接口。\n　　net.sf.cglib.proxy.MethodInterceptor接口：是最通用的回调（callback）类型，它经常被AOP用来实现拦截（intercept）方法的调用。这个接口只定义了一个方法。\n[java] view plain copy\npublic Object intercept(Object object, java.lang.reflect.Method method, Object[] args, MethodProxy proxy) throws Throwable;  \n　　当net.sf.cglib.proxy.MethodInterceptor做为所有代理方法的回调 （callback）时，当对基于代理的方法调用时，在调用原对象的方法的之前会调用这个方法，如图下图所示。第一个参数是代理对像，第二和第三个参数分别 是拦截的方法和方法的参数。原来的方法可能通过使用java.lang.reflect.Method对象的一般反射调用，或者使用 net.sf.cglib.proxy.MethodProxy对象调用。net.sf.cglib.proxy.MethodProxy通常被首选使用，因为它更快。在这个方法中，我们可以在调用原方法之前或之后注入自己的代码。\n\n图1\n　　net.sf.cglib.proxy.MethodInterceptor能够满足任何的拦截（interception ）需要，当对有些情况下可能过度。为了简化和提高性能，CGLIB包提供了一些专门的回调（callback）类型。例如：\n　　net.sf.cglib.proxy.FixedValue：为提高性能，FixedValue回调对强制某一特别方法返回固定值是有用的。\n　　net.sf.cglib.proxy.NoOp：NoOp回调把对方法调用直接委派到这个方法在父类中的实现。\n　　net.sf.cglib.proxy.LazyLoader：当实际的对象需要延迟装载时，可以使用LazyLoader回调。一旦实际对象被装载，它将被每一个调用代理对象的方法使用。\n　　net.sf.cglib.proxy.Dispatcher：Dispathcer回调和LazyLoader回调有相同的特点，不同的是，当代理方法被调用时，装载对象的方法也总要被调用。\n　　 net.sf.cglib.proxy.ProxyRefDispatcher：ProxyRefDispatcher回调和Dispatcher一样，不同的是，它可以把代理对象作为装载对象方法的一个参数传递。\n　　代理类的所以方法经常会用到回调（callback），当然你也可以使用net.sf.cglib.proxy.CallbackFilter 有选择的对一些方法使用回调（callback），这种考虑周详的控制特性在JDK的动态代理中是没有的。在JDK代理中，对 java.lang.reflect.InvocationHandler方法的调用对代理类的所有方法都有效。\n　　CGLIB的代理包也对net.sf.cglib.proxy.Mixin提供支持。基本上，它允许多个对象被绑定到一个单一的大对象。在代理中对方法的调用委托到下面相应的对象中。\n　　接下来我们看看如何使 用CGLIB代理APIs创建代理。\n　　1、创建一个简单的代理\n　　CGLIB代理最核心类net.sf.cglib.proxy.Enhancer， 为了创建一个代理，最起码你要用到这个类。首先，让我们使用NoOp回调创建一个代理。\n[java] view plain copy\n/**  \n \n* Create a proxy using NoOp callback. The target class  \n* must have a default zero-argument constructor \n*  \n* @param targetClass the super class of the proxy  \n* @return a new proxy for a target class instance  \n*/   \npublic Object createProxy(Class targetClass) {   \n    Enhancer enhancer = new Enhancer();  \n    enhancer.setSuperclass(targetClass);  \n    enhancer.setCallback(NoOp.INSTANCE);  \n    return enhancer.create();  \n}   \n　　返回值是target类一个实例的代理。在这个例子中，我们为net.sf.cglib.proxy.Enhancer 配置了一个单一的回调（callback）。我们可以看到很少直接创建一个简单的代理，而是创建一个net.sf.cglib.proxy.Enhancer的实例，在net.sf.cglib.proxy.Enhancer类中你可使用静态帮助方法创建一个简单的代理。一般推荐使用上面例子的方法创建代理，因为它允许你通过配置net.sf.cglib.proxy.Enhancer实例很好的控制代理的创建。\n　　要注意的是，target类是作为产生的代理的父类传进来的。不同于JDK的动态代理，它不能在创建代理时传target对象，target对象必须被CGLIB包来创建。在这个例子中，默认的无参数构造器时用来创建target实例的。如果你想用CGLIB来创建有参数的实例，用net.sf.cglib.proxy.Enhancer.create(Class[], Object[])方法替代net.sf.cglib.proxy.Enhancer.create()就可以了。方法中第一个参数定义了参数的类型，第 二个是参数的值。在参数中，基本类型应被转化成类的类型。\n　　2、使用MethodInterceptor创建一个代理\n　　为了更好的使用代理，我们可以使用自己定义的MethodInterceptor类型回调（callback）来代替net.sf.cglib.proxy.NoOp回调。当对代理中所有方法的调用时，都会转向MethodInterceptor类型的拦截（intercept）方法，在拦截方法中再调用底层对象相应的方法。下面我们举个例子，假设你想对目标对象的所有方法调用进行权限的检查，如果没有经过授权，就抛出一个运行时的异常AuthorizationException。其中AuthorizationService.java接口的代码如下：\n[java] view plain copy\npackage com.lizjason.cglibproxy;   \n  \nimport java.lang.reflect.Method;   \n  \n/**  \n * A simple authorization service for illustration purpose.  \n * @author Jason Zhicheng Li (jason@lizjason.com)  \n */   \npublic interface AuthorizationService {   \n    void authorize(Method method);   \n}  \n　　对net.sf.cglib.proxy.MethodInterceptor接口的实现的类AuthorizationInterceptor.java代码如下：\n[java] view plain copy\npackage com.lizjason.cglibproxy.impl;  \nimport java.lang.reflect.Method;  \nimport net.sf.cglib.proxy.MethodInterceptor;  \nimport net.sf.cglib.proxy.MethodProxy;  \n  \nimport com.lizjason.cglibproxy.AuthorizationService;  \n  \n/** \n * A simple MethodInterceptor implementation to \n * apply authorization checks for proxy method calls. \n */  \npublic class AuthorizationInterceptor implements MethodInterceptor {  \n  \n    private AuthorizationService authorizationService;  \n  \n    /** \n     * Create a AuthorizationInterceptor with the given AuthorizationService \n     */  \n    public AuthorizationInterceptor (AuthorizationService authorizationService) {  \n        this.authorizationService = authorizationService;  \n    }  \n  \n    /** \n     * Intercept the proxy method invocations to inject authorization check. * The original \n     * method is invoked through MethodProxy. \n     */  \n    public Object intercept(Object object, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {  \n        if (authorizationService != null) {  \n            //may throw an AuthorizationException if authorization failed  \n            authorizationService.authorize(method);  \n        }  \n        return methodProxy.invokeSuper(object, args);  \n    }  \n}  \n　　我们可以看到在拦截方法中，首先进行权限的检查，如果通过权限的检查，拦截方法再调用目标对象的原始方法。由于性能的原因，对原始方法的调用我们使用CGLIB的net.sf.cglib.proxy.MethodProxy对象，而不是反射中一般使用java.lang.reflect.Method对象。\n　　下面是一个完整的使用MethodInterceptor的例子。\n[java] view plain copy\npackage cglibexample;  \n  \nimport java.lang.reflect.Method;  \nimport net.sf.cglib.proxy.Enhancer;  \nimport net.sf.cglib.proxy.MethodInterceptor;  \nimport net.sf.cglib.proxy.MethodProxy;  \n  \n/** \n * 定义一个HelloWorld类，没有实现接口 \n * \n */  \nclass HelloWorld {  \n  \n    public void sayHelloWorld() {  \n        System.out.println(\"HelloWorld!\");  \n    }  \n}  \n  \n/** \n * 通过Cglib实现在方法调用前后向控制台输出两句字符串 \n * \n */  \nclass CglibProxy implements MethodInterceptor {  \n  \n    //要代理的原始对象  \n    private Object obj;  \n  \n    public Object createProxy(Object target) {  \n        this.obj = target;  \n        Enhancer enhancer = new Enhancer();  \n        // 设置要代理的目标类，以扩展它的功能  \n        enhancer.setSuperclass(this.obj.getClass());  \n        // 设置单一回调对象，在回调中拦截对目标方法的调用  \n        enhancer.setCallback(this);  \n        //设置类装载器  \n        enhancer.setClassLoader(target.getClass().getClassLoader());  \n        //创建代理对象  \n        return enhancer.create();  \n    }  \n  \n    /** \n     * 回调方法:在代理实例上拦截并处理目标方法的调用，返回结果 \n     * \n     * @param proxy 代理类 \n     * @param method 被代理的方法 \n     * @param params 该方法的参数数组 \n     * @param methodProxy \n     */  \n    @Override  \n    public Object intercept(Object proxy, Method method, Object[] params,  \n            MethodProxy methodProxy) throws Throwable {  \n        Object result = null;  \n        // 调用之前  \n        doBefore();  \n        // 调用目标方法，用methodProxy,  \n        // 而不是原始的method，以提高性能  \n        result = methodProxy.invokeSuper(proxy, params);  \n        // 调用之后  \n        doAfter();  \n        return result;  \n    }  \n  \n    private void doBefore() {  \n        System.out.println(\"before method invoke\");  \n    }  \n  \n    private void doAfter() {  \n        System.out.println(\"after method invoke\");  \n    }  \n}  \n  \npublic class TestCglib {  \n  \n    public static void main(String[] args) {  \n        CglibProxy cglibProxy = new CglibProxy();  \n        HelloWorld hw = (HelloWorld) cglibProxy.createProxy(new HelloWorld());  \n        hw.sayHelloWorld();  \n    }  \n}  \n　　输出结果：\n[plain] view plain copy\nbefore method invoke  \nHelloWorld!  \nafter method invoke  \n　　基本流程：需要自己写代理类，它实现MethodInterceptor接口，有一个intercept()回调方法用于拦截对目标方法的调用，里面使用methodProxy来调用目标方法。创建代理对象要用Enhance类，用它设置好代理的目标类、有intercept()回调的代理类实例、最后用create()创建并返回代理实例。\n　　3、使用CallbackFilter在方法层设置回调\n　　net.sf.cglib.proxy.CallbackFilter允许我们在方法层设置回调（callback）。假如你有一个PersistenceServiceImpl类，它有两个方法：save和load，其中方法save需要权限检查，而方法load不需要权限检查。\n[java] view plain copy\nimport com.lizjason.cglibproxy.PersistenceService;  \nimport java.lang.reflect.Method;  \nimport net.sf.cglib.proxy.CallbackFilter;  \n  \n/** \n * A simple implementation of PersistenceService interface \n */  \nclass PersistenceServiceImpl implements PersistenceService {  \n  \n    //需要权限检查  \n    public void save(long id, String data) {  \n        System.out.println(data + \" has been saved successfully.\");  \n    }  \n  \n    //不需要权限检查  \n    public String load(long id) {  \n        return \"Test CGLIB CallBackFilter\";  \n    }  \n}  \n  \n/** \n * An implementation of CallbackFilter for PersistenceServiceImpl \n */  \npublic class PersistenceServiceCallbackFilter implements CallbackFilter {   \n    //callback index for save method  \n    private static final int SAVE = 0;  \n    //callback index for load method  \n    private static final int LOAD = 1;  \n  \n    /** \n     * Specify which callback to use for the method being invoked.  \n     * @param method the method being invoked. \n     * @return  \n     */  \n    @Override  \n    public int accept(Method method) {  \n        //指定各方法的代理回调索引  \n        String name = method.getName();  \n        if (\"save\".equals(name)) {  \n            return SAVE;  \n        }  \n        // for other methods, including the load method, use the  \n        // second callback  \n        return LOAD;  \n    }  \n}  \n　　accept方法中对代理方法和回调进行了匹配，返回的值是某方法在回调数组中的索引。下面是PersistenceServiceImpl类代理的实现。\n[java] view plain copy\n...  \nEnhancer enhancer = new Enhancer();  \nenhancer.setSuperclass(PersistenceServiceImpl.class);  \n//设置回调过滤器  \nCallbackFilter callbackFilter = new PersistenceServiceCallbackFilter();  \nenhancer.setCallbackFilter(callbackFilter);  \n//创建各个目标方法的代理回调  \nAuthorizationService authorizationService = ...  \nCallback saveCallback = new AuthorizationInterceptor(authorizationService);  \nCallback loadCallback = NoOp.INSTANCE;  \n//顺序要与指定的回调索引一致  \nCallback[] callbacks = new Callback[]{saveCallback, loadCallback };  \nenhancer.setCallbacks(callbacks);  //设置回调  \n...  \nreturn (PersistenceServiceImpl)enhancer.create();  //创建代理对象  \n　　在这个例子中save方法使用了AuthorizationInterceptor实例，load方法使用了NoOp实例。此外，你也可以通过net.sf.cglib.proxy.Enhancer.setInterfaces(Class[])方法指定代理对象所实现的接口。\n　　除了为net.sf.cglib.proxy.Enhancer指定回调数组，你还可以通过net.sf.cglib.proxy.Enhancer.setCallbackTypes(Class[]) 方法指定回调类型数组。当创建代理时，如果你没有回调实例的数组，就可以使用回调类型。象使用回调一样，你必须使用net.sf.cglib.proxy.CallbackFilter为每一个方法指定一个回调类型索引。\n　　4、使用Mixin\n　　Mixin通过代理方式将多种类型的对象绑定到一个大对象上，这样对各个目标类型中的方法调用可以直接在这个大对象上进行。下面是一个例子。\n\n[java] view plain copy\nimport net.sf.cglib.proxy.Mixin;  \n  \ninterface MyInterfaceA {  \n  \n    public void methodA();  \n}  \n  \ninterface MyInterfaceB {  \n  \n    public void methodB();  \n}  \n  \nclass MyInterfaceAImpl implements MyInterfaceA {  \n  \n    @Override  \n    public void methodA() {  \n        System.out.println(\"MyInterfaceAImpl.methodA()\");  \n    }  \n}  \n  \nclass MyInterfaceBImpl implements MyInterfaceB {  \n  \n    @Override  \n    public void methodB() {  \n        System.out.println(\"MyInterfaceBImpl.methodB()\");  \n    }  \n}  \n  \npublic class Main {  \n  \n    public static void main(String[] args) {  \n        //各个对象对应的类型  \n        Class[] interfaces = new Class[]{MyInterfaceA.class, MyInterfaceB.class};  \n        //各个对象  \n        Object[] delegates = new Object[]{new MyInterfaceAImpl(), new MyInterfaceBImpl()};  \n        //将多个对象绑定到一个大对象上  \n        Object obj = Mixin.create(interfaces, delegates);  \n        //直接在大对象上调用各个目标方法  \n        ((MyInterfaceA)obj).methodA();  \n        ((MyInterfaceB)obj).methodB();  \n    }  \n}  \n\n动态生成Bean\n\n　　我们知道，Java Bean包含一组属性字段，用这些属性来存储和获取值。通过指定一组属性名和属性值的类型，我们可以使用Cglib的BeanGenerator和BeanMap来动态生成Bean。下面是一个例子。\n[java] view plain copy\nimport java.lang.reflect.Method;  \nimport java.util.HashMap;  \nimport java.util.Iterator;  \nimport java.util.Map;  \nimport java.util.Set;  \nimport net.sf.cglib.beans.BeanGenerator;  \nimport net.sf.cglib.beans.BeanMap;  \n  \n/** \n * 动态实体bean \n * \n * @author cuiran \n * @version 1.0 \n */  \nclass CglibBean {  \n  \n    //Bean实体Object  \n    public Object object = null;  \n    //属性map  \n    public BeanMap beanMap = null;  \n  \n    public CglibBean() {  \n        super();  \n    }  \n  \n    @SuppressWarnings(\"unchecked\")  \n    public CglibBean(Map<String, Class> propertyMap) {  \n        //用一组属性生成实体Bean  \n        this.object = generateBean(propertyMap);  \n        //用实体Bean创建BeanMap，以便可以设置和获取Bean属性的值  \n        this.beanMap = BeanMap.create(this.object);  \n    }  \n  \n    /** \n     * 给bean中的属性赋值 \n     * \n     * @param property 属性名 \n     * @param value 值 \n     */  \n    public void setValue(String property, Object value) {  \n        beanMap.put(property, value);  \n    }  \n  \n    /** \n     * 获取bean中属性的值 \n     * \n     * @param property 属性名 \n     * @return 值 \n     */  \n    public Object getValue(String property) {  \n        return beanMap.get(property);  \n    }  \n  \n    /** \n     * 得到该实体bean对象 \n     * \n     * @return \n     */  \n    public Object getObject() {  \n        return this.object;  \n    }  \n  \n    @SuppressWarnings(\"unchecked\")  \n    private Object generateBean(Map<String, Class> propertyMap) {  \n        //根据一组属性名和属性值的类型，动态创建Bean对象  \n        BeanGenerator generator = new BeanGenerator();  \n        Set keySet = propertyMap.keySet();  \n        for (Iterator i = keySet.iterator(); i.hasNext();) {  \n            String key = (String) i.next();  \n            generator.addProperty(key, (Class) propertyMap.get(key));  \n        }  \n        return generator.create();  //创建Bean  \n    }  \n}  \n  \n/** \n * Cglib测试类 \n * \n * @author cuiran \n * @version 1.0 \n */  \npublic class CglibTest {  \n  \n    @SuppressWarnings(\"unchecked\")  \n    public static void main(String[] args) throws ClassNotFoundException { // 设置类成员属性  \n        HashMap<String, Class> propertyMap = new HashMap<>();  \n        propertyMap.put(\"id\", Class.forName(\"java.lang.Integer\"));  \n        propertyMap.put(\"name\", Class.forName(\"java.lang.String\"));  \n        propertyMap.put(\"address\", Class.forName(\"java.lang.String\")); // 生成动态Bean  \n        CglibBean bean = new CglibBean(propertyMap);  \n        // 给Bean设置值  \n        bean.setValue(\"id\", 123);  //Auto-boxing  \n        bean.setValue(\"name\", \"454\");  \n        bean.setValue(\"address\", \"789\");  \n        // 从Bean中获取值，当然获得值的类型是Object  \n        System.out.println(\" >> id = \" + bean.getValue(\"id\"));  \n        System.out.println(\" >> name = \" + bean.getValue(\"name\"));  \n        System.out.println(\" >> address = \" + bean.getValue(\"address\"));  \n        // 获得bean的实体  \n        Object object = bean.getObject();  \n        // 通过反射查看所有方法名  \n        Class clazz = object.getClass();  \n        Method[] methods = clazz.getDeclaredMethods();  \n        for (Method curMethod : methods) {  \n            System.out.println(curMethod.getName());  \n        }  \n    }  \n}  \n　　输出结果：\n[java] view plain copy\n >> id = 123  \n >> name = 454  \n >> address = 789  \ngetAddress  \ngetName  \ngetId  \nsetName  \nsetId  \nsetAddress  \n\nCGLIB轻松实现延迟加载\n\n　　通过使用LazyLoader，可以实现延迟加载，即在没有访问对象的字段或方法之前并不加载对象，只有当要访问对象的字段或方法时才进行加载。下面是一个例子。\n[java] view plain copy\nimport net.sf.cglib.proxy.Enhancer;  \nimport net.sf.cglib.proxy.LazyLoader;  \n  \nclass TestBean {  \n    private String userName;  \n  \n    /** \n     * @return the userName \n     */  \n    public String getUserName() {  \n        return userName;  \n    }  \n  \n    /** \n     * @param userName the userName to set \n     */  \n    public void setUserName(String userName) {  \n        this.userName = userName;  \n    }  \n}  \n  \n//延迟加载代理类  \nclass LazyProxy implements LazyLoader {  \n  \n    //拦截Bean的加载，本方法会延迟处理  \n    @Override  \n    public Object loadObject() throws Exception {  \n        System.out.println(\"开始延迟加载!\");  \n        TestBean bean = new TestBean(); //创建实体Bean  \n        bean.setUserName(\"test\");  //给一个属性赋值  \n        return bean;  //返回Bean  \n    }  \n}  \n  \npublic class BeanTest {  \n  \n    public static void main(String[] args) {  \n        //创建Bean类型的延迟加载代理实例  \n        TestBean bean = (TestBean) Enhancer.create(TestBean.class, new LazyProxy());  \n        System.out.println(\"------\");  \n        System.out.println(bean.getUserName());  \n    }  \n}  \n　　输出结果：\n[java] view plain copy\n------  \n开始延迟加载!  \ntest  \n　　我们创建TestBean类的延迟代理，通过LazyLoader中的loadObject()方法的拦截，实现对TestBean类的对象进行延迟加载。从输出可以看出，当创建延迟代理时，并没有立刻加载目标对象（因为还有输出“开始延迟加载!”），当通过代理访问目标对象的getUserName()方法时，就会加载目标对象。可见loadObject()是延迟执行的。\n","slug":"Java动态代理与Cglib库","published":1,"updated":"2018-04-25T12:46:59.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2fj0np9000tq4vg5tsg2ne4","content":"<p>JDK动态代理</p><p>　　代理模式是常用的Java设计模式，他的特征是代理类与委托类有同样的接口，代理类主要负责为委托类预处理消息、过滤消息、把消息转发给委托类，以及事后处理消息等。代理类与委托类之间通常会存在关联关系，一个代理类的对象与一个委托类的对象关联，代理类的对象本身并不真正实现服务，而是通过调用委托类的对象的相关方法，来提供特定的服务。<br>　　按照代理的创建时期，代理类可以分为两种。<br>　　静态代理：由程序员创建或特定工具自动生成源代码，再对其编译。在程序运行前，代理类的.class文件就已经存在了。<br>　　动态代理：在程序运行时，运用反射机制动态创建而成。<br>　　为什么使用动态代理？因为动态代理可以对请求进行任何处理。<br>　　哪些地方需要动态代理？不允许直接访问某些类；对访问要做特殊处理等。<br>　　目前Java开发包中包含了对动态代理的支持，但是其实现只支持对接口的的实现。 其实现主要通过java.lang.reflect.Proxy类和java.lang.reflect.InvocationHandler接口。 Proxy类主要用来获取动态代理对象，InvocationHandler接口用来约束调用者实现。<br>　　以下为模拟案例，通过动态代理实现在方法调用前后向控制台输出两句字符串。<br>　　定义一个HelloWorld接口：<br>[java] view plain copy<br>package com.ljq.test;  </p><a id=\"more\"></a>\n\n<p> /** </p>\n<ul>\n<li><p>定义一个HelloWorld接口 </p>\n</li>\n<li></li>\n<li><p>@author jiqinlin </p>\n</li>\n<li></li>\n<li><p>/<br>public interface HelloWorld {<br>  public void sayHelloWorld();<br>}<br>　　类HelloWorldImpl是HelloWorld接口的实现：<br>[java] view plain copy<br>package com.ljq.test;  </p>\n<p>/** </p>\n</li>\n<li><p>类HelloWorldImpl是HelloWorld接口的实现 </p>\n</li>\n<li></li>\n<li><p>@author jiqinlin </p>\n</li>\n<li></li>\n<li><p>/<br>public class HelloWorldImpl implements HelloWorld{  </p>\n<p>  public void sayHelloWorld() {  </p>\n<pre><code>System.out.println(&quot;HelloWorld!&quot;);  </code></pre><p>  }  </p>\n</li>\n</ul>\n<p>}<br>　　HelloWorldHandler是 InvocationHandler接口实现：<br>[java] view plain copy<br>package com.ljq.test;  </p>\n<p> import java.lang.reflect.InvocationHandler;<br> import java.lang.reflect.Method;  </p>\n<p> /** </p>\n<ul>\n<li><p>实现在方法调用前后向控制台输出两句字符串 </p>\n</li>\n<li></li>\n<li><p>@author jiqinlin </p>\n</li>\n<li></li>\n<li><p>/<br>public class HelloWorldHandler implements InvocationHandler{<br>  //要代理的原始对象<br>   private Object obj;  </p>\n<p>  public HelloWorldHandler(Object obj) {  </p>\n<pre><code>super();  \nthis.obj = obj;  </code></pre><p>  }  </p>\n<p>  /** </p>\n<ul>\n<li><p>在代理实例上处理方法调用并返回结果 </p>\n</li>\n<li></li>\n<li><p>@param proxy 代理类 </p>\n</li>\n<li><p>@param method 被代理的方法 </p>\n</li>\n<li><p>@param args 该方法的参数数组 </p>\n</li>\n<li><p>/<br>public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {<br>  Object result = null;<br>  //调用之前<br>   doBefore();<br>  //调用原始对象的方法<br>  result=method.invoke(obj, args);<br>  //调用之后<br>  doAfter();<br>  return result;<br>}  </p>\n<p>private void doBefore(){<br>  System.out.println(“before method invoke”);<br>}  </p>\n<p>private void doAfter(){<br>  System.out.println(“after method invoke”);<br>}  </p>\n</li>\n</ul>\n</li>\n</ul>\n<p>}<br>　　测试类：<br>[java] view plain copy<br>package com.ljq.test;  </p>\n<p>import java.lang.reflect.InvocationHandler;<br>import java.lang.reflect.Proxy;  </p>\n<p>public class HelloWorldTest {  </p>\n<pre><code>public static void main(String[] args) {  \n    HelloWorld helloWorld=new HelloWorldImpl();  \n    InvocationHandler handler=new HelloWorldHandler(helloWorld);  \n\n    //创建动态代理对象  \n    HelloWorld proxy=(HelloWorld)Proxy.newProxyInstance(  \n        helloWorld.getClass().getClassLoader(),  \n        helloWorld.getClass().getInterfaces(),  \n        handler);  \n    proxy.sayHelloWorld();  \n}  </code></pre><p>}<br>　　运行结果为：<br>[plain] view plain copy<br>before method invoke<br>HelloWorld!<br>after method invoke<br>　　基本流程：用Proxy类创建目标类的动态代理，创建时需要指定一个自己实现InvocationHandler接口的回调类的对象，这个回调类中有一个invoke()用于拦截对目标类各个方法的调用。创建好代理后就可以直接在代理上调用目标对象的各个方法。<br>　　JDK自从1.3版本开始，就引入了动态代理，并且经常被用来动态地创建代理。JDK的动态代理用起来非常简单，但它有一个限制，就是使用动态代理的对象必须实现一个或多个接口。比如上面的HelloWorldImpl类，实现了HelloWorld接口，所以可以用JDK的动态代理。如果想代理没有实现接口的继承的类，该怎么办？ CGLIB就是最好的选择（<a href=\"https://github.com/cglib/cglib，使用apache\" target=\"_blank\" rel=\"noopener\">https://github.com/cglib/cglib，使用apache</a> license 2.0）。其他比较有名的还有从JBoss项目衍生出来的Javassist（<a href=\"https://github.com/jboss-javassist/javassist），这里介绍Cglib。\" target=\"_blank\" rel=\"noopener\">https://github.com/jboss-javassist/javassist），这里介绍Cglib。</a></p>\n<p>Cglib代码生成库</p>\n<p>　　CGlib是一个强大的，高性能，高质量的Code生成类库。它可以在运行期扩展Java类与实现Java接口。其底层是通过小而快的字节码处理框架ASM（<a href=\"http://forge.ow2.org/projects/asm，使用BSD\" target=\"_blank\" rel=\"noopener\">http://forge.ow2.org/projects/asm，使用BSD</a> License）来转换字节码并生成新的类。大部分功能实际上是asm所提供的，CGlib只是封装了asm，简化了asm的操作，实现了在运行期动态生成新的class。<br>　　CGlib被许多AOP的框架使用，例如spring AOP和dynaop，为他们提供方法的interception（拦截）；最流行的OR Mapping工具hibernate也使用CGLIB来代理单端single-ended（多对一和一对一）关联（对集合的延迟抓取，是采用其他机制实现的）；EasyMock和jMock是通过使用模仿（moke）对象来测试java代码的包，它们都通过使用CGLIB来为那些没有接口的类创建模仿（moke）对象。<br>　　CGLIB包的基本代码很少，但学起来有一定的困难，主要是缺少文档，API描述过于简单，这也是开源软件的一个不足之处。目前CGLIB的版本是cglib-2.2.jar，主要由一下部分组成：<br>　　（1）net.sf.cglib.core：底层字节码处理类，他们大部分与ASM有关系。<br>　　（2）net.sf.cglib.transform：编译期或运行期类和类文件的转换。<br>　　（3）net.sf.cglib.proxy ：实现创建代理和方法拦截器的类。<br>　　（4）net.sf.cglib.reflect ：实现快速反射和C#风格代理的类。<br>　　（5）net.sf.cglib.util：集合排序工具类。<br>　　（6）net.sf.cglib.beans：JavaBean相关的工具类。<br>　　CGLIB包是在ASM之上的一个高级别的层。对代理那些没有实现接口的类非常有用。本质上，它是通过动态的生成一个子类去覆盖所要代理类的不是final的方法，并设置好callback，则原有类的每个方法调用就会转变成调用用户定义的拦截方法（interceptors），这比JDK动态代理方法快多了。可见，Cglib的原理是对指定的目标类动态生成一个子类，并覆盖其中方法实现增强，但因为采用的是继承，所以不能对final修饰的类和final方法进行代理。</p>\n<p>用Cglib创建动态代理</p>\n<p>　　下图表示Cglib常用到的几类。</p>\n<p>图1 Cglib主要的接口<br>　　创建一个具体类的代理时，通常要用到的CGLIB包的APIs：<br>　　net.sf.cglib.proxy.Callback接口：在CGLIB包中是一个很关键的接口，所有被net.sf.cglib.proxy.Enhancer类调用的回调（callback）接口都要继承这个接口。<br>　　net.sf.cglib.proxy.MethodInterceptor接口：是最通用的回调（callback）类型，它经常被AOP用来实现拦截（intercept）方法的调用。这个接口只定义了一个方法。<br>[java] view plain copy<br>public Object intercept(Object object, java.lang.reflect.Method method, Object[] args, MethodProxy proxy) throws Throwable;<br>　　当net.sf.cglib.proxy.MethodInterceptor做为所有代理方法的回调 （callback）时，当对基于代理的方法调用时，在调用原对象的方法的之前会调用这个方法，如图下图所示。第一个参数是代理对像，第二和第三个参数分别 是拦截的方法和方法的参数。原来的方法可能通过使用java.lang.reflect.Method对象的一般反射调用，或者使用 net.sf.cglib.proxy.MethodProxy对象调用。net.sf.cglib.proxy.MethodProxy通常被首选使用，因为它更快。在这个方法中，我们可以在调用原方法之前或之后注入自己的代码。</p>\n<p>图1<br>　　net.sf.cglib.proxy.MethodInterceptor能够满足任何的拦截（interception ）需要，当对有些情况下可能过度。为了简化和提高性能，CGLIB包提供了一些专门的回调（callback）类型。例如：<br>　　net.sf.cglib.proxy.FixedValue：为提高性能，FixedValue回调对强制某一特别方法返回固定值是有用的。<br>　　net.sf.cglib.proxy.NoOp：NoOp回调把对方法调用直接委派到这个方法在父类中的实现。<br>　　net.sf.cglib.proxy.LazyLoader：当实际的对象需要延迟装载时，可以使用LazyLoader回调。一旦实际对象被装载，它将被每一个调用代理对象的方法使用。<br>　　net.sf.cglib.proxy.Dispatcher：Dispathcer回调和LazyLoader回调有相同的特点，不同的是，当代理方法被调用时，装载对象的方法也总要被调用。<br>　　 net.sf.cglib.proxy.ProxyRefDispatcher：ProxyRefDispatcher回调和Dispatcher一样，不同的是，它可以把代理对象作为装载对象方法的一个参数传递。<br>　　代理类的所以方法经常会用到回调（callback），当然你也可以使用net.sf.cglib.proxy.CallbackFilter 有选择的对一些方法使用回调（callback），这种考虑周详的控制特性在JDK的动态代理中是没有的。在JDK代理中，对 java.lang.reflect.InvocationHandler方法的调用对代理类的所有方法都有效。<br>　　CGLIB的代理包也对net.sf.cglib.proxy.Mixin提供支持。基本上，它允许多个对象被绑定到一个单一的大对象。在代理中对方法的调用委托到下面相应的对象中。<br>　　接下来我们看看如何使 用CGLIB代理APIs创建代理。<br>　　1、创建一个简单的代理<br>　　CGLIB代理最核心类net.sf.cglib.proxy.Enhancer， 为了创建一个代理，最起码你要用到这个类。首先，让我们使用NoOp回调创建一个代理。<br>[java] view plain copy<br>/**  </p>\n<ul>\n<li>Create a proxy using NoOp callback. The target class  </li>\n<li>must have a default zero-argument constructor </li>\n<li></li>\n<li>@param targetClass the super class of the proxy  </li>\n<li>@return a new proxy for a target class instance  </li>\n<li>/<br>public Object createProxy(Class targetClass) {<br>   Enhancer enhancer = new Enhancer();<br>   enhancer.setSuperclass(targetClass);<br>   enhancer.setCallback(NoOp.INSTANCE);<br>   return enhancer.create();<br>}<br>　　返回值是target类一个实例的代理。在这个例子中，我们为net.sf.cglib.proxy.Enhancer 配置了一个单一的回调（callback）。我们可以看到很少直接创建一个简单的代理，而是创建一个net.sf.cglib.proxy.Enhancer的实例，在net.sf.cglib.proxy.Enhancer类中你可使用静态帮助方法创建一个简单的代理。一般推荐使用上面例子的方法创建代理，因为它允许你通过配置net.sf.cglib.proxy.Enhancer实例很好的控制代理的创建。<br>　　要注意的是，target类是作为产生的代理的父类传进来的。不同于JDK的动态代理，它不能在创建代理时传target对象，target对象必须被CGLIB包来创建。在这个例子中，默认的无参数构造器时用来创建target实例的。如果你想用CGLIB来创建有参数的实例，用net.sf.cglib.proxy.Enhancer.create(Class[], Object[])方法替代net.sf.cglib.proxy.Enhancer.create()就可以了。方法中第一个参数定义了参数的类型，第 二个是参数的值。在参数中，基本类型应被转化成类的类型。<br>　　2、使用MethodInterceptor创建一个代理<br>　　为了更好的使用代理，我们可以使用自己定义的MethodInterceptor类型回调（callback）来代替net.sf.cglib.proxy.NoOp回调。当对代理中所有方法的调用时，都会转向MethodInterceptor类型的拦截（intercept）方法，在拦截方法中再调用底层对象相应的方法。下面我们举个例子，假设你想对目标对象的所有方法调用进行权限的检查，如果没有经过授权，就抛出一个运行时的异常AuthorizationException。其中AuthorizationService.java接口的代码如下：<br>[java] view plain copy<br>package com.lizjason.cglibproxy;   </li>\n</ul>\n<p>import java.lang.reflect.Method;   </p>\n<p>/**  </p>\n<ul>\n<li>A simple authorization service for illustration purpose.  </li>\n<li>@author Jason Zhicheng Li (<a href=\"mailto:jason@lizjason.com\" target=\"_blank\" rel=\"noopener\">jason@lizjason.com</a>)  </li>\n<li>/<br>public interface AuthorizationService {<br>  void authorize(Method method);<br>}<br>　　对net.sf.cglib.proxy.MethodInterceptor接口的实现的类AuthorizationInterceptor.java代码如下：<br>[java] view plain copy<br>package com.lizjason.cglibproxy.impl;<br>import java.lang.reflect.Method;<br>import net.sf.cglib.proxy.MethodInterceptor;<br>import net.sf.cglib.proxy.MethodProxy;  </li>\n</ul>\n<p>import com.lizjason.cglibproxy.AuthorizationService;  </p>\n<p>/** </p>\n<ul>\n<li><p>A simple MethodInterceptor implementation to </p>\n</li>\n<li><p>apply authorization checks for proxy method calls. </p>\n</li>\n<li><p>/<br>public class AuthorizationInterceptor implements MethodInterceptor {  </p>\n<p>  private AuthorizationService authorizationService;  </p>\n<p>  /** </p>\n<ul>\n<li><p>Create a AuthorizationInterceptor with the given AuthorizationService </p>\n</li>\n<li><p>/<br>public AuthorizationInterceptor (AuthorizationService authorizationService) {<br>  this.authorizationService = authorizationService;<br>}  </p>\n<p>/** </p>\n</li>\n<li><p>Intercept the proxy method invocations to inject authorization check. * The original </p>\n</li>\n<li><p>method is invoked through MethodProxy. </p>\n</li>\n<li><p>/<br>public Object intercept(Object object, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {<br>  if (authorizationService != null) {  </p>\n<pre><code>//may throw an AuthorizationException if authorization failed  \nauthorizationService.authorize(method);  </code></pre><p>  }<br>  return methodProxy.invokeSuper(object, args);<br>}<br>}<br>　　我们可以看到在拦截方法中，首先进行权限的检查，如果通过权限的检查，拦截方法再调用目标对象的原始方法。由于性能的原因，对原始方法的调用我们使用CGLIB的net.sf.cglib.proxy.MethodProxy对象，而不是反射中一般使用java.lang.reflect.Method对象。<br>　　下面是一个完整的使用MethodInterceptor的例子。<br>[java] view plain copy<br>package cglibexample;  </p>\n</li>\n</ul>\n</li>\n</ul>\n<p>import java.lang.reflect.Method;<br>import net.sf.cglib.proxy.Enhancer;<br>import net.sf.cglib.proxy.MethodInterceptor;<br>import net.sf.cglib.proxy.MethodProxy;  </p>\n<p>/** </p>\n<ul>\n<li><p>定义一个HelloWorld类，没有实现接口 </p>\n</li>\n<li></li>\n<li><p>/<br>class HelloWorld {  </p>\n<p>  public void sayHelloWorld() {  </p>\n<pre><code>System.out.println(&quot;HelloWorld!&quot;);  </code></pre><p>  }<br>}  </p>\n</li>\n</ul>\n<p>/** </p>\n<ul>\n<li><p>通过Cglib实现在方法调用前后向控制台输出两句字符串 </p>\n</li>\n<li></li>\n<li><p>/<br>class CglibProxy implements MethodInterceptor {  </p>\n<p>  //要代理的原始对象<br>  private Object obj;  </p>\n<p>  public Object createProxy(Object target) {  </p>\n<pre><code>this.obj = target;  \nEnhancer enhancer = new Enhancer();  \n// 设置要代理的目标类，以扩展它的功能  \nenhancer.setSuperclass(this.obj.getClass());  \n// 设置单一回调对象，在回调中拦截对目标方法的调用  \nenhancer.setCallback(this);  \n//设置类装载器  \nenhancer.setClassLoader(target.getClass().getClassLoader());  \n//创建代理对象  \nreturn enhancer.create();  </code></pre><p>  }  </p>\n<p>  /** </p>\n<ul>\n<li><p>回调方法:在代理实例上拦截并处理目标方法的调用，返回结果 </p>\n</li>\n<li></li>\n<li><p>@param proxy 代理类 </p>\n</li>\n<li><p>@param method 被代理的方法 </p>\n</li>\n<li><p>@param params 该方法的参数数组 </p>\n</li>\n<li><p>@param methodProxy </p>\n</li>\n<li><p>/<br>@Override<br>public Object intercept(Object proxy, Method method, Object[] params,  </p>\n<pre><code>MethodProxy methodProxy) throws Throwable {  </code></pre><p>  Object result = null;<br>  // 调用之前<br>  doBefore();<br>  // 调用目标方法，用methodProxy,<br>  // 而不是原始的method，以提高性能<br>  result = methodProxy.invokeSuper(proxy, params);<br>  // 调用之后<br>  doAfter();<br>  return result;<br>}  </p>\n<p>private void doBefore() {<br>  System.out.println(“before method invoke”);<br>}  </p>\n<p>private void doAfter() {<br>  System.out.println(“after method invoke”);<br>}<br>}  </p>\n</li>\n</ul>\n</li>\n</ul>\n<p>public class TestCglib {  </p>\n<pre><code>public static void main(String[] args) {  \n    CglibProxy cglibProxy = new CglibProxy();  \n    HelloWorld hw = (HelloWorld) cglibProxy.createProxy(new HelloWorld());  \n    hw.sayHelloWorld();  \n}  </code></pre><p>}<br>　　输出结果：<br>[plain] view plain copy<br>before method invoke<br>HelloWorld!<br>after method invoke<br>　　基本流程：需要自己写代理类，它实现MethodInterceptor接口，有一个intercept()回调方法用于拦截对目标方法的调用，里面使用methodProxy来调用目标方法。创建代理对象要用Enhance类，用它设置好代理的目标类、有intercept()回调的代理类实例、最后用create()创建并返回代理实例。<br>　　3、使用CallbackFilter在方法层设置回调<br>　　net.sf.cglib.proxy.CallbackFilter允许我们在方法层设置回调（callback）。假如你有一个PersistenceServiceImpl类，它有两个方法：save和load，其中方法save需要权限检查，而方法load不需要权限检查。<br>[java] view plain copy<br>import com.lizjason.cglibproxy.PersistenceService;<br>import java.lang.reflect.Method;<br>import net.sf.cglib.proxy.CallbackFilter;  </p>\n<p>/** </p>\n<ul>\n<li><p>A simple implementation of PersistenceService interface </p>\n</li>\n<li><p>/<br>class PersistenceServiceImpl implements PersistenceService {  </p>\n<p>  //需要权限检查<br>  public void save(long id, String data) {  </p>\n<pre><code>System.out.println(data + &quot; has been saved successfully.&quot;);  </code></pre><p>  }  </p>\n<p>  //不需要权限检查<br>  public String load(long id) {  </p>\n<pre><code>return &quot;Test CGLIB CallBackFilter&quot;;  </code></pre><p>  }<br>}  </p>\n</li>\n</ul>\n<p>/** </p>\n<ul>\n<li><p>An implementation of CallbackFilter for PersistenceServiceImpl </p>\n</li>\n<li><p>/<br>public class PersistenceServiceCallbackFilter implements CallbackFilter {<br>  //callback index for save method<br>  private static final int SAVE = 0;<br>  //callback index for load method<br>  private static final int LOAD = 1;  </p>\n<p>  /** </p>\n<ul>\n<li>Specify which callback to use for the method being invoked.  </li>\n<li>@param method the method being invoked. </li>\n<li>@return  </li>\n<li>/<br>@Override<br>public int accept(Method method) {<br>  //指定各方法的代理回调索引<br>  String name = method.getName();<br>  if (“save”.equals(name)) {  <pre><code>return SAVE;  </code></pre>  }<br>  // for other methods, including the load method, use the<br>  // second callback<br>  return LOAD;<br>}<br>}<br>　　accept方法中对代理方法和回调进行了匹配，返回的值是某方法在回调数组中的索引。下面是PersistenceServiceImpl类代理的实现。<br>[java] view plain copy<br>…<br>Enhancer enhancer = new Enhancer();<br>enhancer.setSuperclass(PersistenceServiceImpl.class);<br>//设置回调过滤器<br>CallbackFilter callbackFilter = new PersistenceServiceCallbackFilter();<br>enhancer.setCallbackFilter(callbackFilter);<br>//创建各个目标方法的代理回调<br>AuthorizationService authorizationService = …<br>Callback saveCallback = new AuthorizationInterceptor(authorizationService);<br>Callback loadCallback = NoOp.INSTANCE;<br>//顺序要与指定的回调索引一致<br>Callback[] callbacks = new Callback[]{saveCallback, loadCallback };<br>enhancer.setCallbacks(callbacks);  //设置回调<br>…<br>return (PersistenceServiceImpl)enhancer.create();  //创建代理对象<br>　　在这个例子中save方法使用了AuthorizationInterceptor实例，load方法使用了NoOp实例。此外，你也可以通过net.sf.cglib.proxy.Enhancer.setInterfaces(Class[])方法指定代理对象所实现的接口。<br>　　除了为net.sf.cglib.proxy.Enhancer指定回调数组，你还可以通过net.sf.cglib.proxy.Enhancer.setCallbackTypes(Class[]) 方法指定回调类型数组。当创建代理时，如果你没有回调实例的数组，就可以使用回调类型。象使用回调一样，你必须使用net.sf.cglib.proxy.CallbackFilter为每一个方法指定一个回调类型索引。<br>　　4、使用Mixin<br>　　Mixin通过代理方式将多种类型的对象绑定到一个大对象上，这样对各个目标类型中的方法调用可以直接在这个大对象上进行。下面是一个例子。</li>\n</ul>\n</li>\n</ul>\n<p>[java] view plain copy<br>import net.sf.cglib.proxy.Mixin;  </p>\n<p>interface MyInterfaceA {  </p>\n<pre><code>public void methodA();  </code></pre><p>}  </p>\n<p>interface MyInterfaceB {  </p>\n<pre><code>public void methodB();  </code></pre><p>}  </p>\n<p>class MyInterfaceAImpl implements MyInterfaceA {  </p>\n<pre><code>@Override  \npublic void methodA() {  \n    System.out.println(&quot;MyInterfaceAImpl.methodA()&quot;);  \n}  </code></pre><p>}  </p>\n<p>class MyInterfaceBImpl implements MyInterfaceB {  </p>\n<pre><code>@Override  \npublic void methodB() {  \n    System.out.println(&quot;MyInterfaceBImpl.methodB()&quot;);  \n}  </code></pre><p>}  </p>\n<p>public class Main {  </p>\n<pre><code>public static void main(String[] args) {  \n    //各个对象对应的类型  \n    Class[] interfaces = new Class[]{MyInterfaceA.class, MyInterfaceB.class};  \n    //各个对象  \n    Object[] delegates = new Object[]{new MyInterfaceAImpl(), new MyInterfaceBImpl()};  \n    //将多个对象绑定到一个大对象上  \n    Object obj = Mixin.create(interfaces, delegates);  \n    //直接在大对象上调用各个目标方法  \n    ((MyInterfaceA)obj).methodA();  \n    ((MyInterfaceB)obj).methodB();  \n}  </code></pre><p>}  </p>\n<p>动态生成Bean</p>\n<p>　　我们知道，Java Bean包含一组属性字段，用这些属性来存储和获取值。通过指定一组属性名和属性值的类型，我们可以使用Cglib的BeanGenerator和BeanMap来动态生成Bean。下面是一个例子。<br>[java] view plain copy<br>import java.lang.reflect.Method;<br>import java.util.HashMap;<br>import java.util.Iterator;<br>import java.util.Map;<br>import java.util.Set;<br>import net.sf.cglib.beans.BeanGenerator;<br>import net.sf.cglib.beans.BeanMap;  </p>\n<p>/** </p>\n<ul>\n<li><p>动态实体bean </p>\n</li>\n<li></li>\n<li><p>@author cuiran </p>\n</li>\n<li><p>@version 1.0 </p>\n</li>\n<li><p>/<br>class CglibBean {  </p>\n<p>  //Bean实体Object<br>  public Object object = null;<br>  //属性map<br>  public BeanMap beanMap = null;  </p>\n<p>  public CglibBean() {  </p>\n<pre><code>super();  </code></pre><p>  }  </p>\n<p>  @SuppressWarnings(“unchecked”)<br>  public CglibBean(Map&lt;String, Class&gt; propertyMap) {  </p>\n<pre><code>//用一组属性生成实体Bean  \nthis.object = generateBean(propertyMap);  \n//用实体Bean创建BeanMap，以便可以设置和获取Bean属性的值  \nthis.beanMap = BeanMap.create(this.object);  </code></pre><p>  }  </p>\n<p>  /** </p>\n<ul>\n<li><p>给bean中的属性赋值 </p>\n</li>\n<li></li>\n<li><p>@param property 属性名 </p>\n</li>\n<li><p>@param value 值 </p>\n</li>\n<li><p>/<br>public void setValue(String property, Object value) {<br>  beanMap.put(property, value);<br>}  </p>\n<p>/** </p>\n</li>\n<li><p>获取bean中属性的值 </p>\n</li>\n<li></li>\n<li><p>@param property 属性名 </p>\n</li>\n<li><p>@return 值 </p>\n</li>\n<li><p>/<br>public Object getValue(String property) {<br>  return beanMap.get(property);<br>}  </p>\n<p>/** </p>\n</li>\n<li><p>得到该实体bean对象 </p>\n</li>\n<li></li>\n<li><p>@return </p>\n</li>\n<li><p>/<br>public Object getObject() {<br>  return this.object;<br>}  </p>\n<p>@SuppressWarnings(“unchecked”)<br>private Object generateBean(Map&lt;String, Class&gt; propertyMap) {<br>  //根据一组属性名和属性值的类型，动态创建Bean对象<br>  BeanGenerator generator = new BeanGenerator();<br>  Set keySet = propertyMap.keySet();<br>  for (Iterator i = keySet.iterator(); i.hasNext();) {  </p>\n<pre><code>String key = (String) i.next();  \ngenerator.addProperty(key, (Class) propertyMap.get(key));  </code></pre><p>  }<br>  return generator.create();  //创建Bean<br>}<br>}  </p>\n</li>\n</ul>\n</li>\n</ul>\n<p>/** </p>\n<ul>\n<li><p>Cglib测试类 </p>\n</li>\n<li></li>\n<li><p>@author cuiran </p>\n</li>\n<li><p>@version 1.0 </p>\n</li>\n<li><p>/<br>public class CglibTest {  </p>\n<p>  @SuppressWarnings(“unchecked”)<br>  public static void main(String[] args) throws ClassNotFoundException { // 设置类成员属性  </p>\n<pre><code>HashMap&lt;String, Class&gt; propertyMap = new HashMap&lt;&gt;();  \npropertyMap.put(&quot;id&quot;, Class.forName(&quot;java.lang.Integer&quot;));  \npropertyMap.put(&quot;name&quot;, Class.forName(&quot;java.lang.String&quot;));  \npropertyMap.put(&quot;address&quot;, Class.forName(&quot;java.lang.String&quot;)); // 生成动态Bean  \nCglibBean bean = new CglibBean(propertyMap);  \n// 给Bean设置值  \nbean.setValue(&quot;id&quot;, 123);  //Auto-boxing  \nbean.setValue(&quot;name&quot;, &quot;454&quot;);  \nbean.setValue(&quot;address&quot;, &quot;789&quot;);  \n// 从Bean中获取值，当然获得值的类型是Object  \nSystem.out.println(&quot; &gt;&gt; id = &quot; + bean.getValue(&quot;id&quot;));  \nSystem.out.println(&quot; &gt;&gt; name = &quot; + bean.getValue(&quot;name&quot;));  \nSystem.out.println(&quot; &gt;&gt; address = &quot; + bean.getValue(&quot;address&quot;));  \n// 获得bean的实体  \nObject object = bean.getObject();  \n// 通过反射查看所有方法名  \nClass clazz = object.getClass();  \nMethod[] methods = clazz.getDeclaredMethods();  \nfor (Method curMethod : methods) {  \n    System.out.println(curMethod.getName());  \n}  </code></pre><p>  }<br>}<br>　　输出结果：<br>[java] view plain copy</p>\n<blockquote>\n<blockquote>\n<p>id = 123<br>name = 454<br>address = 789<br>getAddress<br>getName<br>getId<br>setName<br>setId<br>setAddress  </p>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<p>CGLIB轻松实现延迟加载</p>\n<p>　　通过使用LazyLoader，可以实现延迟加载，即在没有访问对象的字段或方法之前并不加载对象，只有当要访问对象的字段或方法时才进行加载。下面是一个例子。<br>[java] view plain copy<br>import net.sf.cglib.proxy.Enhancer;<br>import net.sf.cglib.proxy.LazyLoader;  </p>\n<p>class TestBean {<br>    private String userName;  </p>\n<pre><code>/** \n * @return the userName \n */  \npublic String getUserName() {  \n    return userName;  \n}  \n\n/** \n * @param userName the userName to set \n */  \npublic void setUserName(String userName) {  \n    this.userName = userName;  \n}  </code></pre><p>}  </p>\n<p>//延迟加载代理类<br>class LazyProxy implements LazyLoader {  </p>\n<pre><code>//拦截Bean的加载，本方法会延迟处理  \n@Override  \npublic Object loadObject() throws Exception {  \n    System.out.println(&quot;开始延迟加载!&quot;);  \n    TestBean bean = new TestBean(); //创建实体Bean  \n    bean.setUserName(&quot;test&quot;);  //给一个属性赋值  \n    return bean;  //返回Bean  \n}  </code></pre><p>}  </p>\n<p>public class BeanTest {  </p>\n<pre><code>public static void main(String[] args) {  \n    //创建Bean类型的延迟加载代理实例  \n    TestBean bean = (TestBean) Enhancer.create(TestBean.class, new LazyProxy());  \n    System.out.println(&quot;------&quot;);  \n    System.out.println(bean.getUserName());  \n}  </code></pre><p>}<br>　　输出结果：<br>[java] view plain copy</p>\n<hr>\n<p>开始延迟加载!<br>test<br>　　我们创建TestBean类的延迟代理，通过LazyLoader中的loadObject()方法的拦截，实现对TestBean类的对象进行延迟加载。从输出可以看出，当创建延迟代理时，并没有立刻加载目标对象（因为还有输出“开始延迟加载!”），当通过代理访问目标对象的getUserName()方法时，就会加载目标对象。可见loadObject()是延迟执行的。</p>\n","site":{"data":{}},"excerpt":"<p>JDK动态代理</p><p>　　代理模式是常用的Java设计模式，他的特征是代理类与委托类有同样的接口，代理类主要负责为委托类预处理消息、过滤消息、把消息转发给委托类，以及事后处理消息等。代理类与委托类之间通常会存在关联关系，一个代理类的对象与一个委托类的对象关联，代理类的对象本身并不真正实现服务，而是通过调用委托类的对象的相关方法，来提供特定的服务。<br>　　按照代理的创建时期，代理类可以分为两种。<br>　　静态代理：由程序员创建或特定工具自动生成源代码，再对其编译。在程序运行前，代理类的.class文件就已经存在了。<br>　　动态代理：在程序运行时，运用反射机制动态创建而成。<br>　　为什么使用动态代理？因为动态代理可以对请求进行任何处理。<br>　　哪些地方需要动态代理？不允许直接访问某些类；对访问要做特殊处理等。<br>　　目前Java开发包中包含了对动态代理的支持，但是其实现只支持对接口的的实现。 其实现主要通过java.lang.reflect.Proxy类和java.lang.reflect.InvocationHandler接口。 Proxy类主要用来获取动态代理对象，InvocationHandler接口用来约束调用者实现。<br>　　以下为模拟案例，通过动态代理实现在方法调用前后向控制台输出两句字符串。<br>　　定义一个HelloWorld接口：<br>[java] view plain copy<br>package com.ljq.test;  </p>","more":"\n\n<p> /** </p>\n<ul>\n<li><p>定义一个HelloWorld接口 </p>\n</li>\n<li></li>\n<li><p>@author jiqinlin </p>\n</li>\n<li></li>\n<li><p>/<br>public interface HelloWorld {<br>  public void sayHelloWorld();<br>}<br>　　类HelloWorldImpl是HelloWorld接口的实现：<br>[java] view plain copy<br>package com.ljq.test;  </p>\n<p>/** </p>\n</li>\n<li><p>类HelloWorldImpl是HelloWorld接口的实现 </p>\n</li>\n<li></li>\n<li><p>@author jiqinlin </p>\n</li>\n<li></li>\n<li><p>/<br>public class HelloWorldImpl implements HelloWorld{  </p>\n<p>  public void sayHelloWorld() {  </p>\n<pre><code>System.out.println(&quot;HelloWorld!&quot;);  </code></pre><p>  }  </p>\n</li>\n</ul>\n<p>}<br>　　HelloWorldHandler是 InvocationHandler接口实现：<br>[java] view plain copy<br>package com.ljq.test;  </p>\n<p> import java.lang.reflect.InvocationHandler;<br> import java.lang.reflect.Method;  </p>\n<p> /** </p>\n<ul>\n<li><p>实现在方法调用前后向控制台输出两句字符串 </p>\n</li>\n<li></li>\n<li><p>@author jiqinlin </p>\n</li>\n<li></li>\n<li><p>/<br>public class HelloWorldHandler implements InvocationHandler{<br>  //要代理的原始对象<br>   private Object obj;  </p>\n<p>  public HelloWorldHandler(Object obj) {  </p>\n<pre><code>super();  \nthis.obj = obj;  </code></pre><p>  }  </p>\n<p>  /** </p>\n<ul>\n<li><p>在代理实例上处理方法调用并返回结果 </p>\n</li>\n<li></li>\n<li><p>@param proxy 代理类 </p>\n</li>\n<li><p>@param method 被代理的方法 </p>\n</li>\n<li><p>@param args 该方法的参数数组 </p>\n</li>\n<li><p>/<br>public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {<br>  Object result = null;<br>  //调用之前<br>   doBefore();<br>  //调用原始对象的方法<br>  result=method.invoke(obj, args);<br>  //调用之后<br>  doAfter();<br>  return result;<br>}  </p>\n<p>private void doBefore(){<br>  System.out.println(“before method invoke”);<br>}  </p>\n<p>private void doAfter(){<br>  System.out.println(“after method invoke”);<br>}  </p>\n</li>\n</ul>\n</li>\n</ul>\n<p>}<br>　　测试类：<br>[java] view plain copy<br>package com.ljq.test;  </p>\n<p>import java.lang.reflect.InvocationHandler;<br>import java.lang.reflect.Proxy;  </p>\n<p>public class HelloWorldTest {  </p>\n<pre><code>public static void main(String[] args) {  \n    HelloWorld helloWorld=new HelloWorldImpl();  \n    InvocationHandler handler=new HelloWorldHandler(helloWorld);  \n\n    //创建动态代理对象  \n    HelloWorld proxy=(HelloWorld)Proxy.newProxyInstance(  \n        helloWorld.getClass().getClassLoader(),  \n        helloWorld.getClass().getInterfaces(),  \n        handler);  \n    proxy.sayHelloWorld();  \n}  </code></pre><p>}<br>　　运行结果为：<br>[plain] view plain copy<br>before method invoke<br>HelloWorld!<br>after method invoke<br>　　基本流程：用Proxy类创建目标类的动态代理，创建时需要指定一个自己实现InvocationHandler接口的回调类的对象，这个回调类中有一个invoke()用于拦截对目标类各个方法的调用。创建好代理后就可以直接在代理上调用目标对象的各个方法。<br>　　JDK自从1.3版本开始，就引入了动态代理，并且经常被用来动态地创建代理。JDK的动态代理用起来非常简单，但它有一个限制，就是使用动态代理的对象必须实现一个或多个接口。比如上面的HelloWorldImpl类，实现了HelloWorld接口，所以可以用JDK的动态代理。如果想代理没有实现接口的继承的类，该怎么办？ CGLIB就是最好的选择（<a href=\"https://github.com/cglib/cglib，使用apache\" target=\"_blank\" rel=\"noopener\">https://github.com/cglib/cglib，使用apache</a> license 2.0）。其他比较有名的还有从JBoss项目衍生出来的Javassist（<a href=\"https://github.com/jboss-javassist/javassist），这里介绍Cglib。\" target=\"_blank\" rel=\"noopener\">https://github.com/jboss-javassist/javassist），这里介绍Cglib。</a></p>\n<p>Cglib代码生成库</p>\n<p>　　CGlib是一个强大的，高性能，高质量的Code生成类库。它可以在运行期扩展Java类与实现Java接口。其底层是通过小而快的字节码处理框架ASM（<a href=\"http://forge.ow2.org/projects/asm，使用BSD\" target=\"_blank\" rel=\"noopener\">http://forge.ow2.org/projects/asm，使用BSD</a> License）来转换字节码并生成新的类。大部分功能实际上是asm所提供的，CGlib只是封装了asm，简化了asm的操作，实现了在运行期动态生成新的class。<br>　　CGlib被许多AOP的框架使用，例如spring AOP和dynaop，为他们提供方法的interception（拦截）；最流行的OR Mapping工具hibernate也使用CGLIB来代理单端single-ended（多对一和一对一）关联（对集合的延迟抓取，是采用其他机制实现的）；EasyMock和jMock是通过使用模仿（moke）对象来测试java代码的包，它们都通过使用CGLIB来为那些没有接口的类创建模仿（moke）对象。<br>　　CGLIB包的基本代码很少，但学起来有一定的困难，主要是缺少文档，API描述过于简单，这也是开源软件的一个不足之处。目前CGLIB的版本是cglib-2.2.jar，主要由一下部分组成：<br>　　（1）net.sf.cglib.core：底层字节码处理类，他们大部分与ASM有关系。<br>　　（2）net.sf.cglib.transform：编译期或运行期类和类文件的转换。<br>　　（3）net.sf.cglib.proxy ：实现创建代理和方法拦截器的类。<br>　　（4）net.sf.cglib.reflect ：实现快速反射和C#风格代理的类。<br>　　（5）net.sf.cglib.util：集合排序工具类。<br>　　（6）net.sf.cglib.beans：JavaBean相关的工具类。<br>　　CGLIB包是在ASM之上的一个高级别的层。对代理那些没有实现接口的类非常有用。本质上，它是通过动态的生成一个子类去覆盖所要代理类的不是final的方法，并设置好callback，则原有类的每个方法调用就会转变成调用用户定义的拦截方法（interceptors），这比JDK动态代理方法快多了。可见，Cglib的原理是对指定的目标类动态生成一个子类，并覆盖其中方法实现增强，但因为采用的是继承，所以不能对final修饰的类和final方法进行代理。</p>\n<p>用Cglib创建动态代理</p>\n<p>　　下图表示Cglib常用到的几类。</p>\n<p>图1 Cglib主要的接口<br>　　创建一个具体类的代理时，通常要用到的CGLIB包的APIs：<br>　　net.sf.cglib.proxy.Callback接口：在CGLIB包中是一个很关键的接口，所有被net.sf.cglib.proxy.Enhancer类调用的回调（callback）接口都要继承这个接口。<br>　　net.sf.cglib.proxy.MethodInterceptor接口：是最通用的回调（callback）类型，它经常被AOP用来实现拦截（intercept）方法的调用。这个接口只定义了一个方法。<br>[java] view plain copy<br>public Object intercept(Object object, java.lang.reflect.Method method, Object[] args, MethodProxy proxy) throws Throwable;<br>　　当net.sf.cglib.proxy.MethodInterceptor做为所有代理方法的回调 （callback）时，当对基于代理的方法调用时，在调用原对象的方法的之前会调用这个方法，如图下图所示。第一个参数是代理对像，第二和第三个参数分别 是拦截的方法和方法的参数。原来的方法可能通过使用java.lang.reflect.Method对象的一般反射调用，或者使用 net.sf.cglib.proxy.MethodProxy对象调用。net.sf.cglib.proxy.MethodProxy通常被首选使用，因为它更快。在这个方法中，我们可以在调用原方法之前或之后注入自己的代码。</p>\n<p>图1<br>　　net.sf.cglib.proxy.MethodInterceptor能够满足任何的拦截（interception ）需要，当对有些情况下可能过度。为了简化和提高性能，CGLIB包提供了一些专门的回调（callback）类型。例如：<br>　　net.sf.cglib.proxy.FixedValue：为提高性能，FixedValue回调对强制某一特别方法返回固定值是有用的。<br>　　net.sf.cglib.proxy.NoOp：NoOp回调把对方法调用直接委派到这个方法在父类中的实现。<br>　　net.sf.cglib.proxy.LazyLoader：当实际的对象需要延迟装载时，可以使用LazyLoader回调。一旦实际对象被装载，它将被每一个调用代理对象的方法使用。<br>　　net.sf.cglib.proxy.Dispatcher：Dispathcer回调和LazyLoader回调有相同的特点，不同的是，当代理方法被调用时，装载对象的方法也总要被调用。<br>　　 net.sf.cglib.proxy.ProxyRefDispatcher：ProxyRefDispatcher回调和Dispatcher一样，不同的是，它可以把代理对象作为装载对象方法的一个参数传递。<br>　　代理类的所以方法经常会用到回调（callback），当然你也可以使用net.sf.cglib.proxy.CallbackFilter 有选择的对一些方法使用回调（callback），这种考虑周详的控制特性在JDK的动态代理中是没有的。在JDK代理中，对 java.lang.reflect.InvocationHandler方法的调用对代理类的所有方法都有效。<br>　　CGLIB的代理包也对net.sf.cglib.proxy.Mixin提供支持。基本上，它允许多个对象被绑定到一个单一的大对象。在代理中对方法的调用委托到下面相应的对象中。<br>　　接下来我们看看如何使 用CGLIB代理APIs创建代理。<br>　　1、创建一个简单的代理<br>　　CGLIB代理最核心类net.sf.cglib.proxy.Enhancer， 为了创建一个代理，最起码你要用到这个类。首先，让我们使用NoOp回调创建一个代理。<br>[java] view plain copy<br>/**  </p>\n<ul>\n<li>Create a proxy using NoOp callback. The target class  </li>\n<li>must have a default zero-argument constructor </li>\n<li></li>\n<li>@param targetClass the super class of the proxy  </li>\n<li>@return a new proxy for a target class instance  </li>\n<li>/<br>public Object createProxy(Class targetClass) {<br>   Enhancer enhancer = new Enhancer();<br>   enhancer.setSuperclass(targetClass);<br>   enhancer.setCallback(NoOp.INSTANCE);<br>   return enhancer.create();<br>}<br>　　返回值是target类一个实例的代理。在这个例子中，我们为net.sf.cglib.proxy.Enhancer 配置了一个单一的回调（callback）。我们可以看到很少直接创建一个简单的代理，而是创建一个net.sf.cglib.proxy.Enhancer的实例，在net.sf.cglib.proxy.Enhancer类中你可使用静态帮助方法创建一个简单的代理。一般推荐使用上面例子的方法创建代理，因为它允许你通过配置net.sf.cglib.proxy.Enhancer实例很好的控制代理的创建。<br>　　要注意的是，target类是作为产生的代理的父类传进来的。不同于JDK的动态代理，它不能在创建代理时传target对象，target对象必须被CGLIB包来创建。在这个例子中，默认的无参数构造器时用来创建target实例的。如果你想用CGLIB来创建有参数的实例，用net.sf.cglib.proxy.Enhancer.create(Class[], Object[])方法替代net.sf.cglib.proxy.Enhancer.create()就可以了。方法中第一个参数定义了参数的类型，第 二个是参数的值。在参数中，基本类型应被转化成类的类型。<br>　　2、使用MethodInterceptor创建一个代理<br>　　为了更好的使用代理，我们可以使用自己定义的MethodInterceptor类型回调（callback）来代替net.sf.cglib.proxy.NoOp回调。当对代理中所有方法的调用时，都会转向MethodInterceptor类型的拦截（intercept）方法，在拦截方法中再调用底层对象相应的方法。下面我们举个例子，假设你想对目标对象的所有方法调用进行权限的检查，如果没有经过授权，就抛出一个运行时的异常AuthorizationException。其中AuthorizationService.java接口的代码如下：<br>[java] view plain copy<br>package com.lizjason.cglibproxy;   </li>\n</ul>\n<p>import java.lang.reflect.Method;   </p>\n<p>/**  </p>\n<ul>\n<li>A simple authorization service for illustration purpose.  </li>\n<li>@author Jason Zhicheng Li (<a href=\"mailto:jason@lizjason.com\" target=\"_blank\" rel=\"noopener\">jason@lizjason.com</a>)  </li>\n<li>/<br>public interface AuthorizationService {<br>  void authorize(Method method);<br>}<br>　　对net.sf.cglib.proxy.MethodInterceptor接口的实现的类AuthorizationInterceptor.java代码如下：<br>[java] view plain copy<br>package com.lizjason.cglibproxy.impl;<br>import java.lang.reflect.Method;<br>import net.sf.cglib.proxy.MethodInterceptor;<br>import net.sf.cglib.proxy.MethodProxy;  </li>\n</ul>\n<p>import com.lizjason.cglibproxy.AuthorizationService;  </p>\n<p>/** </p>\n<ul>\n<li><p>A simple MethodInterceptor implementation to </p>\n</li>\n<li><p>apply authorization checks for proxy method calls. </p>\n</li>\n<li><p>/<br>public class AuthorizationInterceptor implements MethodInterceptor {  </p>\n<p>  private AuthorizationService authorizationService;  </p>\n<p>  /** </p>\n<ul>\n<li><p>Create a AuthorizationInterceptor with the given AuthorizationService </p>\n</li>\n<li><p>/<br>public AuthorizationInterceptor (AuthorizationService authorizationService) {<br>  this.authorizationService = authorizationService;<br>}  </p>\n<p>/** </p>\n</li>\n<li><p>Intercept the proxy method invocations to inject authorization check. * The original </p>\n</li>\n<li><p>method is invoked through MethodProxy. </p>\n</li>\n<li><p>/<br>public Object intercept(Object object, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {<br>  if (authorizationService != null) {  </p>\n<pre><code>//may throw an AuthorizationException if authorization failed  \nauthorizationService.authorize(method);  </code></pre><p>  }<br>  return methodProxy.invokeSuper(object, args);<br>}<br>}<br>　　我们可以看到在拦截方法中，首先进行权限的检查，如果通过权限的检查，拦截方法再调用目标对象的原始方法。由于性能的原因，对原始方法的调用我们使用CGLIB的net.sf.cglib.proxy.MethodProxy对象，而不是反射中一般使用java.lang.reflect.Method对象。<br>　　下面是一个完整的使用MethodInterceptor的例子。<br>[java] view plain copy<br>package cglibexample;  </p>\n</li>\n</ul>\n</li>\n</ul>\n<p>import java.lang.reflect.Method;<br>import net.sf.cglib.proxy.Enhancer;<br>import net.sf.cglib.proxy.MethodInterceptor;<br>import net.sf.cglib.proxy.MethodProxy;  </p>\n<p>/** </p>\n<ul>\n<li><p>定义一个HelloWorld类，没有实现接口 </p>\n</li>\n<li></li>\n<li><p>/<br>class HelloWorld {  </p>\n<p>  public void sayHelloWorld() {  </p>\n<pre><code>System.out.println(&quot;HelloWorld!&quot;);  </code></pre><p>  }<br>}  </p>\n</li>\n</ul>\n<p>/** </p>\n<ul>\n<li><p>通过Cglib实现在方法调用前后向控制台输出两句字符串 </p>\n</li>\n<li></li>\n<li><p>/<br>class CglibProxy implements MethodInterceptor {  </p>\n<p>  //要代理的原始对象<br>  private Object obj;  </p>\n<p>  public Object createProxy(Object target) {  </p>\n<pre><code>this.obj = target;  \nEnhancer enhancer = new Enhancer();  \n// 设置要代理的目标类，以扩展它的功能  \nenhancer.setSuperclass(this.obj.getClass());  \n// 设置单一回调对象，在回调中拦截对目标方法的调用  \nenhancer.setCallback(this);  \n//设置类装载器  \nenhancer.setClassLoader(target.getClass().getClassLoader());  \n//创建代理对象  \nreturn enhancer.create();  </code></pre><p>  }  </p>\n<p>  /** </p>\n<ul>\n<li><p>回调方法:在代理实例上拦截并处理目标方法的调用，返回结果 </p>\n</li>\n<li></li>\n<li><p>@param proxy 代理类 </p>\n</li>\n<li><p>@param method 被代理的方法 </p>\n</li>\n<li><p>@param params 该方法的参数数组 </p>\n</li>\n<li><p>@param methodProxy </p>\n</li>\n<li><p>/<br>@Override<br>public Object intercept(Object proxy, Method method, Object[] params,  </p>\n<pre><code>MethodProxy methodProxy) throws Throwable {  </code></pre><p>  Object result = null;<br>  // 调用之前<br>  doBefore();<br>  // 调用目标方法，用methodProxy,<br>  // 而不是原始的method，以提高性能<br>  result = methodProxy.invokeSuper(proxy, params);<br>  // 调用之后<br>  doAfter();<br>  return result;<br>}  </p>\n<p>private void doBefore() {<br>  System.out.println(“before method invoke”);<br>}  </p>\n<p>private void doAfter() {<br>  System.out.println(“after method invoke”);<br>}<br>}  </p>\n</li>\n</ul>\n</li>\n</ul>\n<p>public class TestCglib {  </p>\n<pre><code>public static void main(String[] args) {  \n    CglibProxy cglibProxy = new CglibProxy();  \n    HelloWorld hw = (HelloWorld) cglibProxy.createProxy(new HelloWorld());  \n    hw.sayHelloWorld();  \n}  </code></pre><p>}<br>　　输出结果：<br>[plain] view plain copy<br>before method invoke<br>HelloWorld!<br>after method invoke<br>　　基本流程：需要自己写代理类，它实现MethodInterceptor接口，有一个intercept()回调方法用于拦截对目标方法的调用，里面使用methodProxy来调用目标方法。创建代理对象要用Enhance类，用它设置好代理的目标类、有intercept()回调的代理类实例、最后用create()创建并返回代理实例。<br>　　3、使用CallbackFilter在方法层设置回调<br>　　net.sf.cglib.proxy.CallbackFilter允许我们在方法层设置回调（callback）。假如你有一个PersistenceServiceImpl类，它有两个方法：save和load，其中方法save需要权限检查，而方法load不需要权限检查。<br>[java] view plain copy<br>import com.lizjason.cglibproxy.PersistenceService;<br>import java.lang.reflect.Method;<br>import net.sf.cglib.proxy.CallbackFilter;  </p>\n<p>/** </p>\n<ul>\n<li><p>A simple implementation of PersistenceService interface </p>\n</li>\n<li><p>/<br>class PersistenceServiceImpl implements PersistenceService {  </p>\n<p>  //需要权限检查<br>  public void save(long id, String data) {  </p>\n<pre><code>System.out.println(data + &quot; has been saved successfully.&quot;);  </code></pre><p>  }  </p>\n<p>  //不需要权限检查<br>  public String load(long id) {  </p>\n<pre><code>return &quot;Test CGLIB CallBackFilter&quot;;  </code></pre><p>  }<br>}  </p>\n</li>\n</ul>\n<p>/** </p>\n<ul>\n<li><p>An implementation of CallbackFilter for PersistenceServiceImpl </p>\n</li>\n<li><p>/<br>public class PersistenceServiceCallbackFilter implements CallbackFilter {<br>  //callback index for save method<br>  private static final int SAVE = 0;<br>  //callback index for load method<br>  private static final int LOAD = 1;  </p>\n<p>  /** </p>\n<ul>\n<li>Specify which callback to use for the method being invoked.  </li>\n<li>@param method the method being invoked. </li>\n<li>@return  </li>\n<li>/<br>@Override<br>public int accept(Method method) {<br>  //指定各方法的代理回调索引<br>  String name = method.getName();<br>  if (“save”.equals(name)) {  <pre><code>return SAVE;  </code></pre>  }<br>  // for other methods, including the load method, use the<br>  // second callback<br>  return LOAD;<br>}<br>}<br>　　accept方法中对代理方法和回调进行了匹配，返回的值是某方法在回调数组中的索引。下面是PersistenceServiceImpl类代理的实现。<br>[java] view plain copy<br>…<br>Enhancer enhancer = new Enhancer();<br>enhancer.setSuperclass(PersistenceServiceImpl.class);<br>//设置回调过滤器<br>CallbackFilter callbackFilter = new PersistenceServiceCallbackFilter();<br>enhancer.setCallbackFilter(callbackFilter);<br>//创建各个目标方法的代理回调<br>AuthorizationService authorizationService = …<br>Callback saveCallback = new AuthorizationInterceptor(authorizationService);<br>Callback loadCallback = NoOp.INSTANCE;<br>//顺序要与指定的回调索引一致<br>Callback[] callbacks = new Callback[]{saveCallback, loadCallback };<br>enhancer.setCallbacks(callbacks);  //设置回调<br>…<br>return (PersistenceServiceImpl)enhancer.create();  //创建代理对象<br>　　在这个例子中save方法使用了AuthorizationInterceptor实例，load方法使用了NoOp实例。此外，你也可以通过net.sf.cglib.proxy.Enhancer.setInterfaces(Class[])方法指定代理对象所实现的接口。<br>　　除了为net.sf.cglib.proxy.Enhancer指定回调数组，你还可以通过net.sf.cglib.proxy.Enhancer.setCallbackTypes(Class[]) 方法指定回调类型数组。当创建代理时，如果你没有回调实例的数组，就可以使用回调类型。象使用回调一样，你必须使用net.sf.cglib.proxy.CallbackFilter为每一个方法指定一个回调类型索引。<br>　　4、使用Mixin<br>　　Mixin通过代理方式将多种类型的对象绑定到一个大对象上，这样对各个目标类型中的方法调用可以直接在这个大对象上进行。下面是一个例子。</li>\n</ul>\n</li>\n</ul>\n<p>[java] view plain copy<br>import net.sf.cglib.proxy.Mixin;  </p>\n<p>interface MyInterfaceA {  </p>\n<pre><code>public void methodA();  </code></pre><p>}  </p>\n<p>interface MyInterfaceB {  </p>\n<pre><code>public void methodB();  </code></pre><p>}  </p>\n<p>class MyInterfaceAImpl implements MyInterfaceA {  </p>\n<pre><code>@Override  \npublic void methodA() {  \n    System.out.println(&quot;MyInterfaceAImpl.methodA()&quot;);  \n}  </code></pre><p>}  </p>\n<p>class MyInterfaceBImpl implements MyInterfaceB {  </p>\n<pre><code>@Override  \npublic void methodB() {  \n    System.out.println(&quot;MyInterfaceBImpl.methodB()&quot;);  \n}  </code></pre><p>}  </p>\n<p>public class Main {  </p>\n<pre><code>public static void main(String[] args) {  \n    //各个对象对应的类型  \n    Class[] interfaces = new Class[]{MyInterfaceA.class, MyInterfaceB.class};  \n    //各个对象  \n    Object[] delegates = new Object[]{new MyInterfaceAImpl(), new MyInterfaceBImpl()};  \n    //将多个对象绑定到一个大对象上  \n    Object obj = Mixin.create(interfaces, delegates);  \n    //直接在大对象上调用各个目标方法  \n    ((MyInterfaceA)obj).methodA();  \n    ((MyInterfaceB)obj).methodB();  \n}  </code></pre><p>}  </p>\n<p>动态生成Bean</p>\n<p>　　我们知道，Java Bean包含一组属性字段，用这些属性来存储和获取值。通过指定一组属性名和属性值的类型，我们可以使用Cglib的BeanGenerator和BeanMap来动态生成Bean。下面是一个例子。<br>[java] view plain copy<br>import java.lang.reflect.Method;<br>import java.util.HashMap;<br>import java.util.Iterator;<br>import java.util.Map;<br>import java.util.Set;<br>import net.sf.cglib.beans.BeanGenerator;<br>import net.sf.cglib.beans.BeanMap;  </p>\n<p>/** </p>\n<ul>\n<li><p>动态实体bean </p>\n</li>\n<li></li>\n<li><p>@author cuiran </p>\n</li>\n<li><p>@version 1.0 </p>\n</li>\n<li><p>/<br>class CglibBean {  </p>\n<p>  //Bean实体Object<br>  public Object object = null;<br>  //属性map<br>  public BeanMap beanMap = null;  </p>\n<p>  public CglibBean() {  </p>\n<pre><code>super();  </code></pre><p>  }  </p>\n<p>  @SuppressWarnings(“unchecked”)<br>  public CglibBean(Map&lt;String, Class&gt; propertyMap) {  </p>\n<pre><code>//用一组属性生成实体Bean  \nthis.object = generateBean(propertyMap);  \n//用实体Bean创建BeanMap，以便可以设置和获取Bean属性的值  \nthis.beanMap = BeanMap.create(this.object);  </code></pre><p>  }  </p>\n<p>  /** </p>\n<ul>\n<li><p>给bean中的属性赋值 </p>\n</li>\n<li></li>\n<li><p>@param property 属性名 </p>\n</li>\n<li><p>@param value 值 </p>\n</li>\n<li><p>/<br>public void setValue(String property, Object value) {<br>  beanMap.put(property, value);<br>}  </p>\n<p>/** </p>\n</li>\n<li><p>获取bean中属性的值 </p>\n</li>\n<li></li>\n<li><p>@param property 属性名 </p>\n</li>\n<li><p>@return 值 </p>\n</li>\n<li><p>/<br>public Object getValue(String property) {<br>  return beanMap.get(property);<br>}  </p>\n<p>/** </p>\n</li>\n<li><p>得到该实体bean对象 </p>\n</li>\n<li></li>\n<li><p>@return </p>\n</li>\n<li><p>/<br>public Object getObject() {<br>  return this.object;<br>}  </p>\n<p>@SuppressWarnings(“unchecked”)<br>private Object generateBean(Map&lt;String, Class&gt; propertyMap) {<br>  //根据一组属性名和属性值的类型，动态创建Bean对象<br>  BeanGenerator generator = new BeanGenerator();<br>  Set keySet = propertyMap.keySet();<br>  for (Iterator i = keySet.iterator(); i.hasNext();) {  </p>\n<pre><code>String key = (String) i.next();  \ngenerator.addProperty(key, (Class) propertyMap.get(key));  </code></pre><p>  }<br>  return generator.create();  //创建Bean<br>}<br>}  </p>\n</li>\n</ul>\n</li>\n</ul>\n<p>/** </p>\n<ul>\n<li><p>Cglib测试类 </p>\n</li>\n<li></li>\n<li><p>@author cuiran </p>\n</li>\n<li><p>@version 1.0 </p>\n</li>\n<li><p>/<br>public class CglibTest {  </p>\n<p>  @SuppressWarnings(“unchecked”)<br>  public static void main(String[] args) throws ClassNotFoundException { // 设置类成员属性  </p>\n<pre><code>HashMap&lt;String, Class&gt; propertyMap = new HashMap&lt;&gt;();  \npropertyMap.put(&quot;id&quot;, Class.forName(&quot;java.lang.Integer&quot;));  \npropertyMap.put(&quot;name&quot;, Class.forName(&quot;java.lang.String&quot;));  \npropertyMap.put(&quot;address&quot;, Class.forName(&quot;java.lang.String&quot;)); // 生成动态Bean  \nCglibBean bean = new CglibBean(propertyMap);  \n// 给Bean设置值  \nbean.setValue(&quot;id&quot;, 123);  //Auto-boxing  \nbean.setValue(&quot;name&quot;, &quot;454&quot;);  \nbean.setValue(&quot;address&quot;, &quot;789&quot;);  \n// 从Bean中获取值，当然获得值的类型是Object  \nSystem.out.println(&quot; &gt;&gt; id = &quot; + bean.getValue(&quot;id&quot;));  \nSystem.out.println(&quot; &gt;&gt; name = &quot; + bean.getValue(&quot;name&quot;));  \nSystem.out.println(&quot; &gt;&gt; address = &quot; + bean.getValue(&quot;address&quot;));  \n// 获得bean的实体  \nObject object = bean.getObject();  \n// 通过反射查看所有方法名  \nClass clazz = object.getClass();  \nMethod[] methods = clazz.getDeclaredMethods();  \nfor (Method curMethod : methods) {  \n    System.out.println(curMethod.getName());  \n}  </code></pre><p>  }<br>}<br>　　输出结果：<br>[java] view plain copy</p>\n<blockquote>\n<blockquote>\n<p>id = 123<br>name = 454<br>address = 789<br>getAddress<br>getName<br>getId<br>setName<br>setId<br>setAddress  </p>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<p>CGLIB轻松实现延迟加载</p>\n<p>　　通过使用LazyLoader，可以实现延迟加载，即在没有访问对象的字段或方法之前并不加载对象，只有当要访问对象的字段或方法时才进行加载。下面是一个例子。<br>[java] view plain copy<br>import net.sf.cglib.proxy.Enhancer;<br>import net.sf.cglib.proxy.LazyLoader;  </p>\n<p>class TestBean {<br>    private String userName;  </p>\n<pre><code>/** \n * @return the userName \n */  \npublic String getUserName() {  \n    return userName;  \n}  \n\n/** \n * @param userName the userName to set \n */  \npublic void setUserName(String userName) {  \n    this.userName = userName;  \n}  </code></pre><p>}  </p>\n<p>//延迟加载代理类<br>class LazyProxy implements LazyLoader {  </p>\n<pre><code>//拦截Bean的加载，本方法会延迟处理  \n@Override  \npublic Object loadObject() throws Exception {  \n    System.out.println(&quot;开始延迟加载!&quot;);  \n    TestBean bean = new TestBean(); //创建实体Bean  \n    bean.setUserName(&quot;test&quot;);  //给一个属性赋值  \n    return bean;  //返回Bean  \n}  </code></pre><p>}  </p>\n<p>public class BeanTest {  </p>\n<pre><code>public static void main(String[] args) {  \n    //创建Bean类型的延迟加载代理实例  \n    TestBean bean = (TestBean) Enhancer.create(TestBean.class, new LazyProxy());  \n    System.out.println(&quot;------&quot;);  \n    System.out.println(bean.getUserName());  \n}  </code></pre><p>}<br>　　输出结果：<br>[java] view plain copy</p>\n<hr>\n<p>开始延迟加载!<br>test<br>　　我们创建TestBean类的延迟代理，通过LazyLoader中的loadObject()方法的拦截，实现对TestBean类的对象进行延迟加载。从输出可以看出，当创建延迟代理时，并没有立刻加载目标对象（因为还有输出“开始延迟加载!”），当通过代理访问目标对象的getUserName()方法时，就会加载目标对象。可见loadObject()是延迟执行的。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Apr 25 2018 20:46:59 GMT+0800 (GMT+08:00)","title":"Java动态代理与Cglib库","path":"2017/03/22/Java动态代理与Cglib库/","eyeCatchImage":null,"excerpt":null,"date":"2017-03-22T10:20:58.000Z","pv":0,"totalPV":0,"categories":"Essay","tags":["Java"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":15924},{"title":"MYSQL建表规约","date":"2017-04-08T10:05:29.000Z","_content":"\n【强制】表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint（ 1 表示是，0 表示否），此规则同样适用于 odps 建表。\n说明：任何字段如果为非负数，必须是 unsigned。\n举例：`is_star` tinyint unsigned DEFAULT NULL COMMENT '项目状态（1 表示是，0 表示否）'\n***\n【强制】表名、字段名必须使用小写字母或数字；禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。\n正例：getter_admin，task_config，level3_name\n反例：GetterAdmin，taskConfig，level_3_name\n***\n【强制】表名不使用复数名词。\n说明：表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于 DO 类名也是单数形式，符合表达习惯。\n***\n【强制】禁用保留字，如 desc、range、match、delayed 等，参考官方保留字。\n***\n【强制】唯一索引名为 uk_字段名；普通索引名则为 idx_字段名。\n说明：uk_ 即 unique key；idx_ 即 index 的简称。\n***\n【强制】小数类型为 decimal，禁止使用 float 和 double。\n说明：float 和 double 在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不正确的结果。如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数分开存储。\n***\n【强制】如果存储的字符串长度几乎相等，使用 CHAR 定长字符串类型。\n***\n【强制】varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 TEXT，独立出来一张表，用主键来对应，避免影响其它字段索引效率。\n***\n【强制】表必备三字段：id, gmt_create, gmt_modified。\n说明：其中 id 必为主键，类型为 unsigned bigint、单表时自增、步长为 1； 分表时改为从TDDL Sequence 取值，确保分表之间的全局唯一。gmt_create, gmt_modified 的类型均为date_time 类型。\n***\n【推荐】表的命名最好是加上“业务名称_表的作用”，避免上云梯后，再与其它业务表关联时有混淆。\n正例：tiger_task / tiger_reader / mpp_config\n***\n【推荐】库名与应用名称尽量一致。\n***\n【推荐】如果修改字段含义或对字段表示的状态追加时，需要及时更新字段注释。\n***\n【推荐】字段允许适当冗余，以提高性能，但是必须考虑数据同步的情况。冗余字段应遵循：\n1）不是频繁修改的字段。\n2）不是 varchar 超长字段，更不能是 text 字段。\n正例：各业务线经常冗余存储商品名称，避免查询时需要调用 IC 服务获取。\n***\n【推荐】单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。\n说明：如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。\n反例：某业务三年总数据量才 2 万行，却分成 1024 张表，问：你为什么这么设计？答：分 1024张表，不是标配吗？\n【参考】合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速度。\n正例：人的年龄用 unsigned tinyint（表示范围 0-255，人的寿命不会超过 255 岁）；海龟就必须是 smallint，但如果是太阳的年龄，就必须是 int；如果是所有恒星的年龄都加起来，那么就必须使用 bigint。","source":"_posts/MYSQL建表规约.md","raw":"---\ntitle: MYSQL建表规约\ndate: 2017-04-08 18:05:29\ntags: Mysql\ncategories: Essay\n---\n\n【强制】表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint（ 1 表示是，0 表示否），此规则同样适用于 odps 建表。\n说明：任何字段如果为非负数，必须是 unsigned。\n举例：`is_star` tinyint unsigned DEFAULT NULL COMMENT '项目状态（1 表示是，0 表示否）'\n***\n【强制】表名、字段名必须使用小写字母或数字；禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。\n正例：getter_admin，task_config，level3_name\n反例：GetterAdmin，taskConfig，level_3_name\n***\n【强制】表名不使用复数名词。\n说明：表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于 DO 类名也是单数形式，符合表达习惯。\n***\n【强制】禁用保留字，如 desc、range、match、delayed 等，参考官方保留字。\n***\n【强制】唯一索引名为 uk_字段名；普通索引名则为 idx_字段名。\n说明：uk_ 即 unique key；idx_ 即 index 的简称。\n***\n【强制】小数类型为 decimal，禁止使用 float 和 double。\n说明：float 和 double 在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不正确的结果。如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数分开存储。\n***\n【强制】如果存储的字符串长度几乎相等，使用 CHAR 定长字符串类型。\n***\n【强制】varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 TEXT，独立出来一张表，用主键来对应，避免影响其它字段索引效率。\n***\n【强制】表必备三字段：id, gmt_create, gmt_modified。\n说明：其中 id 必为主键，类型为 unsigned bigint、单表时自增、步长为 1； 分表时改为从TDDL Sequence 取值，确保分表之间的全局唯一。gmt_create, gmt_modified 的类型均为date_time 类型。\n***\n【推荐】表的命名最好是加上“业务名称_表的作用”，避免上云梯后，再与其它业务表关联时有混淆。\n正例：tiger_task / tiger_reader / mpp_config\n***\n【推荐】库名与应用名称尽量一致。\n***\n【推荐】如果修改字段含义或对字段表示的状态追加时，需要及时更新字段注释。\n***\n【推荐】字段允许适当冗余，以提高性能，但是必须考虑数据同步的情况。冗余字段应遵循：\n1）不是频繁修改的字段。\n2）不是 varchar 超长字段，更不能是 text 字段。\n正例：各业务线经常冗余存储商品名称，避免查询时需要调用 IC 服务获取。\n***\n【推荐】单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。\n说明：如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。\n反例：某业务三年总数据量才 2 万行，却分成 1024 张表，问：你为什么这么设计？答：分 1024张表，不是标配吗？\n【参考】合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速度。\n正例：人的年龄用 unsigned tinyint（表示范围 0-255，人的寿命不会超过 255 岁）；海龟就必须是 smallint，但如果是太阳的年龄，就必须是 int；如果是所有恒星的年龄都加起来，那么就必须使用 bigint。","slug":"MYSQL建表规约","published":1,"updated":"2018-04-25T12:46:59.496Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2fj0npc000yq4vges2tdqzg","content":"<p>【强制】表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint（ 1 表示是，0 表示否），此规则同样适用于 odps 建表。<br>说明：任何字段如果为非负数，必须是 unsigned。<br>举例：<code>is_star</code> tinyint unsigned DEFAULT NULL COMMENT ‘项目状态（1 表示是，0 表示否）’</p><a id=\"more\"></a>\n<hr>\n<p>【强制】表名、字段名必须使用小写字母或数字；禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。<br>正例：getter_admin，task_config，level3_name<br>反例：GetterAdmin，taskConfig，level_3_name</p>\n<hr>\n<p>【强制】表名不使用复数名词。<br>说明：表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于 DO 类名也是单数形式，符合表达习惯。</p>\n<hr>\n<p>【强制】禁用保留字，如 desc、range、match、delayed 等，参考官方保留字。</p>\n<hr>\n<p>【强制】唯一索引名为 uk_字段名；普通索引名则为 idx_字段名。<br>说明：uk_ 即 unique key；idx_ 即 index 的简称。</p>\n<hr>\n<p>【强制】小数类型为 decimal，禁止使用 float 和 double。<br>说明：float 和 double 在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不正确的结果。如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数分开存储。</p>\n<hr>\n<p>【强制】如果存储的字符串长度几乎相等，使用 CHAR 定长字符串类型。</p>\n<hr>\n<p>【强制】varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 TEXT，独立出来一张表，用主键来对应，避免影响其它字段索引效率。</p>\n<hr>\n<p>【强制】表必备三字段：id, gmt_create, gmt_modified。<br>说明：其中 id 必为主键，类型为 unsigned bigint、单表时自增、步长为 1； 分表时改为从TDDL Sequence 取值，确保分表之间的全局唯一。gmt_create, gmt_modified 的类型均为date_time 类型。</p>\n<hr>\n<p>【推荐】表的命名最好是加上“业务名称_表的作用”，避免上云梯后，再与其它业务表关联时有混淆。<br>正例：tiger_task / tiger_reader / mpp_config</p>\n<hr>\n<p>【推荐】库名与应用名称尽量一致。</p>\n<hr>\n<p>【推荐】如果修改字段含义或对字段表示的状态追加时，需要及时更新字段注释。</p>\n<hr>\n<p>【推荐】字段允许适当冗余，以提高性能，但是必须考虑数据同步的情况。冗余字段应遵循：<br>1）不是频繁修改的字段。<br>2）不是 varchar 超长字段，更不能是 text 字段。<br>正例：各业务线经常冗余存储商品名称，避免查询时需要调用 IC 服务获取。</p>\n<hr>\n<p>【推荐】单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。<br>说明：如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。<br>反例：某业务三年总数据量才 2 万行，却分成 1024 张表，问：你为什么这么设计？答：分 1024张表，不是标配吗？<br>【参考】合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速度。<br>正例：人的年龄用 unsigned tinyint（表示范围 0-255，人的寿命不会超过 255 岁）；海龟就必须是 smallint，但如果是太阳的年龄，就必须是 int；如果是所有恒星的年龄都加起来，那么就必须使用 bigint。</p>\n","site":{"data":{}},"excerpt":"<p>【强制】表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint（ 1 表示是，0 表示否），此规则同样适用于 odps 建表。<br>说明：任何字段如果为非负数，必须是 unsigned。<br>举例：<code>is_star</code> tinyint unsigned DEFAULT NULL COMMENT ‘项目状态（1 表示是，0 表示否）’</p>","more":"\n<hr>\n<p>【强制】表名、字段名必须使用小写字母或数字；禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。<br>正例：getter_admin，task_config，level3_name<br>反例：GetterAdmin，taskConfig，level_3_name</p>\n<hr>\n<p>【强制】表名不使用复数名词。<br>说明：表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于 DO 类名也是单数形式，符合表达习惯。</p>\n<hr>\n<p>【强制】禁用保留字，如 desc、range、match、delayed 等，参考官方保留字。</p>\n<hr>\n<p>【强制】唯一索引名为 uk_字段名；普通索引名则为 idx_字段名。<br>说明：uk_ 即 unique key；idx_ 即 index 的简称。</p>\n<hr>\n<p>【强制】小数类型为 decimal，禁止使用 float 和 double。<br>说明：float 和 double 在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不正确的结果。如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数分开存储。</p>\n<hr>\n<p>【强制】如果存储的字符串长度几乎相等，使用 CHAR 定长字符串类型。</p>\n<hr>\n<p>【强制】varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 TEXT，独立出来一张表，用主键来对应，避免影响其它字段索引效率。</p>\n<hr>\n<p>【强制】表必备三字段：id, gmt_create, gmt_modified。<br>说明：其中 id 必为主键，类型为 unsigned bigint、单表时自增、步长为 1； 分表时改为从TDDL Sequence 取值，确保分表之间的全局唯一。gmt_create, gmt_modified 的类型均为date_time 类型。</p>\n<hr>\n<p>【推荐】表的命名最好是加上“业务名称_表的作用”，避免上云梯后，再与其它业务表关联时有混淆。<br>正例：tiger_task / tiger_reader / mpp_config</p>\n<hr>\n<p>【推荐】库名与应用名称尽量一致。</p>\n<hr>\n<p>【推荐】如果修改字段含义或对字段表示的状态追加时，需要及时更新字段注释。</p>\n<hr>\n<p>【推荐】字段允许适当冗余，以提高性能，但是必须考虑数据同步的情况。冗余字段应遵循：<br>1）不是频繁修改的字段。<br>2）不是 varchar 超长字段，更不能是 text 字段。<br>正例：各业务线经常冗余存储商品名称，避免查询时需要调用 IC 服务获取。</p>\n<hr>\n<p>【推荐】单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。<br>说明：如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。<br>反例：某业务三年总数据量才 2 万行，却分成 1024 张表，问：你为什么这么设计？答：分 1024张表，不是标配吗？<br>【参考】合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速度。<br>正例：人的年龄用 unsigned tinyint（表示范围 0-255，人的寿命不会超过 255 岁）；海龟就必须是 smallint，但如果是太阳的年龄，就必须是 int；如果是所有恒星的年龄都加起来，那么就必须使用 bigint。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Apr 25 2018 20:46:59 GMT+0800 (GMT+08:00)","title":"MYSQL建表规约","path":"2017/04/08/MYSQL建表规约/","eyeCatchImage":null,"excerpt":null,"date":"2017-04-08T10:05:29.000Z","pv":0,"totalPV":0,"categories":"Essay","tags":["Mysql"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1429},{"title":"MySQL常见性能优化","date":"2017-04-11T14:03:36.000Z","_content":"# 优化Group By语句\n\n默认情况下，MySQL 排序所有GROUP BY col1，col2，....。查询的方法如同在查询中指定ORDER BY col1，col2，...。如果显式包括一个包含相同的列的ORDER BY子句，MySQL 可以毫不减速地对它进行优化，尽管仍然进行排序。如果查询包括GROUP BY 但你想要避免排序结果的消耗，你可以指定ORDER BY NULL禁止排序。\n\n# 优化Order by语句\n\n在某些情况中，MySQL 可以使用一个索引来满足ORDER BY 子句，而不需要额外的排序。where 条件和order by 使用相同的索引，并且order by 的顺序和索引顺序相同，并且order by 的字段都是升序或者都是降序。\n\n# 优化insert语句\n\n如果你同时从同一客户插入很多行，使用多个值表的INSERT 语句。这比使用分开 INSERT 语句快(在一些情况中几倍)。\n\n```sql\nmysql> insert into test values(1,2),(1,3),(1,4)…\n```\n\n如果你从不同客户插入很多行，能通过使用INSERT DELAYED 语句得到更高的速度。Delayed 的含义是让insert 语句马上执行，其实数据都被放在内存的队列中，并没有真正的写入磁盘；这比每条语句都分别插入要快的多；LOW_PRIORITY刚好相反，在所有其他用户对表的读写完成后才进行插入。\n将索引文件和数据文件分在不同的磁盘上存放（利用建表中的选项）；\n如果进行批量插入，可以增加bulk_insert_buffer_size 变量值的方法来提高速度，但是，这只能对myisam表使用\n当从一个文本文件装载一个表时，使用LOAD DATA INFILE。这通常比使用很多INSERT语句快20倍；\n根据应用情况使用replace 语句代替insert；\n根据应用情况使用ignore 关键字忽略重复记录。\n\n# 大批量插入数据\n\n1. 对于Myisam 类型的表，可以通过以下方式快速的导入大量的数据。\nALTER TABLE tblname DISABLE KEYS;\n这两个命令用来打开或者关闭Myisam 表非唯一索引的更新。在导入大量的数据到一个非空的Myisam 表时，通过设置这两个命令，可以提高导入的效率。对于导入大量数据到一个空的Myisam 表，默认就是先导入数据然后才创建索引的，所以不用进行设置。\n2. 而对于Innodb 类型的表，这种方式并不能提高导入数据的效率。对于Innodb 类型的表，我们有以下几种方式可以提高导入的效率：\na. 因为Innodb 类型的表是按照主键的顺序保存的，所以将导入的数据按照主键的顺序排列，可以有效的提高导入数据的效率。如果Innodb 表没有主键，那么系统会默认创建一个内部列作为主键，所以如果可以给表创建一个主键，将可以利用这个优势提高导入数据的效率。\nb. 在导入数据前执行SET UNIQUE_CHECKS=0，关闭唯一性校验，在导入结束后执行SETUNIQUE_CHECKS=1，恢复唯一性校验，可以提高导入的效率。\nc. 如果应用使用自动提交的方式，建议在导入前执行SET AUTOCOMMIT=0，关闭自动提交，导入结束后再执行SET AUTOCOMMIT=1，打开自动提交，也可以提高导入的效率。\n\n# 查询的优化\n\n读为主可以设置low_priority_updates=1，写的优先级调低，告诉MYSQL尽量先处理读求\n为查询缓存优化你的查询\n大多数的MySQL服务器都开启了查询缓存。这是提高性最有效的方法之一，而且这是被MySQL的数据库引擎处理的。当有很多相同的查询被执行了多次的时候，这些查询结果会被放到一个缓存中，这样，后续的相同的查询就不用操作表而直接访问缓存结果了。\n这里最主要的问题是，对于程序员来说，这个事情是很容易被忽略的。因为，我们某些查询语句会让MySQL不使用缓存。请看下面的示例：\n// 查询缓存不开启\n\n# 拆分大的 DELETE 或 INSERT 语句\n\n如果你需要在一个在线的网站上去执行一个大的 DELETE 或 INSERT 查询，你需要非常小心，要避免你的操作让你的整个网站停止相应。因为这两个操作是会锁表的，表一锁住了，别的操作都进不来了。\nApache 会有很多的子进程或线程。所以，其工作起来相当有效率，而我们的服务器也不希望有太多的子进程，线程和数据库链接，这是极大的占服务器资源的事情，尤其是内存。\n如果你把你的表锁上一段时间，比如30秒钟，那么对于一个有很高访问量的站点来说，这30秒所积累的访问进程/线程，数据库链接，打开的文件数，可能不仅仅会让你泊WEB服务Crash，还可能会让你的整台服务器马上掛了。\n所以，如果你有一个大的处理，你定你一定把其拆分，使用 LIMIT 条件是一个好的方法。\n\n# where语句的优化\n\n1. 尽量避免在 where 子句中对字段进行表达式操作\n\n```sql\nselect id from uinfo_jifen where jifen/60 > 10000;\n```\n\n优化后:\n\n```sql\nSelect id from uinfo_jifen where jifen>600000;\n```\n\n2. 应尽量避免在where子句中对字段进行函数操作，这将导致mysql放弃使用索引\n\n```sql\nselect uid from imid where datediff(create_time,'2011-11-22')=0\n```\n\n优化后:\n\n```sql\nselect uid from imid where create_time> ='2011-11-21‘ and create_time<‘2011-11-23’;\n```\n\n# 索引的优化\n\nMySQL只有对以下操作符才使用索引：<，<=，=，>，>=，BETWEEN，IN，以及某些时候的LIKE。\n尽量不要写!=或者<>的sql，用between或> and <代替，否则可能用不到索引\nOrder by 、Group by 、Distinct 最好在需要这个列上建立索引，利于索引排序\n尽量利用mysql索引排序\n没办法的情况下，使用强制索引Force index(index_name)\n尽量避勉innodb用非常大尺寸的字段作为主键\n较频繁的作为查询条件的字段应该创建索引;\n选择性高的字段比较适合创建索引;\n作为表关联字段一般都需要创索引.\n更新非常频繁的字段不适合创建索引;\n不会出现在 WHERE 子句中的字段不该创建索引.\n选择性太低的字段不适合单独创建索引\n\n# 尽量不要用子查询\n\n```sql\nmysql> explain select uid_,count(*) from smember_6 where uid_ in (select uid_ from alluid) group by uid_;\n--| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |+----+--------------------+-----------+-------+---------------+---------+---------+------+----------+--------------------------+| 1 | PRIMARY | smember_6 | index | NULL | PRIMARY | 8 | NULL | 53431264 | Using where; Using index | | 2 | DEPENDENT SUBQUERY | alluid | ALL | NULL | NULL | NULL | NULL | 2448 | Using where |\n```\n\n优化后:\n\n```sql\nmysql> explain select a.uid_,count(*) from smember_6 a,alluid b where a.uid_=b.uid_ group by uid_;\n--| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |+----+-------------+-------+------+---------------+---------+---------+------------+------+---------------------------------+| 1 | SIMPLE | b | ALL | NULL | NULL | NULL | NULL | 2671 | Using temporary; Using filesort | | 1 | SIMPLE | a | ref | PRIMARY | PRIMARY | 4 | ssc.b.uid_ | 1 | Using index\n```\n\n# Join的优化\n\n如果你的应用程序有很多 JOIN 查询，你应该确认两个表中Join的字段是被建过索引的。这样，MySQL内部会启动为你优化Join的SQL语句的机制。\n而且，这些被用来Join的字段，应该是相同的类型的。例如：如果你要把 DECIMAL 字段和一个 INT 字段Join在一起，MySQL就无法使用它们的索引。对于那些STRING类型，还需要有相同的字符集才行。（两个表的字符集有可能不一样）\n\n# 表的优化\n\n## 尽可能的使用 NOT NULL\n\n除非你有一个很特别的原因去使用 NULL 值，你应该总是让你的字段保持 NOT NULL。\n不要以为 NULL 不需要空间，其需要额外的空间，并且，在你进行比较的时候，你的程序会更复杂。\n当然，这里并不是说你就不能使用NULL了，现实情况是很复杂的，依然会有些情况下，你需要使用NULL值。\n下面摘自MySQL自己的文档：\n“NULL columns require additional space in the row to record whether their values are NULL. For MyISAM tables, each NULL column takes one bit extra, rounded up to the nearest byte.”\n\n## 固定长度的表会更快\n\n如果表中的所有字段都是“固定长度”的，整个表会被认为是 “static” 或 “fixed-length”。 例如，表中没有如下类型的字段： VARCHAR，TEXT，BLOB。只要你包括了其中一个这些字段，那么这个表就不是“固定长度静态表”了，这样，MySQL 引擎会用另一种方法来处理。\n固定长度的表会提高性能，因为MySQL搜寻得会更快一些，因为这些固定的长度是很容易计算下一个数据的偏移量的，所以读取的自然也会很快。而如果字段不是定长的，那么，每一次要找下一条的话，需要程序找到主键。\n并且，固定长度的表也更容易被缓存和重建。不过，唯一的副作用是，固定长度的字段会浪费一些空间，因为定长的字段无论你用不用，他都是要分配那么多的空间。\n\n## 垂直分割\n\"垂直分割\"是一种把数据库中的表按列变成几张表的方法，这样可以降低表的复杂度和字段的数目，从而达到优化的目的。（以前，在银行做过项目，见过一张表有100多个字段，很恐怖）\n示例一：在Users表中有一个字段是家庭地址，这个字段是可选字段，相比起，而且你在数据库操作的时候除了个人信息外，你并不需要经常读取或是改写这个字段。那么，为什么不把他放到另外一张表中呢？ 这样会让你的表有更好的性能，大家想想是不是，大量的时候，我对于用户表来说，只有用户ID，用户名，口令，用户角色等会被经常使用。小一点的表总是会有好的性能。\n示例二： 你有一个叫 “last_login” 的字段，它会在每次用户登录时被更新。但是，每次更新时会导致该表的查询缓存被清空。所以，你可以把这个字段放到另一个表中，这样就不会影响你对用户ID，用户名，用户角色的不停地读取了，因为查询缓存会帮你增加很多性能。\n另外，你需要注意的是，这些被分出去的字段所形成的表，你不会经常性地去Join他们，不然的话，这样的性能会比不分割时还要差，而且，会是极数级的下降。\n\n## 越小的列会越快\n\n对于大多数的数据库引擎来说，硬盘操作可能是最重大的瓶颈。所以，把你的数据变得紧凑会对这种情况非常有帮助，因为这减少了对硬盘的访问。\n参看 MySQL 的文档 Storage Requirements 查看所有的数据类型。\n如果一个表只会有几列罢了（比如说字典表，配置表），那么，我们就没有理由使用 INT 来做主键，使用 MEDIUMINT, SMALLINT 或是更小的 TINYINT 会更经济一些。如果你不需要记录时间，使用 DATE 要比 DATETIME 好得多。\n当然，你也需要留够足够的扩展空间，不然，你日后来干这个事，你会死的很难看，参看Slashdot的例子（2009年11月06日），一个简单的ALTER TABLE语句花了3个多小时，因为里面有一千六百万条数据。\n","source":"_posts/MySQL常见性能优化.md","raw":"---\ntitle: MySQL常见性能优化\ndate: 2017-04-11 22:03:36\ntags: Mysql\ncategories: Essay\n---\n# 优化Group By语句\n\n默认情况下，MySQL 排序所有GROUP BY col1，col2，....。查询的方法如同在查询中指定ORDER BY col1，col2，...。如果显式包括一个包含相同的列的ORDER BY子句，MySQL 可以毫不减速地对它进行优化，尽管仍然进行排序。如果查询包括GROUP BY 但你想要避免排序结果的消耗，你可以指定ORDER BY NULL禁止排序。\n\n# 优化Order by语句\n\n在某些情况中，MySQL 可以使用一个索引来满足ORDER BY 子句，而不需要额外的排序。where 条件和order by 使用相同的索引，并且order by 的顺序和索引顺序相同，并且order by 的字段都是升序或者都是降序。\n\n# 优化insert语句\n\n如果你同时从同一客户插入很多行，使用多个值表的INSERT 语句。这比使用分开 INSERT 语句快(在一些情况中几倍)。\n\n```sql\nmysql> insert into test values(1,2),(1,3),(1,4)…\n```\n\n如果你从不同客户插入很多行，能通过使用INSERT DELAYED 语句得到更高的速度。Delayed 的含义是让insert 语句马上执行，其实数据都被放在内存的队列中，并没有真正的写入磁盘；这比每条语句都分别插入要快的多；LOW_PRIORITY刚好相反，在所有其他用户对表的读写完成后才进行插入。\n将索引文件和数据文件分在不同的磁盘上存放（利用建表中的选项）；\n如果进行批量插入，可以增加bulk_insert_buffer_size 变量值的方法来提高速度，但是，这只能对myisam表使用\n当从一个文本文件装载一个表时，使用LOAD DATA INFILE。这通常比使用很多INSERT语句快20倍；\n根据应用情况使用replace 语句代替insert；\n根据应用情况使用ignore 关键字忽略重复记录。\n\n# 大批量插入数据\n\n1. 对于Myisam 类型的表，可以通过以下方式快速的导入大量的数据。\nALTER TABLE tblname DISABLE KEYS;\n这两个命令用来打开或者关闭Myisam 表非唯一索引的更新。在导入大量的数据到一个非空的Myisam 表时，通过设置这两个命令，可以提高导入的效率。对于导入大量数据到一个空的Myisam 表，默认就是先导入数据然后才创建索引的，所以不用进行设置。\n2. 而对于Innodb 类型的表，这种方式并不能提高导入数据的效率。对于Innodb 类型的表，我们有以下几种方式可以提高导入的效率：\na. 因为Innodb 类型的表是按照主键的顺序保存的，所以将导入的数据按照主键的顺序排列，可以有效的提高导入数据的效率。如果Innodb 表没有主键，那么系统会默认创建一个内部列作为主键，所以如果可以给表创建一个主键，将可以利用这个优势提高导入数据的效率。\nb. 在导入数据前执行SET UNIQUE_CHECKS=0，关闭唯一性校验，在导入结束后执行SETUNIQUE_CHECKS=1，恢复唯一性校验，可以提高导入的效率。\nc. 如果应用使用自动提交的方式，建议在导入前执行SET AUTOCOMMIT=0，关闭自动提交，导入结束后再执行SET AUTOCOMMIT=1，打开自动提交，也可以提高导入的效率。\n\n# 查询的优化\n\n读为主可以设置low_priority_updates=1，写的优先级调低，告诉MYSQL尽量先处理读求\n为查询缓存优化你的查询\n大多数的MySQL服务器都开启了查询缓存。这是提高性最有效的方法之一，而且这是被MySQL的数据库引擎处理的。当有很多相同的查询被执行了多次的时候，这些查询结果会被放到一个缓存中，这样，后续的相同的查询就不用操作表而直接访问缓存结果了。\n这里最主要的问题是，对于程序员来说，这个事情是很容易被忽略的。因为，我们某些查询语句会让MySQL不使用缓存。请看下面的示例：\n// 查询缓存不开启\n\n# 拆分大的 DELETE 或 INSERT 语句\n\n如果你需要在一个在线的网站上去执行一个大的 DELETE 或 INSERT 查询，你需要非常小心，要避免你的操作让你的整个网站停止相应。因为这两个操作是会锁表的，表一锁住了，别的操作都进不来了。\nApache 会有很多的子进程或线程。所以，其工作起来相当有效率，而我们的服务器也不希望有太多的子进程，线程和数据库链接，这是极大的占服务器资源的事情，尤其是内存。\n如果你把你的表锁上一段时间，比如30秒钟，那么对于一个有很高访问量的站点来说，这30秒所积累的访问进程/线程，数据库链接，打开的文件数，可能不仅仅会让你泊WEB服务Crash，还可能会让你的整台服务器马上掛了。\n所以，如果你有一个大的处理，你定你一定把其拆分，使用 LIMIT 条件是一个好的方法。\n\n# where语句的优化\n\n1. 尽量避免在 where 子句中对字段进行表达式操作\n\n```sql\nselect id from uinfo_jifen where jifen/60 > 10000;\n```\n\n优化后:\n\n```sql\nSelect id from uinfo_jifen where jifen>600000;\n```\n\n2. 应尽量避免在where子句中对字段进行函数操作，这将导致mysql放弃使用索引\n\n```sql\nselect uid from imid where datediff(create_time,'2011-11-22')=0\n```\n\n优化后:\n\n```sql\nselect uid from imid where create_time> ='2011-11-21‘ and create_time<‘2011-11-23’;\n```\n\n# 索引的优化\n\nMySQL只有对以下操作符才使用索引：<，<=，=，>，>=，BETWEEN，IN，以及某些时候的LIKE。\n尽量不要写!=或者<>的sql，用between或> and <代替，否则可能用不到索引\nOrder by 、Group by 、Distinct 最好在需要这个列上建立索引，利于索引排序\n尽量利用mysql索引排序\n没办法的情况下，使用强制索引Force index(index_name)\n尽量避勉innodb用非常大尺寸的字段作为主键\n较频繁的作为查询条件的字段应该创建索引;\n选择性高的字段比较适合创建索引;\n作为表关联字段一般都需要创索引.\n更新非常频繁的字段不适合创建索引;\n不会出现在 WHERE 子句中的字段不该创建索引.\n选择性太低的字段不适合单独创建索引\n\n# 尽量不要用子查询\n\n```sql\nmysql> explain select uid_,count(*) from smember_6 where uid_ in (select uid_ from alluid) group by uid_;\n--| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |+----+--------------------+-----------+-------+---------------+---------+---------+------+----------+--------------------------+| 1 | PRIMARY | smember_6 | index | NULL | PRIMARY | 8 | NULL | 53431264 | Using where; Using index | | 2 | DEPENDENT SUBQUERY | alluid | ALL | NULL | NULL | NULL | NULL | 2448 | Using where |\n```\n\n优化后:\n\n```sql\nmysql> explain select a.uid_,count(*) from smember_6 a,alluid b where a.uid_=b.uid_ group by uid_;\n--| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |+----+-------------+-------+------+---------------+---------+---------+------------+------+---------------------------------+| 1 | SIMPLE | b | ALL | NULL | NULL | NULL | NULL | 2671 | Using temporary; Using filesort | | 1 | SIMPLE | a | ref | PRIMARY | PRIMARY | 4 | ssc.b.uid_ | 1 | Using index\n```\n\n# Join的优化\n\n如果你的应用程序有很多 JOIN 查询，你应该确认两个表中Join的字段是被建过索引的。这样，MySQL内部会启动为你优化Join的SQL语句的机制。\n而且，这些被用来Join的字段，应该是相同的类型的。例如：如果你要把 DECIMAL 字段和一个 INT 字段Join在一起，MySQL就无法使用它们的索引。对于那些STRING类型，还需要有相同的字符集才行。（两个表的字符集有可能不一样）\n\n# 表的优化\n\n## 尽可能的使用 NOT NULL\n\n除非你有一个很特别的原因去使用 NULL 值，你应该总是让你的字段保持 NOT NULL。\n不要以为 NULL 不需要空间，其需要额外的空间，并且，在你进行比较的时候，你的程序会更复杂。\n当然，这里并不是说你就不能使用NULL了，现实情况是很复杂的，依然会有些情况下，你需要使用NULL值。\n下面摘自MySQL自己的文档：\n“NULL columns require additional space in the row to record whether their values are NULL. For MyISAM tables, each NULL column takes one bit extra, rounded up to the nearest byte.”\n\n## 固定长度的表会更快\n\n如果表中的所有字段都是“固定长度”的，整个表会被认为是 “static” 或 “fixed-length”。 例如，表中没有如下类型的字段： VARCHAR，TEXT，BLOB。只要你包括了其中一个这些字段，那么这个表就不是“固定长度静态表”了，这样，MySQL 引擎会用另一种方法来处理。\n固定长度的表会提高性能，因为MySQL搜寻得会更快一些，因为这些固定的长度是很容易计算下一个数据的偏移量的，所以读取的自然也会很快。而如果字段不是定长的，那么，每一次要找下一条的话，需要程序找到主键。\n并且，固定长度的表也更容易被缓存和重建。不过，唯一的副作用是，固定长度的字段会浪费一些空间，因为定长的字段无论你用不用，他都是要分配那么多的空间。\n\n## 垂直分割\n\"垂直分割\"是一种把数据库中的表按列变成几张表的方法，这样可以降低表的复杂度和字段的数目，从而达到优化的目的。（以前，在银行做过项目，见过一张表有100多个字段，很恐怖）\n示例一：在Users表中有一个字段是家庭地址，这个字段是可选字段，相比起，而且你在数据库操作的时候除了个人信息外，你并不需要经常读取或是改写这个字段。那么，为什么不把他放到另外一张表中呢？ 这样会让你的表有更好的性能，大家想想是不是，大量的时候，我对于用户表来说，只有用户ID，用户名，口令，用户角色等会被经常使用。小一点的表总是会有好的性能。\n示例二： 你有一个叫 “last_login” 的字段，它会在每次用户登录时被更新。但是，每次更新时会导致该表的查询缓存被清空。所以，你可以把这个字段放到另一个表中，这样就不会影响你对用户ID，用户名，用户角色的不停地读取了，因为查询缓存会帮你增加很多性能。\n另外，你需要注意的是，这些被分出去的字段所形成的表，你不会经常性地去Join他们，不然的话，这样的性能会比不分割时还要差，而且，会是极数级的下降。\n\n## 越小的列会越快\n\n对于大多数的数据库引擎来说，硬盘操作可能是最重大的瓶颈。所以，把你的数据变得紧凑会对这种情况非常有帮助，因为这减少了对硬盘的访问。\n参看 MySQL 的文档 Storage Requirements 查看所有的数据类型。\n如果一个表只会有几列罢了（比如说字典表，配置表），那么，我们就没有理由使用 INT 来做主键，使用 MEDIUMINT, SMALLINT 或是更小的 TINYINT 会更经济一些。如果你不需要记录时间，使用 DATE 要比 DATETIME 好得多。\n当然，你也需要留够足够的扩展空间，不然，你日后来干这个事，你会死的很难看，参看Slashdot的例子（2009年11月06日），一个简单的ALTER TABLE语句花了3个多小时，因为里面有一千六百万条数据。\n","slug":"MySQL常见性能优化","published":1,"updated":"2018-04-25T12:46:59.496Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2fj0npf0010q4vgfjoc0qzs","content":"<h1 id=\"优化Group-By语句\"><a href=\"#优化Group-By语句\" class=\"headerlink\" title=\"优化Group By语句\"></a>优化Group By语句</h1><p>默认情况下，MySQL 排序所有GROUP BY col1，col2，….。查询的方法如同在查询中指定ORDER BY col1，col2，…。如果显式包括一个包含相同的列的ORDER BY子句，MySQL 可以毫不减速地对它进行优化，尽管仍然进行排序。如果查询包括GROUP BY 但你想要避免排序结果的消耗，你可以指定ORDER BY NULL禁止排序。</p><a id=\"more\"></a>\n<h1 id=\"优化Order-by语句\"><a href=\"#优化Order-by语句\" class=\"headerlink\" title=\"优化Order by语句\"></a>优化Order by语句</h1><p>在某些情况中，MySQL 可以使用一个索引来满足ORDER BY 子句，而不需要额外的排序。where 条件和order by 使用相同的索引，并且order by 的顺序和索引顺序相同，并且order by 的字段都是升序或者都是降序。</p>\n<h1 id=\"优化insert语句\"><a href=\"#优化insert语句\" class=\"headerlink\" title=\"优化insert语句\"></a>优化insert语句</h1><p>如果你同时从同一客户插入很多行，使用多个值表的INSERT 语句。这比使用分开 INSERT 语句快(在一些情况中几倍)。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; insert into test values(1,2),(1,3),(1,4)…</span><br></pre></td></tr></table></figure>\n\n<p>如果你从不同客户插入很多行，能通过使用INSERT DELAYED 语句得到更高的速度。Delayed 的含义是让insert 语句马上执行，其实数据都被放在内存的队列中，并没有真正的写入磁盘；这比每条语句都分别插入要快的多；LOW_PRIORITY刚好相反，在所有其他用户对表的读写完成后才进行插入。<br>将索引文件和数据文件分在不同的磁盘上存放（利用建表中的选项）；<br>如果进行批量插入，可以增加bulk_insert_buffer_size 变量值的方法来提高速度，但是，这只能对myisam表使用<br>当从一个文本文件装载一个表时，使用LOAD DATA INFILE。这通常比使用很多INSERT语句快20倍；<br>根据应用情况使用replace 语句代替insert；<br>根据应用情况使用ignore 关键字忽略重复记录。</p>\n<h1 id=\"大批量插入数据\"><a href=\"#大批量插入数据\" class=\"headerlink\" title=\"大批量插入数据\"></a>大批量插入数据</h1><ol>\n<li>对于Myisam 类型的表，可以通过以下方式快速的导入大量的数据。<br>ALTER TABLE tblname DISABLE KEYS;<br>这两个命令用来打开或者关闭Myisam 表非唯一索引的更新。在导入大量的数据到一个非空的Myisam 表时，通过设置这两个命令，可以提高导入的效率。对于导入大量数据到一个空的Myisam 表，默认就是先导入数据然后才创建索引的，所以不用进行设置。</li>\n<li>而对于Innodb 类型的表，这种方式并不能提高导入数据的效率。对于Innodb 类型的表，我们有以下几种方式可以提高导入的效率：<br>a. 因为Innodb 类型的表是按照主键的顺序保存的，所以将导入的数据按照主键的顺序排列，可以有效的提高导入数据的效率。如果Innodb 表没有主键，那么系统会默认创建一个内部列作为主键，所以如果可以给表创建一个主键，将可以利用这个优势提高导入数据的效率。<br>b. 在导入数据前执行SET UNIQUE_CHECKS=0，关闭唯一性校验，在导入结束后执行SETUNIQUE_CHECKS=1，恢复唯一性校验，可以提高导入的效率。<br>c. 如果应用使用自动提交的方式，建议在导入前执行SET AUTOCOMMIT=0，关闭自动提交，导入结束后再执行SET AUTOCOMMIT=1，打开自动提交，也可以提高导入的效率。</li>\n</ol>\n<h1 id=\"查询的优化\"><a href=\"#查询的优化\" class=\"headerlink\" title=\"查询的优化\"></a>查询的优化</h1><p>读为主可以设置low_priority_updates=1，写的优先级调低，告诉MYSQL尽量先处理读求<br>为查询缓存优化你的查询<br>大多数的MySQL服务器都开启了查询缓存。这是提高性最有效的方法之一，而且这是被MySQL的数据库引擎处理的。当有很多相同的查询被执行了多次的时候，这些查询结果会被放到一个缓存中，这样，后续的相同的查询就不用操作表而直接访问缓存结果了。<br>这里最主要的问题是，对于程序员来说，这个事情是很容易被忽略的。因为，我们某些查询语句会让MySQL不使用缓存。请看下面的示例：<br>// 查询缓存不开启</p>\n<h1 id=\"拆分大的-DELETE-或-INSERT-语句\"><a href=\"#拆分大的-DELETE-或-INSERT-语句\" class=\"headerlink\" title=\"拆分大的 DELETE 或 INSERT 语句\"></a>拆分大的 DELETE 或 INSERT 语句</h1><p>如果你需要在一个在线的网站上去执行一个大的 DELETE 或 INSERT 查询，你需要非常小心，要避免你的操作让你的整个网站停止相应。因为这两个操作是会锁表的，表一锁住了，别的操作都进不来了。<br>Apache 会有很多的子进程或线程。所以，其工作起来相当有效率，而我们的服务器也不希望有太多的子进程，线程和数据库链接，这是极大的占服务器资源的事情，尤其是内存。<br>如果你把你的表锁上一段时间，比如30秒钟，那么对于一个有很高访问量的站点来说，这30秒所积累的访问进程/线程，数据库链接，打开的文件数，可能不仅仅会让你泊WEB服务Crash，还可能会让你的整台服务器马上掛了。<br>所以，如果你有一个大的处理，你定你一定把其拆分，使用 LIMIT 条件是一个好的方法。</p>\n<h1 id=\"where语句的优化\"><a href=\"#where语句的优化\" class=\"headerlink\" title=\"where语句的优化\"></a>where语句的优化</h1><ol>\n<li>尽量避免在 where 子句中对字段进行表达式操作</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span> <span class=\"keyword\">from</span> uinfo_jifen <span class=\"keyword\">where</span> jifen/<span class=\"number\">60</span> &gt; <span class=\"number\">10000</span>;</span><br></pre></td></tr></table></figure>\n\n<p>优化后:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Select</span> <span class=\"keyword\">id</span> <span class=\"keyword\">from</span> uinfo_jifen <span class=\"keyword\">where</span> jifen&gt;<span class=\"number\">600000</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>应尽量避免在where子句中对字段进行函数操作，这将导致mysql放弃使用索引</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> uid <span class=\"keyword\">from</span> imid <span class=\"keyword\">where</span> <span class=\"keyword\">datediff</span>(create_time,<span class=\"string\">'2011-11-22'</span>)=<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>优化后:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> uid <span class=\"keyword\">from</span> imid <span class=\"keyword\">where</span> create_time&gt; =<span class=\"string\">'2011-11-21‘ and create_time&lt;‘2011-11-23’;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"索引的优化\"><a href=\"#索引的优化\" class=\"headerlink\" title=\"索引的优化\"></a>索引的优化</h1><p>MySQL只有对以下操作符才使用索引：&lt;，&lt;=，=，&gt;，&gt;=，BETWEEN，IN，以及某些时候的LIKE。<br>尽量不要写!=或者&lt;&gt;的sql，用between或&gt; and &lt;代替，否则可能用不到索引<br>Order by 、Group by 、Distinct 最好在需要这个列上建立索引，利于索引排序<br>尽量利用mysql索引排序<br>没办法的情况下，使用强制索引Force index(index_name)<br>尽量避勉innodb用非常大尺寸的字段作为主键<br>较频繁的作为查询条件的字段应该创建索引;<br>选择性高的字段比较适合创建索引;<br>作为表关联字段一般都需要创索引.<br>更新非常频繁的字段不适合创建索引;<br>不会出现在 WHERE 子句中的字段不该创建索引.<br>选择性太低的字段不适合单独创建索引</p>\n<h1 id=\"尽量不要用子查询\"><a href=\"#尽量不要用子查询\" class=\"headerlink\" title=\"尽量不要用子查询\"></a>尽量不要用子查询</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; explain select uid_,count(*) from smember_6 where uid_ in (select uid_ from alluid) group by uid_;</span><br><span class=\"line\"><span class=\"comment\">--| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |+----+--------------------+-----------+-------+---------------+---------+---------+------+----------+--------------------------+| 1 | PRIMARY | smember_6 | index | NULL | PRIMARY | 8 | NULL | 53431264 | Using where; Using index | | 2 | DEPENDENT SUBQUERY | alluid | ALL | NULL | NULL | NULL | NULL | 2448 | Using where |</span></span><br></pre></td></tr></table></figure>\n\n<p>优化后:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; explain select a.uid_,count(*) from smember_6 a,alluid b where a.uid_=b.uid_ group by uid_;</span><br><span class=\"line\"><span class=\"comment\">--| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |+----+-------------+-------+------+---------------+---------+---------+------------+------+---------------------------------+| 1 | SIMPLE | b | ALL | NULL | NULL | NULL | NULL | 2671 | Using temporary; Using filesort | | 1 | SIMPLE | a | ref | PRIMARY | PRIMARY | 4 | ssc.b.uid_ | 1 | Using index</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Join的优化\"><a href=\"#Join的优化\" class=\"headerlink\" title=\"Join的优化\"></a>Join的优化</h1><p>如果你的应用程序有很多 JOIN 查询，你应该确认两个表中Join的字段是被建过索引的。这样，MySQL内部会启动为你优化Join的SQL语句的机制。<br>而且，这些被用来Join的字段，应该是相同的类型的。例如：如果你要把 DECIMAL 字段和一个 INT 字段Join在一起，MySQL就无法使用它们的索引。对于那些STRING类型，还需要有相同的字符集才行。（两个表的字符集有可能不一样）</p>\n<h1 id=\"表的优化\"><a href=\"#表的优化\" class=\"headerlink\" title=\"表的优化\"></a>表的优化</h1><h2 id=\"尽可能的使用-NOT-NULL\"><a href=\"#尽可能的使用-NOT-NULL\" class=\"headerlink\" title=\"尽可能的使用 NOT NULL\"></a>尽可能的使用 NOT NULL</h2><p>除非你有一个很特别的原因去使用 NULL 值，你应该总是让你的字段保持 NOT NULL。<br>不要以为 NULL 不需要空间，其需要额外的空间，并且，在你进行比较的时候，你的程序会更复杂。<br>当然，这里并不是说你就不能使用NULL了，现实情况是很复杂的，依然会有些情况下，你需要使用NULL值。<br>下面摘自MySQL自己的文档：<br>“NULL columns require additional space in the row to record whether their values are NULL. For MyISAM tables, each NULL column takes one bit extra, rounded up to the nearest byte.”</p>\n<h2 id=\"固定长度的表会更快\"><a href=\"#固定长度的表会更快\" class=\"headerlink\" title=\"固定长度的表会更快\"></a>固定长度的表会更快</h2><p>如果表中的所有字段都是“固定长度”的，整个表会被认为是 “static” 或 “fixed-length”。 例如，表中没有如下类型的字段： VARCHAR，TEXT，BLOB。只要你包括了其中一个这些字段，那么这个表就不是“固定长度静态表”了，这样，MySQL 引擎会用另一种方法来处理。<br>固定长度的表会提高性能，因为MySQL搜寻得会更快一些，因为这些固定的长度是很容易计算下一个数据的偏移量的，所以读取的自然也会很快。而如果字段不是定长的，那么，每一次要找下一条的话，需要程序找到主键。<br>并且，固定长度的表也更容易被缓存和重建。不过，唯一的副作用是，固定长度的字段会浪费一些空间，因为定长的字段无论你用不用，他都是要分配那么多的空间。</p>\n<h2 id=\"垂直分割\"><a href=\"#垂直分割\" class=\"headerlink\" title=\"垂直分割\"></a>垂直分割</h2><p>“垂直分割”是一种把数据库中的表按列变成几张表的方法，这样可以降低表的复杂度和字段的数目，从而达到优化的目的。（以前，在银行做过项目，见过一张表有100多个字段，很恐怖）<br>示例一：在Users表中有一个字段是家庭地址，这个字段是可选字段，相比起，而且你在数据库操作的时候除了个人信息外，你并不需要经常读取或是改写这个字段。那么，为什么不把他放到另外一张表中呢？ 这样会让你的表有更好的性能，大家想想是不是，大量的时候，我对于用户表来说，只有用户ID，用户名，口令，用户角色等会被经常使用。小一点的表总是会有好的性能。<br>示例二： 你有一个叫 “last_login” 的字段，它会在每次用户登录时被更新。但是，每次更新时会导致该表的查询缓存被清空。所以，你可以把这个字段放到另一个表中，这样就不会影响你对用户ID，用户名，用户角色的不停地读取了，因为查询缓存会帮你增加很多性能。<br>另外，你需要注意的是，这些被分出去的字段所形成的表，你不会经常性地去Join他们，不然的话，这样的性能会比不分割时还要差，而且，会是极数级的下降。</p>\n<h2 id=\"越小的列会越快\"><a href=\"#越小的列会越快\" class=\"headerlink\" title=\"越小的列会越快\"></a>越小的列会越快</h2><p>对于大多数的数据库引擎来说，硬盘操作可能是最重大的瓶颈。所以，把你的数据变得紧凑会对这种情况非常有帮助，因为这减少了对硬盘的访问。<br>参看 MySQL 的文档 Storage Requirements 查看所有的数据类型。<br>如果一个表只会有几列罢了（比如说字典表，配置表），那么，我们就没有理由使用 INT 来做主键，使用 MEDIUMINT, SMALLINT 或是更小的 TINYINT 会更经济一些。如果你不需要记录时间，使用 DATE 要比 DATETIME 好得多。<br>当然，你也需要留够足够的扩展空间，不然，你日后来干这个事，你会死的很难看，参看Slashdot的例子（2009年11月06日），一个简单的ALTER TABLE语句花了3个多小时，因为里面有一千六百万条数据。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"优化Group-By语句\"><a href=\"#优化Group-By语句\" class=\"headerlink\" title=\"优化Group By语句\"></a>优化Group By语句</h1><p>默认情况下，MySQL 排序所有GROUP BY col1，col2，….。查询的方法如同在查询中指定ORDER BY col1，col2，…。如果显式包括一个包含相同的列的ORDER BY子句，MySQL 可以毫不减速地对它进行优化，尽管仍然进行排序。如果查询包括GROUP BY 但你想要避免排序结果的消耗，你可以指定ORDER BY NULL禁止排序。</p>","more":"\n<h1 id=\"优化Order-by语句\"><a href=\"#优化Order-by语句\" class=\"headerlink\" title=\"优化Order by语句\"></a>优化Order by语句</h1><p>在某些情况中，MySQL 可以使用一个索引来满足ORDER BY 子句，而不需要额外的排序。where 条件和order by 使用相同的索引，并且order by 的顺序和索引顺序相同，并且order by 的字段都是升序或者都是降序。</p>\n<h1 id=\"优化insert语句\"><a href=\"#优化insert语句\" class=\"headerlink\" title=\"优化insert语句\"></a>优化insert语句</h1><p>如果你同时从同一客户插入很多行，使用多个值表的INSERT 语句。这比使用分开 INSERT 语句快(在一些情况中几倍)。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; insert into test values(1,2),(1,3),(1,4)…</span><br></pre></td></tr></table></figure>\n\n<p>如果你从不同客户插入很多行，能通过使用INSERT DELAYED 语句得到更高的速度。Delayed 的含义是让insert 语句马上执行，其实数据都被放在内存的队列中，并没有真正的写入磁盘；这比每条语句都分别插入要快的多；LOW_PRIORITY刚好相反，在所有其他用户对表的读写完成后才进行插入。<br>将索引文件和数据文件分在不同的磁盘上存放（利用建表中的选项）；<br>如果进行批量插入，可以增加bulk_insert_buffer_size 变量值的方法来提高速度，但是，这只能对myisam表使用<br>当从一个文本文件装载一个表时，使用LOAD DATA INFILE。这通常比使用很多INSERT语句快20倍；<br>根据应用情况使用replace 语句代替insert；<br>根据应用情况使用ignore 关键字忽略重复记录。</p>\n<h1 id=\"大批量插入数据\"><a href=\"#大批量插入数据\" class=\"headerlink\" title=\"大批量插入数据\"></a>大批量插入数据</h1><ol>\n<li>对于Myisam 类型的表，可以通过以下方式快速的导入大量的数据。<br>ALTER TABLE tblname DISABLE KEYS;<br>这两个命令用来打开或者关闭Myisam 表非唯一索引的更新。在导入大量的数据到一个非空的Myisam 表时，通过设置这两个命令，可以提高导入的效率。对于导入大量数据到一个空的Myisam 表，默认就是先导入数据然后才创建索引的，所以不用进行设置。</li>\n<li>而对于Innodb 类型的表，这种方式并不能提高导入数据的效率。对于Innodb 类型的表，我们有以下几种方式可以提高导入的效率：<br>a. 因为Innodb 类型的表是按照主键的顺序保存的，所以将导入的数据按照主键的顺序排列，可以有效的提高导入数据的效率。如果Innodb 表没有主键，那么系统会默认创建一个内部列作为主键，所以如果可以给表创建一个主键，将可以利用这个优势提高导入数据的效率。<br>b. 在导入数据前执行SET UNIQUE_CHECKS=0，关闭唯一性校验，在导入结束后执行SETUNIQUE_CHECKS=1，恢复唯一性校验，可以提高导入的效率。<br>c. 如果应用使用自动提交的方式，建议在导入前执行SET AUTOCOMMIT=0，关闭自动提交，导入结束后再执行SET AUTOCOMMIT=1，打开自动提交，也可以提高导入的效率。</li>\n</ol>\n<h1 id=\"查询的优化\"><a href=\"#查询的优化\" class=\"headerlink\" title=\"查询的优化\"></a>查询的优化</h1><p>读为主可以设置low_priority_updates=1，写的优先级调低，告诉MYSQL尽量先处理读求<br>为查询缓存优化你的查询<br>大多数的MySQL服务器都开启了查询缓存。这是提高性最有效的方法之一，而且这是被MySQL的数据库引擎处理的。当有很多相同的查询被执行了多次的时候，这些查询结果会被放到一个缓存中，这样，后续的相同的查询就不用操作表而直接访问缓存结果了。<br>这里最主要的问题是，对于程序员来说，这个事情是很容易被忽略的。因为，我们某些查询语句会让MySQL不使用缓存。请看下面的示例：<br>// 查询缓存不开启</p>\n<h1 id=\"拆分大的-DELETE-或-INSERT-语句\"><a href=\"#拆分大的-DELETE-或-INSERT-语句\" class=\"headerlink\" title=\"拆分大的 DELETE 或 INSERT 语句\"></a>拆分大的 DELETE 或 INSERT 语句</h1><p>如果你需要在一个在线的网站上去执行一个大的 DELETE 或 INSERT 查询，你需要非常小心，要避免你的操作让你的整个网站停止相应。因为这两个操作是会锁表的，表一锁住了，别的操作都进不来了。<br>Apache 会有很多的子进程或线程。所以，其工作起来相当有效率，而我们的服务器也不希望有太多的子进程，线程和数据库链接，这是极大的占服务器资源的事情，尤其是内存。<br>如果你把你的表锁上一段时间，比如30秒钟，那么对于一个有很高访问量的站点来说，这30秒所积累的访问进程/线程，数据库链接，打开的文件数，可能不仅仅会让你泊WEB服务Crash，还可能会让你的整台服务器马上掛了。<br>所以，如果你有一个大的处理，你定你一定把其拆分，使用 LIMIT 条件是一个好的方法。</p>\n<h1 id=\"where语句的优化\"><a href=\"#where语句的优化\" class=\"headerlink\" title=\"where语句的优化\"></a>where语句的优化</h1><ol>\n<li>尽量避免在 where 子句中对字段进行表达式操作</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span> <span class=\"keyword\">from</span> uinfo_jifen <span class=\"keyword\">where</span> jifen/<span class=\"number\">60</span> &gt; <span class=\"number\">10000</span>;</span><br></pre></td></tr></table></figure>\n\n<p>优化后:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Select</span> <span class=\"keyword\">id</span> <span class=\"keyword\">from</span> uinfo_jifen <span class=\"keyword\">where</span> jifen&gt;<span class=\"number\">600000</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>应尽量避免在where子句中对字段进行函数操作，这将导致mysql放弃使用索引</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> uid <span class=\"keyword\">from</span> imid <span class=\"keyword\">where</span> <span class=\"keyword\">datediff</span>(create_time,<span class=\"string\">'2011-11-22'</span>)=<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>优化后:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> uid <span class=\"keyword\">from</span> imid <span class=\"keyword\">where</span> create_time&gt; =<span class=\"string\">'2011-11-21‘ and create_time&lt;‘2011-11-23’;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"索引的优化\"><a href=\"#索引的优化\" class=\"headerlink\" title=\"索引的优化\"></a>索引的优化</h1><p>MySQL只有对以下操作符才使用索引：&lt;，&lt;=，=，&gt;，&gt;=，BETWEEN，IN，以及某些时候的LIKE。<br>尽量不要写!=或者&lt;&gt;的sql，用between或&gt; and &lt;代替，否则可能用不到索引<br>Order by 、Group by 、Distinct 最好在需要这个列上建立索引，利于索引排序<br>尽量利用mysql索引排序<br>没办法的情况下，使用强制索引Force index(index_name)<br>尽量避勉innodb用非常大尺寸的字段作为主键<br>较频繁的作为查询条件的字段应该创建索引;<br>选择性高的字段比较适合创建索引;<br>作为表关联字段一般都需要创索引.<br>更新非常频繁的字段不适合创建索引;<br>不会出现在 WHERE 子句中的字段不该创建索引.<br>选择性太低的字段不适合单独创建索引</p>\n<h1 id=\"尽量不要用子查询\"><a href=\"#尽量不要用子查询\" class=\"headerlink\" title=\"尽量不要用子查询\"></a>尽量不要用子查询</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; explain select uid_,count(*) from smember_6 where uid_ in (select uid_ from alluid) group by uid_;</span><br><span class=\"line\"><span class=\"comment\">--| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |+----+--------------------+-----------+-------+---------------+---------+---------+------+----------+--------------------------+| 1 | PRIMARY | smember_6 | index | NULL | PRIMARY | 8 | NULL | 53431264 | Using where; Using index | | 2 | DEPENDENT SUBQUERY | alluid | ALL | NULL | NULL | NULL | NULL | 2448 | Using where |</span></span><br></pre></td></tr></table></figure>\n\n<p>优化后:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; explain select a.uid_,count(*) from smember_6 a,alluid b where a.uid_=b.uid_ group by uid_;</span><br><span class=\"line\"><span class=\"comment\">--| id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra |+----+-------------+-------+------+---------------+---------+---------+------------+------+---------------------------------+| 1 | SIMPLE | b | ALL | NULL | NULL | NULL | NULL | 2671 | Using temporary; Using filesort | | 1 | SIMPLE | a | ref | PRIMARY | PRIMARY | 4 | ssc.b.uid_ | 1 | Using index</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Join的优化\"><a href=\"#Join的优化\" class=\"headerlink\" title=\"Join的优化\"></a>Join的优化</h1><p>如果你的应用程序有很多 JOIN 查询，你应该确认两个表中Join的字段是被建过索引的。这样，MySQL内部会启动为你优化Join的SQL语句的机制。<br>而且，这些被用来Join的字段，应该是相同的类型的。例如：如果你要把 DECIMAL 字段和一个 INT 字段Join在一起，MySQL就无法使用它们的索引。对于那些STRING类型，还需要有相同的字符集才行。（两个表的字符集有可能不一样）</p>\n<h1 id=\"表的优化\"><a href=\"#表的优化\" class=\"headerlink\" title=\"表的优化\"></a>表的优化</h1><h2 id=\"尽可能的使用-NOT-NULL\"><a href=\"#尽可能的使用-NOT-NULL\" class=\"headerlink\" title=\"尽可能的使用 NOT NULL\"></a>尽可能的使用 NOT NULL</h2><p>除非你有一个很特别的原因去使用 NULL 值，你应该总是让你的字段保持 NOT NULL。<br>不要以为 NULL 不需要空间，其需要额外的空间，并且，在你进行比较的时候，你的程序会更复杂。<br>当然，这里并不是说你就不能使用NULL了，现实情况是很复杂的，依然会有些情况下，你需要使用NULL值。<br>下面摘自MySQL自己的文档：<br>“NULL columns require additional space in the row to record whether their values are NULL. For MyISAM tables, each NULL column takes one bit extra, rounded up to the nearest byte.”</p>\n<h2 id=\"固定长度的表会更快\"><a href=\"#固定长度的表会更快\" class=\"headerlink\" title=\"固定长度的表会更快\"></a>固定长度的表会更快</h2><p>如果表中的所有字段都是“固定长度”的，整个表会被认为是 “static” 或 “fixed-length”。 例如，表中没有如下类型的字段： VARCHAR，TEXT，BLOB。只要你包括了其中一个这些字段，那么这个表就不是“固定长度静态表”了，这样，MySQL 引擎会用另一种方法来处理。<br>固定长度的表会提高性能，因为MySQL搜寻得会更快一些，因为这些固定的长度是很容易计算下一个数据的偏移量的，所以读取的自然也会很快。而如果字段不是定长的，那么，每一次要找下一条的话，需要程序找到主键。<br>并且，固定长度的表也更容易被缓存和重建。不过，唯一的副作用是，固定长度的字段会浪费一些空间，因为定长的字段无论你用不用，他都是要分配那么多的空间。</p>\n<h2 id=\"垂直分割\"><a href=\"#垂直分割\" class=\"headerlink\" title=\"垂直分割\"></a>垂直分割</h2><p>“垂直分割”是一种把数据库中的表按列变成几张表的方法，这样可以降低表的复杂度和字段的数目，从而达到优化的目的。（以前，在银行做过项目，见过一张表有100多个字段，很恐怖）<br>示例一：在Users表中有一个字段是家庭地址，这个字段是可选字段，相比起，而且你在数据库操作的时候除了个人信息外，你并不需要经常读取或是改写这个字段。那么，为什么不把他放到另外一张表中呢？ 这样会让你的表有更好的性能，大家想想是不是，大量的时候，我对于用户表来说，只有用户ID，用户名，口令，用户角色等会被经常使用。小一点的表总是会有好的性能。<br>示例二： 你有一个叫 “last_login” 的字段，它会在每次用户登录时被更新。但是，每次更新时会导致该表的查询缓存被清空。所以，你可以把这个字段放到另一个表中，这样就不会影响你对用户ID，用户名，用户角色的不停地读取了，因为查询缓存会帮你增加很多性能。<br>另外，你需要注意的是，这些被分出去的字段所形成的表，你不会经常性地去Join他们，不然的话，这样的性能会比不分割时还要差，而且，会是极数级的下降。</p>\n<h2 id=\"越小的列会越快\"><a href=\"#越小的列会越快\" class=\"headerlink\" title=\"越小的列会越快\"></a>越小的列会越快</h2><p>对于大多数的数据库引擎来说，硬盘操作可能是最重大的瓶颈。所以，把你的数据变得紧凑会对这种情况非常有帮助，因为这减少了对硬盘的访问。<br>参看 MySQL 的文档 Storage Requirements 查看所有的数据类型。<br>如果一个表只会有几列罢了（比如说字典表，配置表），那么，我们就没有理由使用 INT 来做主键，使用 MEDIUMINT, SMALLINT 或是更小的 TINYINT 会更经济一些。如果你不需要记录时间，使用 DATE 要比 DATETIME 好得多。<br>当然，你也需要留够足够的扩展空间，不然，你日后来干这个事，你会死的很难看，参看Slashdot的例子（2009年11月06日），一个简单的ALTER TABLE语句花了3个多小时，因为里面有一千六百万条数据。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Apr 25 2018 20:46:59 GMT+0800 (GMT+08:00)","title":"MySQL常见性能优化","path":"2017/04/11/MySQL常见性能优化/","eyeCatchImage":null,"excerpt":null,"date":"2017-04-11T14:03:36.000Z","pv":0,"totalPV":0,"categories":"Essay","tags":["Mysql"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":5056},{"title":"Java 线上 CPU100% 排查思路","author":"Zhang Fei","date":"2019-10-31T09:09:00.000Z","_content":"#### 一、根据 Java 进程 ID，用 `ps` 或 `top` 命令查询出 CPU 占用率高的线程\n\n```shell\nps -mp <pid> -o THREAD,tid,time | sort -rn | more // (sort -rn 已数值的方式进行逆序排列)\n// 或top -Hp <pid>\ntop - 08:31:16 up 30 min,  0 users,  load average: 0.75, 0.59, 0.35\nThreads:  11 total,   1 running,  10 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  3.5 us,  0.6 sy,  0.0 ni, 95.9 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\nKiB Mem:   2046460 total,  1924856 used,   121604 free,    14396 buffers\nKiB Swap:  1048572 total,        0 used,  1048572 free.  1192532 cached Mem\n\n  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND\n   10 root      20   0 2557160 289824  15872 R 79.3 14.2   0:41.49 java\n   11 root      20   0 2557160 289824  15872 S 13.2 14.2   0:06.78 java\n```\n\n#### 二、转换线程 ID 为 16 进制\n\n```shell\nprintf \"%x\\n\" <tid>\n// printf \"%x\\n\" 10\n// a\n```\n\n#### 三、利用 JDK 提供的工具 `jstack` 打印导出线程信息\n\n```shell\njstack <pid> | grep <16tid> -A 30 // 或导出 jstack <pid> >> jstack.txt 文件查看\n```\n\n#### 四、查看线程信息并处理\n\n##### 4.1 如果是用户线程\n\n![upload successful](/images/pasted-48.png)\n\n查看相关代码并处理\n\n**附 `jstack` 死锁日志**\n\n![upload successful](/images/pasted-47.png)\n\n##### 4.2 如果是 **Full GC** 次数过多\n\n```shell\n\"main\" #1 prio=5 os_prio=0 tid=0x00007f8718009800 nid=0xb runnable [0x00007f871fe41000]\n   java.lang.Thread.State: RUNNABLE\n\tat com.aibaobei.chapter2.eg2.UserDemo.main(UserDemo.java:9)\n\n\"VM Thread\" os_prio=0 tid=0x00007f871806e000 nid=0xa runnable\n```\n\n**nid=0xa** 为系统线程 ID\n使用 JDK 提供的工具 `jstat` 查看 GC 情况\n\n```shell\njstat -gcutil <pid> 1000 10\nS0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT\n0.00   0.00   0.00  75.07  59.09  59.60   3259    0.919  6517    7.715    8.635\n0.00   0.00   0.00   0.08  59.09  59.60   3306    0.930  6611    7.822    8.752\n0.00   0.00   0.00   0.08  59.09  59.60   3351    0.943  6701    7.924    8.867\n0.00   0.00   0.00   0.08  59.09  59.60   3397    0.955  6793    8.029    8.984\n```\n\n使用 JDK 提供的 `jmap` 工具导出内存日志到 Eclipse mat工具进行查看\n\n```shell\n// 简单查看存活对象的大小数目\njmap -histo:live <pid> | more\n// dump 内存\njmap -dump:live,format=b,file=problem.bin <pid>\n```\n\n![upload successful](/images/pasted-49.png)\n\n主要有以下两种原因：\n1. 代码中一次获取了大量的对象，导致内存溢出\n2. 内存占用不高，但是 Full GC 次数还是比较多，此时可能是显示的 `System.gc()` 调用导致 GC 次数过多，这可以通过添加 `-XX:+DisableExplicitGC` 来禁用JVM对显示GC的响应\n\n#### 总结\n\n通过 `ps` 或 `top` 命令找出 CPU 过高的线程，将其线程 ID 转换为十六进制，然后在 `jstack` 日志中查看该线程信息，分为以下两种情况：\n1. 如果是正常的用户线程，则通过该线程的堆栈信息查看其具体是在哪处用户代码处运行比较消耗 CPU\n2. 如果该线程是 **VM Thread** 则通过 `jstat -gcutil <pid> <period> <times>` 命令监控当前系统的 GC 状况，然后通过 `jmap dump:format=b,file=<filepath> <pid>` 导出系统当前的内存数据，导出之后将内存情况放到 eclipse 的 mat 工具中进行分析即可得出内存中主要是什么对象比较消耗内存，进而可以处理相关代码\n\n> 参考链接:\n> - https://blog.csdn.net/baiye_xing/article/details/90483169\n> - https://my.oschina.net/zhangxufeng/blog/3017521\n> - https://www.cnblogs.com/youxin/p/11229071.html\n> - [JVM 故障分析及性能优化系列文章](https://www.javatang.com/archives/2017/10/19/33151873.html)","source":"_posts/Java-线上-CPU100-排查思路.md","raw":"---\ntitle: Java 线上 CPU100% 排查思路\nauthor: Zhang Fei\ntags:\n  - Java\ncategories:\n  - Collection\ndate: 2019-10-31 17:09:00\n---\n#### 一、根据 Java 进程 ID，用 `ps` 或 `top` 命令查询出 CPU 占用率高的线程\n\n```shell\nps -mp <pid> -o THREAD,tid,time | sort -rn | more // (sort -rn 已数值的方式进行逆序排列)\n// 或top -Hp <pid>\ntop - 08:31:16 up 30 min,  0 users,  load average: 0.75, 0.59, 0.35\nThreads:  11 total,   1 running,  10 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  3.5 us,  0.6 sy,  0.0 ni, 95.9 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\nKiB Mem:   2046460 total,  1924856 used,   121604 free,    14396 buffers\nKiB Swap:  1048572 total,        0 used,  1048572 free.  1192532 cached Mem\n\n  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND\n   10 root      20   0 2557160 289824  15872 R 79.3 14.2   0:41.49 java\n   11 root      20   0 2557160 289824  15872 S 13.2 14.2   0:06.78 java\n```\n\n#### 二、转换线程 ID 为 16 进制\n\n```shell\nprintf \"%x\\n\" <tid>\n// printf \"%x\\n\" 10\n// a\n```\n\n#### 三、利用 JDK 提供的工具 `jstack` 打印导出线程信息\n\n```shell\njstack <pid> | grep <16tid> -A 30 // 或导出 jstack <pid> >> jstack.txt 文件查看\n```\n\n#### 四、查看线程信息并处理\n\n##### 4.1 如果是用户线程\n\n![upload successful](/images/pasted-48.png)\n\n查看相关代码并处理\n\n**附 `jstack` 死锁日志**\n\n![upload successful](/images/pasted-47.png)\n\n##### 4.2 如果是 **Full GC** 次数过多\n\n```shell\n\"main\" #1 prio=5 os_prio=0 tid=0x00007f8718009800 nid=0xb runnable [0x00007f871fe41000]\n   java.lang.Thread.State: RUNNABLE\n\tat com.aibaobei.chapter2.eg2.UserDemo.main(UserDemo.java:9)\n\n\"VM Thread\" os_prio=0 tid=0x00007f871806e000 nid=0xa runnable\n```\n\n**nid=0xa** 为系统线程 ID\n使用 JDK 提供的工具 `jstat` 查看 GC 情况\n\n```shell\njstat -gcutil <pid> 1000 10\nS0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT\n0.00   0.00   0.00  75.07  59.09  59.60   3259    0.919  6517    7.715    8.635\n0.00   0.00   0.00   0.08  59.09  59.60   3306    0.930  6611    7.822    8.752\n0.00   0.00   0.00   0.08  59.09  59.60   3351    0.943  6701    7.924    8.867\n0.00   0.00   0.00   0.08  59.09  59.60   3397    0.955  6793    8.029    8.984\n```\n\n使用 JDK 提供的 `jmap` 工具导出内存日志到 Eclipse mat工具进行查看\n\n```shell\n// 简单查看存活对象的大小数目\njmap -histo:live <pid> | more\n// dump 内存\njmap -dump:live,format=b,file=problem.bin <pid>\n```\n\n![upload successful](/images/pasted-49.png)\n\n主要有以下两种原因：\n1. 代码中一次获取了大量的对象，导致内存溢出\n2. 内存占用不高，但是 Full GC 次数还是比较多，此时可能是显示的 `System.gc()` 调用导致 GC 次数过多，这可以通过添加 `-XX:+DisableExplicitGC` 来禁用JVM对显示GC的响应\n\n#### 总结\n\n通过 `ps` 或 `top` 命令找出 CPU 过高的线程，将其线程 ID 转换为十六进制，然后在 `jstack` 日志中查看该线程信息，分为以下两种情况：\n1. 如果是正常的用户线程，则通过该线程的堆栈信息查看其具体是在哪处用户代码处运行比较消耗 CPU\n2. 如果该线程是 **VM Thread** 则通过 `jstat -gcutil <pid> <period> <times>` 命令监控当前系统的 GC 状况，然后通过 `jmap dump:format=b,file=<filepath> <pid>` 导出系统当前的内存数据，导出之后将内存情况放到 eclipse 的 mat 工具中进行分析即可得出内存中主要是什么对象比较消耗内存，进而可以处理相关代码\n\n> 参考链接:\n> - https://blog.csdn.net/baiye_xing/article/details/90483169\n> - https://my.oschina.net/zhangxufeng/blog/3017521\n> - https://www.cnblogs.com/youxin/p/11229071.html\n> - [JVM 故障分析及性能优化系列文章](https://www.javatang.com/archives/2017/10/19/33151873.html)","slug":"Java-线上-CPU100-排查思路","published":1,"updated":"2019-10-31T10:03:37.084Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2fj0npi0014q4vghl574afi","content":"<h4 id=\"一、根据-Java-进程-ID，用-ps-或-top-命令查询出-CPU-占用率高的线程\"><a href=\"#一、根据-Java-进程-ID，用-ps-或-top-命令查询出-CPU-占用率高的线程\" class=\"headerlink\" title=\"一、根据 Java 进程 ID，用 ps 或 top 命令查询出 CPU 占用率高的线程\"></a>一、根据 Java 进程 ID，用 <code>ps</code> 或 <code>top</code> 命令查询出 CPU 占用率高的线程</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -mp &lt;pid&gt; -o THREAD,tid,time | sort -rn | more // (sort -rn 已数值的方式进行逆序排列)</span><br><span class=\"line\">// 或top -Hp &lt;pid&gt;</span><br><span class=\"line\">top - 08:31:16 up 30 min,  0 users,  load average: 0.75, 0.59, 0.35</span><br><span class=\"line\">Threads:  11 total,   1 running,  10 sleeping,   0 stopped,   0 zombie</span><br><span class=\"line\"><span class=\"meta\">%</span><span class=\"bash\">Cpu(s):  3.5 us,  0.6 sy,  0.0 ni, 95.9 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span></span><br><span class=\"line\">KiB Mem:   2046460 total,  1924856 used,   121604 free,    14396 buffers</span><br><span class=\"line\">KiB Swap:  1048572 total,        0 used,  1048572 free.  1192532 cached Mem</span><br><span class=\"line\"></span><br><span class=\"line\">  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND</span><br><span class=\"line\">   10 root      20   0 2557160 289824  15872 R 79.3 14.2   0:41.49 java</span><br><span class=\"line\">   11 root      20   0 2557160 289824  15872 S 13.2 14.2   0:06.78 java</span><br></pre></td></tr></table></figure><a id=\"more\"></a>\n\n<h4 id=\"二、转换线程-ID-为-16-进制\"><a href=\"#二、转换线程-ID-为-16-进制\" class=\"headerlink\" title=\"二、转换线程 ID 为 16 进制\"></a>二、转换线程 ID 为 16 进制</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printf \"%x\\n\" &lt;tid&gt;</span><br><span class=\"line\">// printf \"%x\\n\" 10</span><br><span class=\"line\">// a</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三、利用-JDK-提供的工具-jstack-打印导出线程信息\"><a href=\"#三、利用-JDK-提供的工具-jstack-打印导出线程信息\" class=\"headerlink\" title=\"三、利用 JDK 提供的工具 jstack 打印导出线程信息\"></a>三、利用 JDK 提供的工具 <code>jstack</code> 打印导出线程信息</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jstack &lt;pid&gt; | grep &lt;16tid&gt; -A 30 // 或导出 jstack &lt;pid&gt; &gt;&gt; jstack.txt 文件查看</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"四、查看线程信息并处理\"><a href=\"#四、查看线程信息并处理\" class=\"headerlink\" title=\"四、查看线程信息并处理\"></a>四、查看线程信息并处理</h4><h5 id=\"4-1-如果是用户线程\"><a href=\"#4-1-如果是用户线程\" class=\"headerlink\" title=\"4.1 如果是用户线程\"></a>4.1 如果是用户线程</h5><p><img src=\"/images/pasted-48.png\" alt=\"upload successful\"></p>\n<p>查看相关代码并处理</p>\n<p><strong>附 <code>jstack</code> 死锁日志</strong></p>\n<p><img src=\"/images/pasted-47.png\" alt=\"upload successful\"></p>\n<h5 id=\"4-2-如果是-Full-GC-次数过多\"><a href=\"#4-2-如果是-Full-GC-次数过多\" class=\"headerlink\" title=\"4.2 如果是 Full GC 次数过多\"></a>4.2 如果是 <strong>Full GC</strong> 次数过多</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"main\" #1 prio=5 os_prio=0 tid=0x00007f8718009800 nid=0xb runnable [0x00007f871fe41000]</span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\">\tat com.aibaobei.chapter2.eg2.UserDemo.main(UserDemo.java:9)</span><br><span class=\"line\"></span><br><span class=\"line\">\"VM Thread\" os_prio=0 tid=0x00007f871806e000 nid=0xa runnable</span><br></pre></td></tr></table></figure>\n\n<p><strong>nid=0xa</strong> 为系统线程 ID<br>使用 JDK 提供的工具 <code>jstat</code> 查看 GC 情况</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jstat -gcutil &lt;pid&gt; 1000 10</span><br><span class=\"line\">S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT</span><br><span class=\"line\">0.00   0.00   0.00  75.07  59.09  59.60   3259    0.919  6517    7.715    8.635</span><br><span class=\"line\">0.00   0.00   0.00   0.08  59.09  59.60   3306    0.930  6611    7.822    8.752</span><br><span class=\"line\">0.00   0.00   0.00   0.08  59.09  59.60   3351    0.943  6701    7.924    8.867</span><br><span class=\"line\">0.00   0.00   0.00   0.08  59.09  59.60   3397    0.955  6793    8.029    8.984</span><br></pre></td></tr></table></figure>\n\n<p>使用 JDK 提供的 <code>jmap</code> 工具导出内存日志到 Eclipse mat工具进行查看</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 简单查看存活对象的大小数目</span><br><span class=\"line\">jmap -histo:live &lt;pid&gt; | more</span><br><span class=\"line\">// dump 内存</span><br><span class=\"line\">jmap -dump:live,format=b,file=problem.bin &lt;pid&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-49.png\" alt=\"upload successful\"></p>\n<p>主要有以下两种原因：</p>\n<ol>\n<li>代码中一次获取了大量的对象，导致内存溢出</li>\n<li>内存占用不高，但是 Full GC 次数还是比较多，此时可能是显示的 <code>System.gc()</code> 调用导致 GC 次数过多，这可以通过添加 <code>-XX:+DisableExplicitGC</code> 来禁用JVM对显示GC的响应</li>\n</ol>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>通过 <code>ps</code> 或 <code>top</code> 命令找出 CPU 过高的线程，将其线程 ID 转换为十六进制，然后在 <code>jstack</code> 日志中查看该线程信息，分为以下两种情况：</p>\n<ol>\n<li>如果是正常的用户线程，则通过该线程的堆栈信息查看其具体是在哪处用户代码处运行比较消耗 CPU</li>\n<li>如果该线程是 <strong>VM Thread</strong> 则通过 <code>jstat -gcutil &lt;pid&gt; &lt;period&gt; &lt;times&gt;</code> 命令监控当前系统的 GC 状况，然后通过 <code>jmap dump:format=b,file=&lt;filepath&gt; &lt;pid&gt;</code> 导出系统当前的内存数据，导出之后将内存情况放到 eclipse 的 mat 工具中进行分析即可得出内存中主要是什么对象比较消耗内存，进而可以处理相关代码</li>\n</ol>\n<blockquote>\n<p>参考链接:</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/baiye_xing/article/details/90483169\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/baiye_xing/article/details/90483169</a></li>\n<li><a href=\"https://my.oschina.net/zhangxufeng/blog/3017521\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/zhangxufeng/blog/3017521</a></li>\n<li><a href=\"https://www.cnblogs.com/youxin/p/11229071.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/youxin/p/11229071.html</a></li>\n<li><a href=\"https://www.javatang.com/archives/2017/10/19/33151873.html\" target=\"_blank\" rel=\"noopener\">JVM 故障分析及性能优化系列文章</a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h4 id=\"一、根据-Java-进程-ID，用-ps-或-top-命令查询出-CPU-占用率高的线程\"><a href=\"#一、根据-Java-进程-ID，用-ps-或-top-命令查询出-CPU-占用率高的线程\" class=\"headerlink\" title=\"一、根据 Java 进程 ID，用 ps 或 top 命令查询出 CPU 占用率高的线程\"></a>一、根据 Java 进程 ID，用 <code>ps</code> 或 <code>top</code> 命令查询出 CPU 占用率高的线程</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -mp &lt;pid&gt; -o THREAD,tid,time | sort -rn | more // (sort -rn 已数值的方式进行逆序排列)</span><br><span class=\"line\">// 或top -Hp &lt;pid&gt;</span><br><span class=\"line\">top - 08:31:16 up 30 min,  0 users,  load average: 0.75, 0.59, 0.35</span><br><span class=\"line\">Threads:  11 total,   1 running,  10 sleeping,   0 stopped,   0 zombie</span><br><span class=\"line\"><span class=\"meta\">%</span><span class=\"bash\">Cpu(s):  3.5 us,  0.6 sy,  0.0 ni, 95.9 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span></span><br><span class=\"line\">KiB Mem:   2046460 total,  1924856 used,   121604 free,    14396 buffers</span><br><span class=\"line\">KiB Swap:  1048572 total,        0 used,  1048572 free.  1192532 cached Mem</span><br><span class=\"line\"></span><br><span class=\"line\">  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND</span><br><span class=\"line\">   10 root      20   0 2557160 289824  15872 R 79.3 14.2   0:41.49 java</span><br><span class=\"line\">   11 root      20   0 2557160 289824  15872 S 13.2 14.2   0:06.78 java</span><br></pre></td></tr></table></figure>","more":"\n\n<h4 id=\"二、转换线程-ID-为-16-进制\"><a href=\"#二、转换线程-ID-为-16-进制\" class=\"headerlink\" title=\"二、转换线程 ID 为 16 进制\"></a>二、转换线程 ID 为 16 进制</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printf \"%x\\n\" &lt;tid&gt;</span><br><span class=\"line\">// printf \"%x\\n\" 10</span><br><span class=\"line\">// a</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三、利用-JDK-提供的工具-jstack-打印导出线程信息\"><a href=\"#三、利用-JDK-提供的工具-jstack-打印导出线程信息\" class=\"headerlink\" title=\"三、利用 JDK 提供的工具 jstack 打印导出线程信息\"></a>三、利用 JDK 提供的工具 <code>jstack</code> 打印导出线程信息</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jstack &lt;pid&gt; | grep &lt;16tid&gt; -A 30 // 或导出 jstack &lt;pid&gt; &gt;&gt; jstack.txt 文件查看</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"四、查看线程信息并处理\"><a href=\"#四、查看线程信息并处理\" class=\"headerlink\" title=\"四、查看线程信息并处理\"></a>四、查看线程信息并处理</h4><h5 id=\"4-1-如果是用户线程\"><a href=\"#4-1-如果是用户线程\" class=\"headerlink\" title=\"4.1 如果是用户线程\"></a>4.1 如果是用户线程</h5><p><img src=\"/images/pasted-48.png\" alt=\"upload successful\"></p>\n<p>查看相关代码并处理</p>\n<p><strong>附 <code>jstack</code> 死锁日志</strong></p>\n<p><img src=\"/images/pasted-47.png\" alt=\"upload successful\"></p>\n<h5 id=\"4-2-如果是-Full-GC-次数过多\"><a href=\"#4-2-如果是-Full-GC-次数过多\" class=\"headerlink\" title=\"4.2 如果是 Full GC 次数过多\"></a>4.2 如果是 <strong>Full GC</strong> 次数过多</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"main\" #1 prio=5 os_prio=0 tid=0x00007f8718009800 nid=0xb runnable [0x00007f871fe41000]</span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\">\tat com.aibaobei.chapter2.eg2.UserDemo.main(UserDemo.java:9)</span><br><span class=\"line\"></span><br><span class=\"line\">\"VM Thread\" os_prio=0 tid=0x00007f871806e000 nid=0xa runnable</span><br></pre></td></tr></table></figure>\n\n<p><strong>nid=0xa</strong> 为系统线程 ID<br>使用 JDK 提供的工具 <code>jstat</code> 查看 GC 情况</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jstat -gcutil &lt;pid&gt; 1000 10</span><br><span class=\"line\">S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT</span><br><span class=\"line\">0.00   0.00   0.00  75.07  59.09  59.60   3259    0.919  6517    7.715    8.635</span><br><span class=\"line\">0.00   0.00   0.00   0.08  59.09  59.60   3306    0.930  6611    7.822    8.752</span><br><span class=\"line\">0.00   0.00   0.00   0.08  59.09  59.60   3351    0.943  6701    7.924    8.867</span><br><span class=\"line\">0.00   0.00   0.00   0.08  59.09  59.60   3397    0.955  6793    8.029    8.984</span><br></pre></td></tr></table></figure>\n\n<p>使用 JDK 提供的 <code>jmap</code> 工具导出内存日志到 Eclipse mat工具进行查看</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 简单查看存活对象的大小数目</span><br><span class=\"line\">jmap -histo:live &lt;pid&gt; | more</span><br><span class=\"line\">// dump 内存</span><br><span class=\"line\">jmap -dump:live,format=b,file=problem.bin &lt;pid&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/pasted-49.png\" alt=\"upload successful\"></p>\n<p>主要有以下两种原因：</p>\n<ol>\n<li>代码中一次获取了大量的对象，导致内存溢出</li>\n<li>内存占用不高，但是 Full GC 次数还是比较多，此时可能是显示的 <code>System.gc()</code> 调用导致 GC 次数过多，这可以通过添加 <code>-XX:+DisableExplicitGC</code> 来禁用JVM对显示GC的响应</li>\n</ol>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>通过 <code>ps</code> 或 <code>top</code> 命令找出 CPU 过高的线程，将其线程 ID 转换为十六进制，然后在 <code>jstack</code> 日志中查看该线程信息，分为以下两种情况：</p>\n<ol>\n<li>如果是正常的用户线程，则通过该线程的堆栈信息查看其具体是在哪处用户代码处运行比较消耗 CPU</li>\n<li>如果该线程是 <strong>VM Thread</strong> 则通过 <code>jstat -gcutil &lt;pid&gt; &lt;period&gt; &lt;times&gt;</code> 命令监控当前系统的 GC 状况，然后通过 <code>jmap dump:format=b,file=&lt;filepath&gt; &lt;pid&gt;</code> 导出系统当前的内存数据，导出之后将内存情况放到 eclipse 的 mat 工具中进行分析即可得出内存中主要是什么对象比较消耗内存，进而可以处理相关代码</li>\n</ol>\n<blockquote>\n<p>参考链接:</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/baiye_xing/article/details/90483169\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/baiye_xing/article/details/90483169</a></li>\n<li><a href=\"https://my.oschina.net/zhangxufeng/blog/3017521\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/zhangxufeng/blog/3017521</a></li>\n<li><a href=\"https://www.cnblogs.com/youxin/p/11229071.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/youxin/p/11229071.html</a></li>\n<li><a href=\"https://www.javatang.com/archives/2017/10/19/33151873.html\" target=\"_blank\" rel=\"noopener\">JVM 故障分析及性能优化系列文章</a></li>\n</ul>\n</blockquote>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"/images/pasted-48.png","popularPost_tmp_gaData":{"updated":"Thu Oct 31 2019 18:03:37 GMT+0800 (GMT+08:00)","title":"Java 线上 CPU100% 排查思路","path":"2019/10/31/Java-线上-CPU100-排查思路/","eyeCatchImage":"/images/pasted-48.png","excerpt":null,"date":"2019-10-31T09:09:00.000Z","pv":0,"totalPV":0,"categories":"Collection","tags":["Java"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2054},{"title":"MySQL里面这五个非常非常有用的东西","date":"2017-04-08T10:02:04.000Z","_content":"MySQL是非常流行的关系型数据库，虽然拥有的SQL语法大部分是符合ANSI SQL标准的，但是它自身还是携带了很多优秀的、私有的语句和指示符，今天我们就来分析一下。\n### EXPLAIN\n难度指数：★ ★ ★ ★ ★\n推荐指数：★ ★ ★ ★ ★\n当我们网站或者接口访问频率越来越大，这时如果我们的相关SQL语句执行时间很长的话，就很容易造成网站或者接口响应慢的情况，那么使用explain语句，我们能够清楚的知道MySQL是怎么执行我们的SQL语句的，执行某个查询语句总共查询了多少条记录，使用了什么表以及多表的链接顺序是怎么样的，该查询使用了哪些索引等等信息，有了这些信息，我们能够根据多次执行和分析优化我们的数据库，该建立索引的建索引，该删除的索引就删除掉。\n### FOR UPDATE\n难度指数：★ ★ ☆ ☆ ☆\n推荐指数：★ ★ ★ ★ ★\n有时我们有这样的一种情况，就是需要将某个SELECT语句查询的行进行锁定，防止其他客户端修改，那么这个时候，我们可以使用这个指示符来完成。\n### DELAYED\n难度指数：★ ★ ☆ ☆ ☆\n推荐指数：★ ★ ★ ★ ★\n有时发现我们的产品的某个插入、更新操作不需要立即生效，也就是一些对读要求高、写要求不太高的应用，可以使用这个指示符，就是将这个插入或者修改后的数据不是立即写入到磁盘文件中去，而是等到MySQL数据库非常空闲的时候再进行写入的操作，从这里来看，这个指示符也算是一个小的优化性指示符。\n### SQL_CACHE\n难度指数：★ ★ ☆ ☆ ☆\n推荐指数：★ ★ ★ ★ ★\n有时我们的产品读操作非常多，修改频率比较低，那么这个时候我们能够在执行select查询的时候指定sql_cache这个指示符，这样该查询语句和相应的查询结果将被缓存起来，那么下次执行同样的查询语句时，如果数据没有发生改变，那么将直接返回这个缓存的结果给客户端，从这里来看，这个查询语句指示符主要用于一些特性应用场景的优化操作。\n### ON DUPLICATE KEY UPDATE\n难度指数：★ ★ ☆ ☆ ☆\n推荐指数：★ ★ ★ ★ ★\n我们知道，在MySQL中有一个特殊的语句就是Replace语句，就是当插入的时候，我们发现某个条件（这里需要注意的是，这里指的是唯一索引或主键）的数据已经存在了，那么这个时候就先删除这条数据，然后再插入新的数据，也就是先删除再插入，但是有时候我们仅仅需要的是，如果存在了仅仅修改某个字段的值，而不是删除再插入，那么这个时候可以使用ON DUPLICATE KEY UPDATE来完成。","source":"_posts/MySQL里面这五个非常非常有用的东西.md","raw":"---\ntitle: MySQL里面这五个非常非常有用的东西\ndate: 2017-04-08 18:02:04\ntags: Mysql\ncategories: Essay\n---\nMySQL是非常流行的关系型数据库，虽然拥有的SQL语法大部分是符合ANSI SQL标准的，但是它自身还是携带了很多优秀的、私有的语句和指示符，今天我们就来分析一下。\n### EXPLAIN\n难度指数：★ ★ ★ ★ ★\n推荐指数：★ ★ ★ ★ ★\n当我们网站或者接口访问频率越来越大，这时如果我们的相关SQL语句执行时间很长的话，就很容易造成网站或者接口响应慢的情况，那么使用explain语句，我们能够清楚的知道MySQL是怎么执行我们的SQL语句的，执行某个查询语句总共查询了多少条记录，使用了什么表以及多表的链接顺序是怎么样的，该查询使用了哪些索引等等信息，有了这些信息，我们能够根据多次执行和分析优化我们的数据库，该建立索引的建索引，该删除的索引就删除掉。\n### FOR UPDATE\n难度指数：★ ★ ☆ ☆ ☆\n推荐指数：★ ★ ★ ★ ★\n有时我们有这样的一种情况，就是需要将某个SELECT语句查询的行进行锁定，防止其他客户端修改，那么这个时候，我们可以使用这个指示符来完成。\n### DELAYED\n难度指数：★ ★ ☆ ☆ ☆\n推荐指数：★ ★ ★ ★ ★\n有时发现我们的产品的某个插入、更新操作不需要立即生效，也就是一些对读要求高、写要求不太高的应用，可以使用这个指示符，就是将这个插入或者修改后的数据不是立即写入到磁盘文件中去，而是等到MySQL数据库非常空闲的时候再进行写入的操作，从这里来看，这个指示符也算是一个小的优化性指示符。\n### SQL_CACHE\n难度指数：★ ★ ☆ ☆ ☆\n推荐指数：★ ★ ★ ★ ★\n有时我们的产品读操作非常多，修改频率比较低，那么这个时候我们能够在执行select查询的时候指定sql_cache这个指示符，这样该查询语句和相应的查询结果将被缓存起来，那么下次执行同样的查询语句时，如果数据没有发生改变，那么将直接返回这个缓存的结果给客户端，从这里来看，这个查询语句指示符主要用于一些特性应用场景的优化操作。\n### ON DUPLICATE KEY UPDATE\n难度指数：★ ★ ☆ ☆ ☆\n推荐指数：★ ★ ★ ★ ★\n我们知道，在MySQL中有一个特殊的语句就是Replace语句，就是当插入的时候，我们发现某个条件（这里需要注意的是，这里指的是唯一索引或主键）的数据已经存在了，那么这个时候就先删除这条数据，然后再插入新的数据，也就是先删除再插入，但是有时候我们仅仅需要的是，如果存在了仅仅修改某个字段的值，而不是删除再插入，那么这个时候可以使用ON DUPLICATE KEY UPDATE来完成。","slug":"MySQL里面这五个非常非常有用的东西","published":1,"updated":"2018-04-25T12:46:59.496Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2fj0npm0017q4vg92yjf1we","content":"<p>MySQL是非常流行的关系型数据库，虽然拥有的SQL语法大部分是符合ANSI SQL标准的，但是它自身还是携带了很多优秀的、私有的语句和指示符，今天我们就来分析一下。</p><h3 id=\"EXPLAIN\"><a href=\"#EXPLAIN\" class=\"headerlink\" title=\"EXPLAIN\"></a>EXPLAIN</h3><p>难度指数：★ ★ ★ ★ ★<br>推荐指数：★ ★ ★ ★ ★<br>当我们网站或者接口访问频率越来越大，这时如果我们的相关SQL语句执行时间很长的话，就很容易造成网站或者接口响应慢的情况，那么使用explain语句，我们能够清楚的知道MySQL是怎么执行我们的SQL语句的，执行某个查询语句总共查询了多少条记录，使用了什么表以及多表的链接顺序是怎么样的，该查询使用了哪些索引等等信息，有了这些信息，我们能够根据多次执行和分析优化我们的数据库，该建立索引的建索引，该删除的索引就删除掉。</p><a id=\"more\"></a>\n\n<h3 id=\"FOR-UPDATE\"><a href=\"#FOR-UPDATE\" class=\"headerlink\" title=\"FOR UPDATE\"></a>FOR UPDATE</h3><p>难度指数：★ ★ ☆ ☆ ☆<br>推荐指数：★ ★ ★ ★ ★<br>有时我们有这样的一种情况，就是需要将某个SELECT语句查询的行进行锁定，防止其他客户端修改，那么这个时候，我们可以使用这个指示符来完成。</p>\n<h3 id=\"DELAYED\"><a href=\"#DELAYED\" class=\"headerlink\" title=\"DELAYED\"></a>DELAYED</h3><p>难度指数：★ ★ ☆ ☆ ☆<br>推荐指数：★ ★ ★ ★ ★<br>有时发现我们的产品的某个插入、更新操作不需要立即生效，也就是一些对读要求高、写要求不太高的应用，可以使用这个指示符，就是将这个插入或者修改后的数据不是立即写入到磁盘文件中去，而是等到MySQL数据库非常空闲的时候再进行写入的操作，从这里来看，这个指示符也算是一个小的优化性指示符。</p>\n<h3 id=\"SQL-CACHE\"><a href=\"#SQL-CACHE\" class=\"headerlink\" title=\"SQL_CACHE\"></a>SQL_CACHE</h3><p>难度指数：★ ★ ☆ ☆ ☆<br>推荐指数：★ ★ ★ ★ ★<br>有时我们的产品读操作非常多，修改频率比较低，那么这个时候我们能够在执行select查询的时候指定sql_cache这个指示符，这样该查询语句和相应的查询结果将被缓存起来，那么下次执行同样的查询语句时，如果数据没有发生改变，那么将直接返回这个缓存的结果给客户端，从这里来看，这个查询语句指示符主要用于一些特性应用场景的优化操作。</p>\n<h3 id=\"ON-DUPLICATE-KEY-UPDATE\"><a href=\"#ON-DUPLICATE-KEY-UPDATE\" class=\"headerlink\" title=\"ON DUPLICATE KEY UPDATE\"></a>ON DUPLICATE KEY UPDATE</h3><p>难度指数：★ ★ ☆ ☆ ☆<br>推荐指数：★ ★ ★ ★ ★<br>我们知道，在MySQL中有一个特殊的语句就是Replace语句，就是当插入的时候，我们发现某个条件（这里需要注意的是，这里指的是唯一索引或主键）的数据已经存在了，那么这个时候就先删除这条数据，然后再插入新的数据，也就是先删除再插入，但是有时候我们仅仅需要的是，如果存在了仅仅修改某个字段的值，而不是删除再插入，那么这个时候可以使用ON DUPLICATE KEY UPDATE来完成。</p>\n","site":{"data":{}},"excerpt":"<p>MySQL是非常流行的关系型数据库，虽然拥有的SQL语法大部分是符合ANSI SQL标准的，但是它自身还是携带了很多优秀的、私有的语句和指示符，今天我们就来分析一下。</p><h3 id=\"EXPLAIN\"><a href=\"#EXPLAIN\" class=\"headerlink\" title=\"EXPLAIN\"></a>EXPLAIN</h3><p>难度指数：★ ★ ★ ★ ★<br>推荐指数：★ ★ ★ ★ ★<br>当我们网站或者接口访问频率越来越大，这时如果我们的相关SQL语句执行时间很长的话，就很容易造成网站或者接口响应慢的情况，那么使用explain语句，我们能够清楚的知道MySQL是怎么执行我们的SQL语句的，执行某个查询语句总共查询了多少条记录，使用了什么表以及多表的链接顺序是怎么样的，该查询使用了哪些索引等等信息，有了这些信息，我们能够根据多次执行和分析优化我们的数据库，该建立索引的建索引，该删除的索引就删除掉。</p>","more":"\n\n<h3 id=\"FOR-UPDATE\"><a href=\"#FOR-UPDATE\" class=\"headerlink\" title=\"FOR UPDATE\"></a>FOR UPDATE</h3><p>难度指数：★ ★ ☆ ☆ ☆<br>推荐指数：★ ★ ★ ★ ★<br>有时我们有这样的一种情况，就是需要将某个SELECT语句查询的行进行锁定，防止其他客户端修改，那么这个时候，我们可以使用这个指示符来完成。</p>\n<h3 id=\"DELAYED\"><a href=\"#DELAYED\" class=\"headerlink\" title=\"DELAYED\"></a>DELAYED</h3><p>难度指数：★ ★ ☆ ☆ ☆<br>推荐指数：★ ★ ★ ★ ★<br>有时发现我们的产品的某个插入、更新操作不需要立即生效，也就是一些对读要求高、写要求不太高的应用，可以使用这个指示符，就是将这个插入或者修改后的数据不是立即写入到磁盘文件中去，而是等到MySQL数据库非常空闲的时候再进行写入的操作，从这里来看，这个指示符也算是一个小的优化性指示符。</p>\n<h3 id=\"SQL-CACHE\"><a href=\"#SQL-CACHE\" class=\"headerlink\" title=\"SQL_CACHE\"></a>SQL_CACHE</h3><p>难度指数：★ ★ ☆ ☆ ☆<br>推荐指数：★ ★ ★ ★ ★<br>有时我们的产品读操作非常多，修改频率比较低，那么这个时候我们能够在执行select查询的时候指定sql_cache这个指示符，这样该查询语句和相应的查询结果将被缓存起来，那么下次执行同样的查询语句时，如果数据没有发生改变，那么将直接返回这个缓存的结果给客户端，从这里来看，这个查询语句指示符主要用于一些特性应用场景的优化操作。</p>\n<h3 id=\"ON-DUPLICATE-KEY-UPDATE\"><a href=\"#ON-DUPLICATE-KEY-UPDATE\" class=\"headerlink\" title=\"ON DUPLICATE KEY UPDATE\"></a>ON DUPLICATE KEY UPDATE</h3><p>难度指数：★ ★ ☆ ☆ ☆<br>推荐指数：★ ★ ★ ★ ★<br>我们知道，在MySQL中有一个特殊的语句就是Replace语句，就是当插入的时候，我们发现某个条件（这里需要注意的是，这里指的是唯一索引或主键）的数据已经存在了，那么这个时候就先删除这条数据，然后再插入新的数据，也就是先删除再插入，但是有时候我们仅仅需要的是，如果存在了仅仅修改某个字段的值，而不是删除再插入，那么这个时候可以使用ON DUPLICATE KEY UPDATE来完成。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Apr 25 2018 20:46:59 GMT+0800 (GMT+08:00)","title":"MySQL里面这五个非常非常有用的东西","path":"2017/04/08/MySQL里面这五个非常非常有用的东西/","eyeCatchImage":null,"excerpt":null,"date":"2017-04-08T10:02:04.000Z","pv":0,"totalPV":0,"categories":"Essay","tags":["Mysql"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1003},{"title":"MyCLI：一个支持自动补全和语法高亮的MySQL客户端","date":"2017-06-07T09:24:06.000Z","_content":"![upload successful](/images/pasted-19.png)\nMyCLI 是一个易于使用的命令行客户端，可用于受欢迎的数据库管理系统 MySQL、MariaDB 和 Percona，支持自动补全和语法高亮。它是使用 prompt_toolkit 库写的，需要 Python 2.7、3.3、3.4、3.5 和 3.6 的支持。MyCLI 还支持通过 SSL 安全连接到 MySQL 服务器。\n\n## MyCLI 的特性\n\n- 当你第一次使用它的时候，将会自动创建一个文件 ~/.myclirc。\n- 当输入 SQL 的关键词和数据库中的表、视图和列时，支持自动补全。\n- 默认情况下也支持智能补全，能根据上下文的相关性提供补全建议。\n\n比如：\n\n```mysql\nSELECT * FROM <Tab> - 这将显示出数据库中的表名。\nSELECT * FROM users WHERE <Tab> - 这将简单的显示出列名称。\n```\n\n- 通过使用 Pygents 支持语法高亮\n- 支持 SSL 连接\n- 提供多行查询支持\n- 它可以将每一个查询和输出记录到一个文件中（默认情况下禁用）。\n- 允许保存收藏一个查询（使用 \\fs 别名 保存一个查询，并可使用 \\f 别名 运行它）。\n- 支持 SQL 语句执行和表查询计时\n- 以更吸引人的方式打印表格数据\n\n## 如何在 Linux 上为 MySQL 和 MariaDB 安装 MyCLI\n\n在 Debian/Ubuntu 发行版上，你可以很容易的像下面这样使用 apt 命令 来安装 MyCLI 包：\n\n```sh\n$ sudo apt-get update\n$ sudo apt-get install mycli\n```\n\n同样，在 Fedora 22+ 上也有 MyCLI 的可用包，你可以像下面这样使用 dnf 命令 来安装它：\n\n```sh\n$ sudo dnf install mycli\n```\n\n对于其他 Linux 发行版，比如 RHEL/CentOS，你需要使用 Python 的 pip 工具来安装 MyCLI。首先，使用下面的命令来安装 pip：\n\n```sh\n$ sudo yum install pip\n```\n\n安装好 pip 以后，你可以像下面这样安装 MyCLI：\n\n```sh\n$ sudo pip install mycli\n```\n\n## 在 Linux 中如何使用 MyCLI 连接 MySQL 和 MariaDB\n\n安装好 MyCLI 以后，你可以像下面这样使用它：\n\n```sh\n$ mycli -u root -h localhost\n```\n\n## 自动补全\n\n对于关键词和 SQL 函数可以进行简单的自动补全：\n\n![upload successful](/images/pasted-20.png)\n\n## 智能补全\n\n当输入 FROM 关键词以后会进行表名称的补全：\n\n![upload successful](/images/pasted-21.png)\n\n## 别名支持\n\n当表的名称设置别名以后，也支持列名称的补全：\n\n![upload successful](/images/pasted-22.png)\n\n## 语法高亮\n\n支持 MySQL 语法高亮：\n\n![upload successful](/images/pasted-23.png)\n\n## 格式化 SQL 的输出\n\nMySQL 的输出会通过 less 命令[1] 进行格式化输出：\n\n![upload successful](/images/pasted-24.png)\n\n要登录 MySQL 并同时选择数据库，你可以使用和下面类似的命令：\n\n```sh\n$ mycli local_database\n$ mycli -h localhost -u root app_db\n$ mycli mysql://amjith@localhost:3306/django_poll\n```\n\n更多使用选项，请输入：\n\n```sh\n$ mycli --help\n```\n\n> MyCLI 主页： [http://mycli.net/index](http://mycli.net/index)","source":"_posts/MyCLI：一个支持自动补全和语法高亮的MySQL客户端.md","raw":"---\ntitle: MyCLI：一个支持自动补全和语法高亮的MySQL客户端\ntags:\n  - Mysql\n  - Shell\ncategories: Collection\ndate: 2017-06-07 17:24:06\n---\n![upload successful](/images/pasted-19.png)\nMyCLI 是一个易于使用的命令行客户端，可用于受欢迎的数据库管理系统 MySQL、MariaDB 和 Percona，支持自动补全和语法高亮。它是使用 prompt_toolkit 库写的，需要 Python 2.7、3.3、3.4、3.5 和 3.6 的支持。MyCLI 还支持通过 SSL 安全连接到 MySQL 服务器。\n\n## MyCLI 的特性\n\n- 当你第一次使用它的时候，将会自动创建一个文件 ~/.myclirc。\n- 当输入 SQL 的关键词和数据库中的表、视图和列时，支持自动补全。\n- 默认情况下也支持智能补全，能根据上下文的相关性提供补全建议。\n\n比如：\n\n```mysql\nSELECT * FROM <Tab> - 这将显示出数据库中的表名。\nSELECT * FROM users WHERE <Tab> - 这将简单的显示出列名称。\n```\n\n- 通过使用 Pygents 支持语法高亮\n- 支持 SSL 连接\n- 提供多行查询支持\n- 它可以将每一个查询和输出记录到一个文件中（默认情况下禁用）。\n- 允许保存收藏一个查询（使用 \\fs 别名 保存一个查询，并可使用 \\f 别名 运行它）。\n- 支持 SQL 语句执行和表查询计时\n- 以更吸引人的方式打印表格数据\n\n## 如何在 Linux 上为 MySQL 和 MariaDB 安装 MyCLI\n\n在 Debian/Ubuntu 发行版上，你可以很容易的像下面这样使用 apt 命令 来安装 MyCLI 包：\n\n```sh\n$ sudo apt-get update\n$ sudo apt-get install mycli\n```\n\n同样，在 Fedora 22+ 上也有 MyCLI 的可用包，你可以像下面这样使用 dnf 命令 来安装它：\n\n```sh\n$ sudo dnf install mycli\n```\n\n对于其他 Linux 发行版，比如 RHEL/CentOS，你需要使用 Python 的 pip 工具来安装 MyCLI。首先，使用下面的命令来安装 pip：\n\n```sh\n$ sudo yum install pip\n```\n\n安装好 pip 以后，你可以像下面这样安装 MyCLI：\n\n```sh\n$ sudo pip install mycli\n```\n\n## 在 Linux 中如何使用 MyCLI 连接 MySQL 和 MariaDB\n\n安装好 MyCLI 以后，你可以像下面这样使用它：\n\n```sh\n$ mycli -u root -h localhost\n```\n\n## 自动补全\n\n对于关键词和 SQL 函数可以进行简单的自动补全：\n\n![upload successful](/images/pasted-20.png)\n\n## 智能补全\n\n当输入 FROM 关键词以后会进行表名称的补全：\n\n![upload successful](/images/pasted-21.png)\n\n## 别名支持\n\n当表的名称设置别名以后，也支持列名称的补全：\n\n![upload successful](/images/pasted-22.png)\n\n## 语法高亮\n\n支持 MySQL 语法高亮：\n\n![upload successful](/images/pasted-23.png)\n\n## 格式化 SQL 的输出\n\nMySQL 的输出会通过 less 命令[1] 进行格式化输出：\n\n![upload successful](/images/pasted-24.png)\n\n要登录 MySQL 并同时选择数据库，你可以使用和下面类似的命令：\n\n```sh\n$ mycli local_database\n$ mycli -h localhost -u root app_db\n$ mycli mysql://amjith@localhost:3306/django_poll\n```\n\n更多使用选项，请输入：\n\n```sh\n$ mycli --help\n```\n\n> MyCLI 主页： [http://mycli.net/index](http://mycli.net/index)","slug":"MyCLI：一个支持自动补全和语法高亮的MySQL客户端","published":1,"updated":"2018-04-25T12:46:59.496Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2fj0npp001cq4vgduxg13yj","content":"<p><img src=\"/images/pasted-19.png\" alt=\"upload successful\"><br>MyCLI 是一个易于使用的命令行客户端，可用于受欢迎的数据库管理系统 MySQL、MariaDB 和 Percona，支持自动补全和语法高亮。它是使用 prompt_toolkit 库写的，需要 Python 2.7、3.3、3.4、3.5 和 3.6 的支持。MyCLI 还支持通过 SSL 安全连接到 MySQL 服务器。</p><a id=\"more\"></a>\n<h2 id=\"MyCLI-的特性\"><a href=\"#MyCLI-的特性\" class=\"headerlink\" title=\"MyCLI 的特性\"></a>MyCLI 的特性</h2><ul>\n<li>当你第一次使用它的时候，将会自动创建一个文件 ~/.myclirc。</li>\n<li>当输入 SQL 的关键词和数据库中的表、视图和列时，支持自动补全。</li>\n<li>默认情况下也支持智能补全，能根据上下文的相关性提供补全建议。</li>\n</ul>\n<p>比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM &lt;Tab&gt; - 这将显示出数据库中的表名。</span><br><span class=\"line\">SELECT * FROM users WHERE &lt;Tab&gt; - 这将简单的显示出列名称。</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过使用 Pygents 支持语法高亮</li>\n<li>支持 SSL 连接</li>\n<li>提供多行查询支持</li>\n<li>它可以将每一个查询和输出记录到一个文件中（默认情况下禁用）。</li>\n<li>允许保存收藏一个查询（使用 \\fs 别名 保存一个查询，并可使用 \\f 别名 运行它）。</li>\n<li>支持 SQL 语句执行和表查询计时</li>\n<li>以更吸引人的方式打印表格数据</li>\n</ul>\n<h2 id=\"如何在-Linux-上为-MySQL-和-MariaDB-安装-MyCLI\"><a href=\"#如何在-Linux-上为-MySQL-和-MariaDB-安装-MyCLI\" class=\"headerlink\" title=\"如何在 Linux 上为 MySQL 和 MariaDB 安装 MyCLI\"></a>如何在 Linux 上为 MySQL 和 MariaDB 安装 MyCLI</h2><p>在 Debian/Ubuntu 发行版上，你可以很容易的像下面这样使用 apt 命令 来安装 MyCLI 包：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get install mycli</span><br></pre></td></tr></table></figure>\n\n<p>同样，在 Fedora 22+ 上也有 MyCLI 的可用包，你可以像下面这样使用 dnf 命令 来安装它：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo dnf install mycli</span><br></pre></td></tr></table></figure>\n\n<p>对于其他 Linux 发行版，比如 RHEL/CentOS，你需要使用 Python 的 pip 工具来安装 MyCLI。首先，使用下面的命令来安装 pip：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install pip</span><br></pre></td></tr></table></figure>\n\n<p>安装好 pip 以后，你可以像下面这样安装 MyCLI：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pip install mycli</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在-Linux-中如何使用-MyCLI-连接-MySQL-和-MariaDB\"><a href=\"#在-Linux-中如何使用-MyCLI-连接-MySQL-和-MariaDB\" class=\"headerlink\" title=\"在 Linux 中如何使用 MyCLI 连接 MySQL 和 MariaDB\"></a>在 Linux 中如何使用 MyCLI 连接 MySQL 和 MariaDB</h2><p>安装好 MyCLI 以后，你可以像下面这样使用它：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mycli -u root -h localhost</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自动补全\"><a href=\"#自动补全\" class=\"headerlink\" title=\"自动补全\"></a>自动补全</h2><p>对于关键词和 SQL 函数可以进行简单的自动补全：</p>\n<p><img src=\"/images/pasted-20.png\" alt=\"upload successful\"></p>\n<h2 id=\"智能补全\"><a href=\"#智能补全\" class=\"headerlink\" title=\"智能补全\"></a>智能补全</h2><p>当输入 FROM 关键词以后会进行表名称的补全：</p>\n<p><img src=\"/images/pasted-21.png\" alt=\"upload successful\"></p>\n<h2 id=\"别名支持\"><a href=\"#别名支持\" class=\"headerlink\" title=\"别名支持\"></a>别名支持</h2><p>当表的名称设置别名以后，也支持列名称的补全：</p>\n<p><img src=\"/images/pasted-22.png\" alt=\"upload successful\"></p>\n<h2 id=\"语法高亮\"><a href=\"#语法高亮\" class=\"headerlink\" title=\"语法高亮\"></a>语法高亮</h2><p>支持 MySQL 语法高亮：</p>\n<p><img src=\"/images/pasted-23.png\" alt=\"upload successful\"></p>\n<h2 id=\"格式化-SQL-的输出\"><a href=\"#格式化-SQL-的输出\" class=\"headerlink\" title=\"格式化 SQL 的输出\"></a>格式化 SQL 的输出</h2><p>MySQL 的输出会通过 less 命令[1] 进行格式化输出：</p>\n<p><img src=\"/images/pasted-24.png\" alt=\"upload successful\"></p>\n<p>要登录 MySQL 并同时选择数据库，你可以使用和下面类似的命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mycli local_database</span><br><span class=\"line\">$ mycli -h localhost -u root app_db</span><br><span class=\"line\">$ mycli mysql://amjith@localhost:3306/django_poll</span><br></pre></td></tr></table></figure>\n\n<p>更多使用选项，请输入：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mycli --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>MyCLI 主页： <a href=\"http://mycli.net/index\" target=\"_blank\" rel=\"noopener\">http://mycli.net/index</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/pasted-19.png\" alt=\"upload successful\"><br>MyCLI 是一个易于使用的命令行客户端，可用于受欢迎的数据库管理系统 MySQL、MariaDB 和 Percona，支持自动补全和语法高亮。它是使用 prompt_toolkit 库写的，需要 Python 2.7、3.3、3.4、3.5 和 3.6 的支持。MyCLI 还支持通过 SSL 安全连接到 MySQL 服务器。</p>","more":"\n<h2 id=\"MyCLI-的特性\"><a href=\"#MyCLI-的特性\" class=\"headerlink\" title=\"MyCLI 的特性\"></a>MyCLI 的特性</h2><ul>\n<li>当你第一次使用它的时候，将会自动创建一个文件 ~/.myclirc。</li>\n<li>当输入 SQL 的关键词和数据库中的表、视图和列时，支持自动补全。</li>\n<li>默认情况下也支持智能补全，能根据上下文的相关性提供补全建议。</li>\n</ul>\n<p>比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM &lt;Tab&gt; - 这将显示出数据库中的表名。</span><br><span class=\"line\">SELECT * FROM users WHERE &lt;Tab&gt; - 这将简单的显示出列名称。</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过使用 Pygents 支持语法高亮</li>\n<li>支持 SSL 连接</li>\n<li>提供多行查询支持</li>\n<li>它可以将每一个查询和输出记录到一个文件中（默认情况下禁用）。</li>\n<li>允许保存收藏一个查询（使用 \\fs 别名 保存一个查询，并可使用 \\f 别名 运行它）。</li>\n<li>支持 SQL 语句执行和表查询计时</li>\n<li>以更吸引人的方式打印表格数据</li>\n</ul>\n<h2 id=\"如何在-Linux-上为-MySQL-和-MariaDB-安装-MyCLI\"><a href=\"#如何在-Linux-上为-MySQL-和-MariaDB-安装-MyCLI\" class=\"headerlink\" title=\"如何在 Linux 上为 MySQL 和 MariaDB 安装 MyCLI\"></a>如何在 Linux 上为 MySQL 和 MariaDB 安装 MyCLI</h2><p>在 Debian/Ubuntu 发行版上，你可以很容易的像下面这样使用 apt 命令 来安装 MyCLI 包：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get install mycli</span><br></pre></td></tr></table></figure>\n\n<p>同样，在 Fedora 22+ 上也有 MyCLI 的可用包，你可以像下面这样使用 dnf 命令 来安装它：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo dnf install mycli</span><br></pre></td></tr></table></figure>\n\n<p>对于其他 Linux 发行版，比如 RHEL/CentOS，你需要使用 Python 的 pip 工具来安装 MyCLI。首先，使用下面的命令来安装 pip：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install pip</span><br></pre></td></tr></table></figure>\n\n<p>安装好 pip 以后，你可以像下面这样安装 MyCLI：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pip install mycli</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在-Linux-中如何使用-MyCLI-连接-MySQL-和-MariaDB\"><a href=\"#在-Linux-中如何使用-MyCLI-连接-MySQL-和-MariaDB\" class=\"headerlink\" title=\"在 Linux 中如何使用 MyCLI 连接 MySQL 和 MariaDB\"></a>在 Linux 中如何使用 MyCLI 连接 MySQL 和 MariaDB</h2><p>安装好 MyCLI 以后，你可以像下面这样使用它：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mycli -u root -h localhost</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自动补全\"><a href=\"#自动补全\" class=\"headerlink\" title=\"自动补全\"></a>自动补全</h2><p>对于关键词和 SQL 函数可以进行简单的自动补全：</p>\n<p><img src=\"/images/pasted-20.png\" alt=\"upload successful\"></p>\n<h2 id=\"智能补全\"><a href=\"#智能补全\" class=\"headerlink\" title=\"智能补全\"></a>智能补全</h2><p>当输入 FROM 关键词以后会进行表名称的补全：</p>\n<p><img src=\"/images/pasted-21.png\" alt=\"upload successful\"></p>\n<h2 id=\"别名支持\"><a href=\"#别名支持\" class=\"headerlink\" title=\"别名支持\"></a>别名支持</h2><p>当表的名称设置别名以后，也支持列名称的补全：</p>\n<p><img src=\"/images/pasted-22.png\" alt=\"upload successful\"></p>\n<h2 id=\"语法高亮\"><a href=\"#语法高亮\" class=\"headerlink\" title=\"语法高亮\"></a>语法高亮</h2><p>支持 MySQL 语法高亮：</p>\n<p><img src=\"/images/pasted-23.png\" alt=\"upload successful\"></p>\n<h2 id=\"格式化-SQL-的输出\"><a href=\"#格式化-SQL-的输出\" class=\"headerlink\" title=\"格式化 SQL 的输出\"></a>格式化 SQL 的输出</h2><p>MySQL 的输出会通过 less 命令[1] 进行格式化输出：</p>\n<p><img src=\"/images/pasted-24.png\" alt=\"upload successful\"></p>\n<p>要登录 MySQL 并同时选择数据库，你可以使用和下面类似的命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mycli local_database</span><br><span class=\"line\">$ mycli -h localhost -u root app_db</span><br><span class=\"line\">$ mycli mysql://amjith@localhost:3306/django_poll</span><br></pre></td></tr></table></figure>\n\n<p>更多使用选项，请输入：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mycli --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>MyCLI 主页： <a href=\"http://mycli.net/index\" target=\"_blank\" rel=\"noopener\">http://mycli.net/index</a></p>\n</blockquote>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"/images/pasted-19.png","popularPost_tmp_gaData":{"updated":"Wed Apr 25 2018 20:46:59 GMT+0800 (GMT+08:00)","title":"MyCLI：一个支持自动补全和语法高亮的MySQL客户端","path":"2017/06/07/MyCLI：一个支持自动补全和语法高亮的MySQL客户端/","eyeCatchImage":"/images/pasted-19.png","excerpt":null,"date":"2017-06-07T09:24:06.000Z","pv":0,"totalPV":0,"categories":"Collection","tags":["Mysql","Shell"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1183},{"title":"Springboot快速重启","date":"2017-08-09T15:15:52.000Z","_content":"![upload successful](/images/pasted-43.png)\n\n> 在平时的开发过程中，大家一定遇到在修改某个类或者配置文件后需要手动重启应用程序才会生效的情况，可能大家对这样的事情也感到比较的烦。其实Springboot为了使应用程序的开发比较方便快捷，提供了一些额外的工具（spring-boot-devtools），其中就包括快速重启。接下来，我们介绍如何使用spring-boot-devtools。\n\n## 如何使用\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-devtools</artifactId>\n    <!-- 防止传递 -->\n    <optional>true</optional>\n</dependency>\n```\n需要说明的是，运行完全打包应用程序时，开发人员工具会自动禁用。如果应用程序通过java -jar启动，会被认为是生产应用。\n\n## 默认属性\n\nSpringboot中一些包为了提升性能使用了缓存（例如，为了避免重复解析模板文件，模板引擎就缓存了编译之后的模板。此外，在访问静态文件时向响应中添加HTTP缓存头）。虽然缓存在生产环境中起到比较好的效果，但是在开发环境中却会起到反作用，它会让你不能及时看到你修改后的结果。基于这样的原因，spring-boot-devtools默认会禁用缓存。\n\n我们可以通过源码看出，spring-boot-devtools禁用了哪些缓存：\n```java\n@Order(Ordered.LOWEST_PRECEDENCE)\npublic class DevToolsPropertyDefaultsPostProcessor implements EnvironmentPostProcessor {\n\tprivate static final Map<String, Object> PROPERTIES;\n\tstatic {\n\t\tMap<String, Object> properties = new HashMap<>();\n\t\tproperties.put(\"spring.thymeleaf.cache\", \"false\");\n\t\tproperties.put(\"spring.freemarker.cache\", \"false\");\n\t\tproperties.put(\"spring.groovy.template.cache\", \"false\");\n\t\tproperties.put(\"spring.mustache.cache\", \"false\");\n\t\tproperties.put(\"server.session.persistent\", \"true\");\n\t\tproperties.put(\"spring.h2.console.enabled\", \"true\");\n\t\tproperties.put(\"spring.resources.cache-period\", \"0\");\n\t\tproperties.put(\"spring.resources.chain.cache\", \"false\");\n\t\tproperties.put(\"spring.template.provider.cache\", \"false\");\n\t\tproperties.put(\"spring.mvc.log-resolved-exception\", \"true\");\n\t\tproperties.put(\"server.servlet.jsp.init-parameters.development\", \"true\");\n\t\tproperties.put(\"spring.reactor.stacktrace-mode.enabled\", \"true\");\n\t\tPROPERTIES = Collections.unmodifiableMap(properties);\n\t}\n    // ...\n}\n```\n你同时也可以在application.properties(yml)中通过上述的属性设置是否支持缓存。\n\n## 自动重启触发条件\n\n使用了spring-boot-devtools的应用程序在classpath上的文件发生变化时，重启应用程序。默认情况下，静态文件的修改是不会触发重启应用程序的，但是会触发live reload。\n\n你可以通过\n```yaml\nspring:\n  devtools:\n    restart:\n      exclude: static/**\n      additional-exclude: static/**,public/**\n```\n来排除触发重启的文件。另外，当需要做到对不在classpath中文件进行修改时也触发重新启动，你可以通过spring.devtools.restart.additional-paths配置文件来将不在classpath中的文件夹路径加入到监控中，配合spring.devtools.restart.exclude来判断文件修改时是否重启。\n\n## 自动重启为什么会快\n\nSpringboot的自动重启技术是通过两个类加载器完成的，对于那些不会改变的类（比如第三方包）被加载到基础类加载器中，对于你正在开发的类被加载到重启的类加载器中。当应用程序重启时，重新启动类加载器将被丢弃，并创建一个新的类加载器。这就是为什么自动重启比冷启动要快的原因。\n\n如果想重新加载基础类加载器中的jar包，可以新建一个META-INF/spring-devtools.properties,在这个文件中可以定义以restart.include.和restart.exclude.开头的属性来设置需要重新加载和不需要重新加载的jar\n```java\nrestart.exclude.toplinecommonlibs=/topline-common-[\\w-]+.jar\nrestart.include.toplinecommon=/topline-myproj-[\\w-]+.jar\n```\n\n## 如何禁用\n\n可以在application.properties(yml)中配置spring.devtools.restart.enable=false来禁用自动重启。\n```yaml\nspring:\n  devtools:\n    restart:\n      enable: false\n```\n\n> [官方文档 https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html](https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html)","source":"_posts/Springboot快速重启.md","raw":"---\ntitle: Springboot快速重启\ntags:\n  - Java\n  - Spring\n  - Spring Boot\ncategories:\n  - Collection\ndate: 2017-08-09 23:15:52\n---\n![upload successful](/images/pasted-43.png)\n\n> 在平时的开发过程中，大家一定遇到在修改某个类或者配置文件后需要手动重启应用程序才会生效的情况，可能大家对这样的事情也感到比较的烦。其实Springboot为了使应用程序的开发比较方便快捷，提供了一些额外的工具（spring-boot-devtools），其中就包括快速重启。接下来，我们介绍如何使用spring-boot-devtools。\n\n## 如何使用\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-devtools</artifactId>\n    <!-- 防止传递 -->\n    <optional>true</optional>\n</dependency>\n```\n需要说明的是，运行完全打包应用程序时，开发人员工具会自动禁用。如果应用程序通过java -jar启动，会被认为是生产应用。\n\n## 默认属性\n\nSpringboot中一些包为了提升性能使用了缓存（例如，为了避免重复解析模板文件，模板引擎就缓存了编译之后的模板。此外，在访问静态文件时向响应中添加HTTP缓存头）。虽然缓存在生产环境中起到比较好的效果，但是在开发环境中却会起到反作用，它会让你不能及时看到你修改后的结果。基于这样的原因，spring-boot-devtools默认会禁用缓存。\n\n我们可以通过源码看出，spring-boot-devtools禁用了哪些缓存：\n```java\n@Order(Ordered.LOWEST_PRECEDENCE)\npublic class DevToolsPropertyDefaultsPostProcessor implements EnvironmentPostProcessor {\n\tprivate static final Map<String, Object> PROPERTIES;\n\tstatic {\n\t\tMap<String, Object> properties = new HashMap<>();\n\t\tproperties.put(\"spring.thymeleaf.cache\", \"false\");\n\t\tproperties.put(\"spring.freemarker.cache\", \"false\");\n\t\tproperties.put(\"spring.groovy.template.cache\", \"false\");\n\t\tproperties.put(\"spring.mustache.cache\", \"false\");\n\t\tproperties.put(\"server.session.persistent\", \"true\");\n\t\tproperties.put(\"spring.h2.console.enabled\", \"true\");\n\t\tproperties.put(\"spring.resources.cache-period\", \"0\");\n\t\tproperties.put(\"spring.resources.chain.cache\", \"false\");\n\t\tproperties.put(\"spring.template.provider.cache\", \"false\");\n\t\tproperties.put(\"spring.mvc.log-resolved-exception\", \"true\");\n\t\tproperties.put(\"server.servlet.jsp.init-parameters.development\", \"true\");\n\t\tproperties.put(\"spring.reactor.stacktrace-mode.enabled\", \"true\");\n\t\tPROPERTIES = Collections.unmodifiableMap(properties);\n\t}\n    // ...\n}\n```\n你同时也可以在application.properties(yml)中通过上述的属性设置是否支持缓存。\n\n## 自动重启触发条件\n\n使用了spring-boot-devtools的应用程序在classpath上的文件发生变化时，重启应用程序。默认情况下，静态文件的修改是不会触发重启应用程序的，但是会触发live reload。\n\n你可以通过\n```yaml\nspring:\n  devtools:\n    restart:\n      exclude: static/**\n      additional-exclude: static/**,public/**\n```\n来排除触发重启的文件。另外，当需要做到对不在classpath中文件进行修改时也触发重新启动，你可以通过spring.devtools.restart.additional-paths配置文件来将不在classpath中的文件夹路径加入到监控中，配合spring.devtools.restart.exclude来判断文件修改时是否重启。\n\n## 自动重启为什么会快\n\nSpringboot的自动重启技术是通过两个类加载器完成的，对于那些不会改变的类（比如第三方包）被加载到基础类加载器中，对于你正在开发的类被加载到重启的类加载器中。当应用程序重启时，重新启动类加载器将被丢弃，并创建一个新的类加载器。这就是为什么自动重启比冷启动要快的原因。\n\n如果想重新加载基础类加载器中的jar包，可以新建一个META-INF/spring-devtools.properties,在这个文件中可以定义以restart.include.和restart.exclude.开头的属性来设置需要重新加载和不需要重新加载的jar\n```java\nrestart.exclude.toplinecommonlibs=/topline-common-[\\w-]+.jar\nrestart.include.toplinecommon=/topline-myproj-[\\w-]+.jar\n```\n\n## 如何禁用\n\n可以在application.properties(yml)中配置spring.devtools.restart.enable=false来禁用自动重启。\n```yaml\nspring:\n  devtools:\n    restart:\n      enable: false\n```\n\n> [官方文档 https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html](https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html)","slug":"Springboot快速重启","published":1,"updated":"2018-04-25T12:46:59.498Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2fj0npu001fq4vgaik7a2ii","content":"<p><img src=\"/images/pasted-43.png\" alt=\"upload successful\"></p><blockquote>\n<p>在平时的开发过程中，大家一定遇到在修改某个类或者配置文件后需要手动重启应用程序才会生效的情况，可能大家对这样的事情也感到比较的烦。其实Springboot为了使应用程序的开发比较方便快捷，提供了一些额外的工具（spring-boot-devtools），其中就包括快速重启。接下来，我们介绍如何使用spring-boot-devtools。</p>\n</blockquote><a id=\"more\"></a>\n\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-devtools<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 防止传递 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>需要说明的是，运行完全打包应用程序时，开发人员工具会自动禁用。如果应用程序通过java -jar启动，会被认为是生产应用。</p>\n<h2 id=\"默认属性\"><a href=\"#默认属性\" class=\"headerlink\" title=\"默认属性\"></a>默认属性</h2><p>Springboot中一些包为了提升性能使用了缓存（例如，为了避免重复解析模板文件，模板引擎就缓存了编译之后的模板。此外，在访问静态文件时向响应中添加HTTP缓存头）。虽然缓存在生产环境中起到比较好的效果，但是在开发环境中却会起到反作用，它会让你不能及时看到你修改后的结果。基于这样的原因，spring-boot-devtools默认会禁用缓存。</p>\n<p>我们可以通过源码看出，spring-boot-devtools禁用了哪些缓存：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Order</span>(Ordered.LOWEST_PRECEDENCE)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DevToolsPropertyDefaultsPostProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title\">EnvironmentPostProcessor</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;String, Object&gt; PROPERTIES;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\tMap&lt;String, Object&gt; properties = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">\t\tproperties.put(<span class=\"string\">\"spring.thymeleaf.cache\"</span>, <span class=\"string\">\"false\"</span>);</span><br><span class=\"line\">\t\tproperties.put(<span class=\"string\">\"spring.freemarker.cache\"</span>, <span class=\"string\">\"false\"</span>);</span><br><span class=\"line\">\t\tproperties.put(<span class=\"string\">\"spring.groovy.template.cache\"</span>, <span class=\"string\">\"false\"</span>);</span><br><span class=\"line\">\t\tproperties.put(<span class=\"string\">\"spring.mustache.cache\"</span>, <span class=\"string\">\"false\"</span>);</span><br><span class=\"line\">\t\tproperties.put(<span class=\"string\">\"server.session.persistent\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">\t\tproperties.put(<span class=\"string\">\"spring.h2.console.enabled\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">\t\tproperties.put(<span class=\"string\">\"spring.resources.cache-period\"</span>, <span class=\"string\">\"0\"</span>);</span><br><span class=\"line\">\t\tproperties.put(<span class=\"string\">\"spring.resources.chain.cache\"</span>, <span class=\"string\">\"false\"</span>);</span><br><span class=\"line\">\t\tproperties.put(<span class=\"string\">\"spring.template.provider.cache\"</span>, <span class=\"string\">\"false\"</span>);</span><br><span class=\"line\">\t\tproperties.put(<span class=\"string\">\"spring.mvc.log-resolved-exception\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">\t\tproperties.put(<span class=\"string\">\"server.servlet.jsp.init-parameters.development\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">\t\tproperties.put(<span class=\"string\">\"spring.reactor.stacktrace-mode.enabled\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">\t\tPROPERTIES = Collections.unmodifiableMap(properties);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你同时也可以在application.properties(yml)中通过上述的属性设置是否支持缓存。</p>\n<h2 id=\"自动重启触发条件\"><a href=\"#自动重启触发条件\" class=\"headerlink\" title=\"自动重启触发条件\"></a>自动重启触发条件</h2><p>使用了spring-boot-devtools的应用程序在classpath上的文件发生变化时，重启应用程序。默认情况下，静态文件的修改是不会触发重启应用程序的，但是会触发live reload。</p>\n<p>你可以通过</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  devtools:</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span></span><br><span class=\"line\"><span class=\"attr\">      exclude:</span> <span class=\"string\">static/**</span></span><br><span class=\"line\"><span class=\"attr\">      additional-exclude:</span> <span class=\"string\">static/**,public/**</span></span><br></pre></td></tr></table></figure>\n<p>来排除触发重启的文件。另外，当需要做到对不在classpath中文件进行修改时也触发重新启动，你可以通过spring.devtools.restart.additional-paths配置文件来将不在classpath中的文件夹路径加入到监控中，配合spring.devtools.restart.exclude来判断文件修改时是否重启。</p>\n<h2 id=\"自动重启为什么会快\"><a href=\"#自动重启为什么会快\" class=\"headerlink\" title=\"自动重启为什么会快\"></a>自动重启为什么会快</h2><p>Springboot的自动重启技术是通过两个类加载器完成的，对于那些不会改变的类（比如第三方包）被加载到基础类加载器中，对于你正在开发的类被加载到重启的类加载器中。当应用程序重启时，重新启动类加载器将被丢弃，并创建一个新的类加载器。这就是为什么自动重启比冷启动要快的原因。</p>\n<p>如果想重新加载基础类加载器中的jar包，可以新建一个META-INF/spring-devtools.properties,在这个文件中可以定义以restart.include.和restart.exclude.开头的属性来设置需要重新加载和不需要重新加载的jar</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">restart.exclude.toplinecommonlibs=/topline-common-[\\w-]+.jar</span><br><span class=\"line\">restart.include.toplinecommon=/topline-myproj-[\\w-]+.jar</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何禁用\"><a href=\"#如何禁用\" class=\"headerlink\" title=\"如何禁用\"></a>如何禁用</h2><p>可以在application.properties(yml)中配置spring.devtools.restart.enable=false来禁用自动重启。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  devtools:</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span></span><br><span class=\"line\"><span class=\"attr\">      enable:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html\" target=\"_blank\" rel=\"noopener\">官方文档 https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/pasted-43.png\" alt=\"upload successful\"></p><blockquote>\n<p>在平时的开发过程中，大家一定遇到在修改某个类或者配置文件后需要手动重启应用程序才会生效的情况，可能大家对这样的事情也感到比较的烦。其实Springboot为了使应用程序的开发比较方便快捷，提供了一些额外的工具（spring-boot-devtools），其中就包括快速重启。接下来，我们介绍如何使用spring-boot-devtools。</p>\n</blockquote>","more":"\n\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-devtools<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 防止传递 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>需要说明的是，运行完全打包应用程序时，开发人员工具会自动禁用。如果应用程序通过java -jar启动，会被认为是生产应用。</p>\n<h2 id=\"默认属性\"><a href=\"#默认属性\" class=\"headerlink\" title=\"默认属性\"></a>默认属性</h2><p>Springboot中一些包为了提升性能使用了缓存（例如，为了避免重复解析模板文件，模板引擎就缓存了编译之后的模板。此外，在访问静态文件时向响应中添加HTTP缓存头）。虽然缓存在生产环境中起到比较好的效果，但是在开发环境中却会起到反作用，它会让你不能及时看到你修改后的结果。基于这样的原因，spring-boot-devtools默认会禁用缓存。</p>\n<p>我们可以通过源码看出，spring-boot-devtools禁用了哪些缓存：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Order</span>(Ordered.LOWEST_PRECEDENCE)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DevToolsPropertyDefaultsPostProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title\">EnvironmentPostProcessor</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;String, Object&gt; PROPERTIES;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\tMap&lt;String, Object&gt; properties = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">\t\tproperties.put(<span class=\"string\">\"spring.thymeleaf.cache\"</span>, <span class=\"string\">\"false\"</span>);</span><br><span class=\"line\">\t\tproperties.put(<span class=\"string\">\"spring.freemarker.cache\"</span>, <span class=\"string\">\"false\"</span>);</span><br><span class=\"line\">\t\tproperties.put(<span class=\"string\">\"spring.groovy.template.cache\"</span>, <span class=\"string\">\"false\"</span>);</span><br><span class=\"line\">\t\tproperties.put(<span class=\"string\">\"spring.mustache.cache\"</span>, <span class=\"string\">\"false\"</span>);</span><br><span class=\"line\">\t\tproperties.put(<span class=\"string\">\"server.session.persistent\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">\t\tproperties.put(<span class=\"string\">\"spring.h2.console.enabled\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">\t\tproperties.put(<span class=\"string\">\"spring.resources.cache-period\"</span>, <span class=\"string\">\"0\"</span>);</span><br><span class=\"line\">\t\tproperties.put(<span class=\"string\">\"spring.resources.chain.cache\"</span>, <span class=\"string\">\"false\"</span>);</span><br><span class=\"line\">\t\tproperties.put(<span class=\"string\">\"spring.template.provider.cache\"</span>, <span class=\"string\">\"false\"</span>);</span><br><span class=\"line\">\t\tproperties.put(<span class=\"string\">\"spring.mvc.log-resolved-exception\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">\t\tproperties.put(<span class=\"string\">\"server.servlet.jsp.init-parameters.development\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">\t\tproperties.put(<span class=\"string\">\"spring.reactor.stacktrace-mode.enabled\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">\t\tPROPERTIES = Collections.unmodifiableMap(properties);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你同时也可以在application.properties(yml)中通过上述的属性设置是否支持缓存。</p>\n<h2 id=\"自动重启触发条件\"><a href=\"#自动重启触发条件\" class=\"headerlink\" title=\"自动重启触发条件\"></a>自动重启触发条件</h2><p>使用了spring-boot-devtools的应用程序在classpath上的文件发生变化时，重启应用程序。默认情况下，静态文件的修改是不会触发重启应用程序的，但是会触发live reload。</p>\n<p>你可以通过</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  devtools:</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span></span><br><span class=\"line\"><span class=\"attr\">      exclude:</span> <span class=\"string\">static/**</span></span><br><span class=\"line\"><span class=\"attr\">      additional-exclude:</span> <span class=\"string\">static/**,public/**</span></span><br></pre></td></tr></table></figure>\n<p>来排除触发重启的文件。另外，当需要做到对不在classpath中文件进行修改时也触发重新启动，你可以通过spring.devtools.restart.additional-paths配置文件来将不在classpath中的文件夹路径加入到监控中，配合spring.devtools.restart.exclude来判断文件修改时是否重启。</p>\n<h2 id=\"自动重启为什么会快\"><a href=\"#自动重启为什么会快\" class=\"headerlink\" title=\"自动重启为什么会快\"></a>自动重启为什么会快</h2><p>Springboot的自动重启技术是通过两个类加载器完成的，对于那些不会改变的类（比如第三方包）被加载到基础类加载器中，对于你正在开发的类被加载到重启的类加载器中。当应用程序重启时，重新启动类加载器将被丢弃，并创建一个新的类加载器。这就是为什么自动重启比冷启动要快的原因。</p>\n<p>如果想重新加载基础类加载器中的jar包，可以新建一个META-INF/spring-devtools.properties,在这个文件中可以定义以restart.include.和restart.exclude.开头的属性来设置需要重新加载和不需要重新加载的jar</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">restart.exclude.toplinecommonlibs=/topline-common-[\\w-]+.jar</span><br><span class=\"line\">restart.include.toplinecommon=/topline-myproj-[\\w-]+.jar</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何禁用\"><a href=\"#如何禁用\" class=\"headerlink\" title=\"如何禁用\"></a>如何禁用</h2><p>可以在application.properties(yml)中配置spring.devtools.restart.enable=false来禁用自动重启。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  devtools:</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span></span><br><span class=\"line\"><span class=\"attr\">      enable:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html\" target=\"_blank\" rel=\"noopener\">官方文档 https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html</a></p>\n</blockquote>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"/images/pasted-43.png","popularPost_tmp_gaData":{"updated":"Wed Apr 25 2018 20:46:59 GMT+0800 (GMT+08:00)","title":"Springboot快速重启","path":"2017/08/09/Springboot快速重启/","eyeCatchImage":"/images/pasted-43.png","excerpt":null,"date":"2017-08-09T15:15:52.000Z","pv":0,"totalPV":0,"categories":"Collection","tags":["Java","Spring","Spring Boot"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2686},{"title":"Sequences in MySQL","date":"2017-03-24T05:00:42.000Z","_content":"\nSequences in MySQL\nJanuary 26, 2006 by ronald\n\nOne piece of SQL functionality that doesn’t appear to have any consistency or an ANSI SQL Standard is the management of system generated sequential numbers, used for example in suggorate keys.\n\nMySQL uses AUTO_INCREMENT which serves the purposes adequately, however in my documenting of differences with Oracle in my upcoming MySQL Conference presentation “MySQL for Oracle Developers” there a number of key differences with Oracle’s SEQUENCE usage.\n\nMySQL AUTO_INCREMENT to Oracle SEQUENCE Differences\n\nAUTO_INCREMENT is limited to one column per table\nAUTO_INCREMENT must be assigned to a specific table.column (not allowing multi table use)\nAUTO_INCREMENT is INSERTed as a not specified column, or a value of NULL\nThe MaxDB Reserved Words list includes SEQUENCE for the CREATE SEQUENCE however I’ve never used MaxDB. Other popular open source products such as PostgreSQL and Ingres use sequences. Refer to the references section for more details.\n\nUsage\n\nThe following provides an example sytax usage within MySQL and Oracle.\n\nMySQL\n\n\n CREATE TABLE Movie(\nid           INT NOT NULL AUTO_INCREMENT,\nname     VARCHAR(60) NOT NULL,\nreleased YEAR NOT NULL,\nPRIMARY KEY (id)\n) ENGINE=InnoDB;\n\n\nINSERT INTO Movie (name,released) VALUES ('Gladiator',2000);\nINSERT INTO Movie (id,name,released) VALUES (NULL,'The Bourne Identity',1998);\n\nOracle\n\n\n CREATE TABLE Movie(\nid          INT NOT NULL,\nname     VARCHAR2(60) NOT NULL,\nreleased INT NOT NULL,\nPRIMARY KEY (id)\n);\nCREATE SEQUENCE MovieSeq;\n\n\nINSERT INTO Movie (id,name,released) VALUES (MovieSeq.NEXTVAL,'Gladiator',2000);\n\nYou can within Oracle use a Before Insert trigger to simulate handling of the MySQL Insert syntax. Note: Within Oracle you will require a SEQUENCE per table and a TRIGGER per table. Oracle supports multiple triggers of the same type per table (not sure if MySQL supports this).\n\n\n CREATE OR REPLACE TRIGGER BRI_MOVIE_TRG\nBEFORE INSERT ON Movie\nFOR EACH ROW\nBEGIN\n  SELECT MovieSeq.NEXTVAL INTO :new.id FROM DUAL;\nEND BRI_MOVIE_TRG;\n.\nRUN;\n\n\nINSERT INTO Movie (name,released) VALUES ('The Lion King',1994);\n\nOracle’s syntax uses the sequence name with .NEXTVAL or .CURVAL.\n\nFuture Directions\n\nI would like to see a SEQUENCE implementation with MySQL (whether official or unofficial). I’m sure some enterprising person in the community already has one. Database abstraction layer systems would also most likely have implementations. I liked the PostgreSQL Syntax for ease of use with the following commands.\n\nNEXTVAL(‘sequence’);\nCURRVAL(‘sequence’);\nSETVAL(‘sequence’,value);\nWanting something and doing something about it are two different things, so here is what I wiped together to demonstrate a possible implementation. It needs a lot more work in appropiate error handling. transaction management, testing and performance analysis, however it shows the options of one possible implementation.\n\ncurrval\n\n\n DROP TABLE IF EXISTS sequence;\nCREATE TABLE sequence (\nname              VARCHAR(50) NOT NULL,\ncurrent_value INT NOT NULL,\nincrement       INT NOT NULL DEFAULT 1,\nPRIMARY KEY (name)\n) ENGINE=InnoDB;\nINSERT INTO sequence VALUES ('MovieSeq',3,5);\nDROP FUNCTION IF EXISTS currval;\nDELIMITER $\nCREATE FUNCTION currval (seq_name VARCHAR(50))\nRETURNS INTEGER\nCONTAINS SQL\nBEGIN\n  DECLARE value INTEGER;\n  SET value = 0;\n  SELECT current_value INTO value\n  FROM sequence\n  WHERE name = seq_name;\n  RETURN value;\nEND$\nDELIMITER ;\n\nSome Testing:\n\n mysql> SELECT currval('MovieSeq');\n+---------------------+\n| currval('MovieSeq') |\n+---------------------+\n|                   3 |\n+---------------------+\n1 row in set (0.00 sec)\nmysql> SELECT currval('x');\n+--------------+\n| currval('x') |\n+--------------+\n|            0 |\n+--------------+\n1 row in set, 1 warning (0.00 sec)\nmysql> show warnings;\n+---------+------+------------------+\n| Level   | Code | Message          |\n+---------+------+------------------+\n| Warning | 1329 | No data to FETCH |\n+---------+------+------------------+\n1 row in set (0.00 sec)\n\nWhat was interesting was I originally used a cursor, as below, but the results for passing an invalid argument (basic boundary testing), returned a SQL error while the above implementation returned a more manageable warning.\n\n\n  DECLARE c CURSOR FOR\n    SELECT current_value FROM sequence\n    WHERE name = seq_name;\n  OPEN c;\n  FETCH c INTO value;\n\n\nmysql> select currval('x');\nERROR 1329 (02000): No data to FETCH\n\nIndeed the Apache Object Relational Bridge Sequence Manager section shows a very cool syntax for MSSQL.\n\nUPDATE TABLE SET @MAX_KEY = MAX_KEY = MAX_KEY + 1\n\nUPDATE table SET var = column = value which effectively allows you to eliminated the need for a seperate UPDATE and SELECT for this type of operation.\n\nnextval\n\n\n DROP FUNCTION IF EXISTS nextval;\nDELIMITER $\nCREATE FUNCTION nextval (seq_name VARCHAR(50))\nRETURNS INTEGER\nCONTAINS SQL\nBEGIN\n   UPDATE sequence\n   SET          current_value = current_value + increment\n   WHERE name = seq_name;\n   RETURN currval(seq_name);\nEND$\nDELIMITER ;\n\n\n mysql> select nextval('MovieSeq');\n+---------------------+\n| nextval('MovieSeq') |\n+---------------------+\n|                  15 |\n+---------------------+\n1 row in set (0.09 sec)\n\nmysql> select nextval('MovieSeq');\n+---------------------+\n| nextval('MovieSeq') |\n+---------------------+\n|                  20 |\n+---------------------+\n1 row in set (0.01 sec)\n\nmysql> select nextval('MovieSeq');\n+---------------------+\n| nextval('MovieSeq') |\n+---------------------+\n|                  25 |\n+---------------------+\n1 row in set (0.00 sec)\n\nsetval\n\n\n DROP FUNCTION IF EXISTS setval;\nDELIMITER $\nCREATE FUNCTION setval (seq_name VARCHAR(50), value INTEGER)\nRETURNS INTEGER\nCONTAINS SQL\nBEGIN\n   UPDATE sequence\n   SET          current_value = value\n   WHERE name = seq_name;\n   RETURN currval(seq_name);\nEND$\nDELIMITER ;\n\n\n mysql> select setval('MovieSeq',150);\n+------------------------+\n| setval('MovieSeq',150) |\n+------------------------+\n|                    150 |\n+------------------------+\n1 row in set (0.06 sec)\n\nmysql> select curval('MovieSeq');\n+---------------------+\n| currval('MovieSeq') |\n+---------------------+\n|                 150 |\n+---------------------+\n1 row in set (0.00 sec)\n\nmysql> select nextval('MovieSeq');\n+---------------------+\n| nextval('MovieSeq') |\n+---------------------+\n|                 155 |\n+---------------------+\n1 row in set (0.00 sec)\n\n\n","source":"_posts/Sequences-in-MySQL.md","raw":"---\ntitle: Sequences in MySQL\ndate: 2017-03-24 13:00:42\ntags: Mysql\ncategories: Essay\n---\n\nSequences in MySQL\nJanuary 26, 2006 by ronald\n\nOne piece of SQL functionality that doesn’t appear to have any consistency or an ANSI SQL Standard is the management of system generated sequential numbers, used for example in suggorate keys.\n\nMySQL uses AUTO_INCREMENT which serves the purposes adequately, however in my documenting of differences with Oracle in my upcoming MySQL Conference presentation “MySQL for Oracle Developers” there a number of key differences with Oracle’s SEQUENCE usage.\n\nMySQL AUTO_INCREMENT to Oracle SEQUENCE Differences\n\nAUTO_INCREMENT is limited to one column per table\nAUTO_INCREMENT must be assigned to a specific table.column (not allowing multi table use)\nAUTO_INCREMENT is INSERTed as a not specified column, or a value of NULL\nThe MaxDB Reserved Words list includes SEQUENCE for the CREATE SEQUENCE however I’ve never used MaxDB. Other popular open source products such as PostgreSQL and Ingres use sequences. Refer to the references section for more details.\n\nUsage\n\nThe following provides an example sytax usage within MySQL and Oracle.\n\nMySQL\n\n\n CREATE TABLE Movie(\nid           INT NOT NULL AUTO_INCREMENT,\nname     VARCHAR(60) NOT NULL,\nreleased YEAR NOT NULL,\nPRIMARY KEY (id)\n) ENGINE=InnoDB;\n\n\nINSERT INTO Movie (name,released) VALUES ('Gladiator',2000);\nINSERT INTO Movie (id,name,released) VALUES (NULL,'The Bourne Identity',1998);\n\nOracle\n\n\n CREATE TABLE Movie(\nid          INT NOT NULL,\nname     VARCHAR2(60) NOT NULL,\nreleased INT NOT NULL,\nPRIMARY KEY (id)\n);\nCREATE SEQUENCE MovieSeq;\n\n\nINSERT INTO Movie (id,name,released) VALUES (MovieSeq.NEXTVAL,'Gladiator',2000);\n\nYou can within Oracle use a Before Insert trigger to simulate handling of the MySQL Insert syntax. Note: Within Oracle you will require a SEQUENCE per table and a TRIGGER per table. Oracle supports multiple triggers of the same type per table (not sure if MySQL supports this).\n\n\n CREATE OR REPLACE TRIGGER BRI_MOVIE_TRG\nBEFORE INSERT ON Movie\nFOR EACH ROW\nBEGIN\n  SELECT MovieSeq.NEXTVAL INTO :new.id FROM DUAL;\nEND BRI_MOVIE_TRG;\n.\nRUN;\n\n\nINSERT INTO Movie (name,released) VALUES ('The Lion King',1994);\n\nOracle’s syntax uses the sequence name with .NEXTVAL or .CURVAL.\n\nFuture Directions\n\nI would like to see a SEQUENCE implementation with MySQL (whether official or unofficial). I’m sure some enterprising person in the community already has one. Database abstraction layer systems would also most likely have implementations. I liked the PostgreSQL Syntax for ease of use with the following commands.\n\nNEXTVAL(‘sequence’);\nCURRVAL(‘sequence’);\nSETVAL(‘sequence’,value);\nWanting something and doing something about it are two different things, so here is what I wiped together to demonstrate a possible implementation. It needs a lot more work in appropiate error handling. transaction management, testing and performance analysis, however it shows the options of one possible implementation.\n\ncurrval\n\n\n DROP TABLE IF EXISTS sequence;\nCREATE TABLE sequence (\nname              VARCHAR(50) NOT NULL,\ncurrent_value INT NOT NULL,\nincrement       INT NOT NULL DEFAULT 1,\nPRIMARY KEY (name)\n) ENGINE=InnoDB;\nINSERT INTO sequence VALUES ('MovieSeq',3,5);\nDROP FUNCTION IF EXISTS currval;\nDELIMITER $\nCREATE FUNCTION currval (seq_name VARCHAR(50))\nRETURNS INTEGER\nCONTAINS SQL\nBEGIN\n  DECLARE value INTEGER;\n  SET value = 0;\n  SELECT current_value INTO value\n  FROM sequence\n  WHERE name = seq_name;\n  RETURN value;\nEND$\nDELIMITER ;\n\nSome Testing:\n\n mysql> SELECT currval('MovieSeq');\n+---------------------+\n| currval('MovieSeq') |\n+---------------------+\n|                   3 |\n+---------------------+\n1 row in set (0.00 sec)\nmysql> SELECT currval('x');\n+--------------+\n| currval('x') |\n+--------------+\n|            0 |\n+--------------+\n1 row in set, 1 warning (0.00 sec)\nmysql> show warnings;\n+---------+------+------------------+\n| Level   | Code | Message          |\n+---------+------+------------------+\n| Warning | 1329 | No data to FETCH |\n+---------+------+------------------+\n1 row in set (0.00 sec)\n\nWhat was interesting was I originally used a cursor, as below, but the results for passing an invalid argument (basic boundary testing), returned a SQL error while the above implementation returned a more manageable warning.\n\n\n  DECLARE c CURSOR FOR\n    SELECT current_value FROM sequence\n    WHERE name = seq_name;\n  OPEN c;\n  FETCH c INTO value;\n\n\nmysql> select currval('x');\nERROR 1329 (02000): No data to FETCH\n\nIndeed the Apache Object Relational Bridge Sequence Manager section shows a very cool syntax for MSSQL.\n\nUPDATE TABLE SET @MAX_KEY = MAX_KEY = MAX_KEY + 1\n\nUPDATE table SET var = column = value which effectively allows you to eliminated the need for a seperate UPDATE and SELECT for this type of operation.\n\nnextval\n\n\n DROP FUNCTION IF EXISTS nextval;\nDELIMITER $\nCREATE FUNCTION nextval (seq_name VARCHAR(50))\nRETURNS INTEGER\nCONTAINS SQL\nBEGIN\n   UPDATE sequence\n   SET          current_value = current_value + increment\n   WHERE name = seq_name;\n   RETURN currval(seq_name);\nEND$\nDELIMITER ;\n\n\n mysql> select nextval('MovieSeq');\n+---------------------+\n| nextval('MovieSeq') |\n+---------------------+\n|                  15 |\n+---------------------+\n1 row in set (0.09 sec)\n\nmysql> select nextval('MovieSeq');\n+---------------------+\n| nextval('MovieSeq') |\n+---------------------+\n|                  20 |\n+---------------------+\n1 row in set (0.01 sec)\n\nmysql> select nextval('MovieSeq');\n+---------------------+\n| nextval('MovieSeq') |\n+---------------------+\n|                  25 |\n+---------------------+\n1 row in set (0.00 sec)\n\nsetval\n\n\n DROP FUNCTION IF EXISTS setval;\nDELIMITER $\nCREATE FUNCTION setval (seq_name VARCHAR(50), value INTEGER)\nRETURNS INTEGER\nCONTAINS SQL\nBEGIN\n   UPDATE sequence\n   SET          current_value = value\n   WHERE name = seq_name;\n   RETURN currval(seq_name);\nEND$\nDELIMITER ;\n\n\n mysql> select setval('MovieSeq',150);\n+------------------------+\n| setval('MovieSeq',150) |\n+------------------------+\n|                    150 |\n+------------------------+\n1 row in set (0.06 sec)\n\nmysql> select curval('MovieSeq');\n+---------------------+\n| currval('MovieSeq') |\n+---------------------+\n|                 150 |\n+---------------------+\n1 row in set (0.00 sec)\n\nmysql> select nextval('MovieSeq');\n+---------------------+\n| nextval('MovieSeq') |\n+---------------------+\n|                 155 |\n+---------------------+\n1 row in set (0.00 sec)\n\n\n","slug":"Sequences-in-MySQL","published":1,"updated":"2018-04-25T12:46:59.497Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2fj0npx001iq4vga6w137br","content":"<p>Sequences in MySQL<br>January 26, 2006 by ronald</p><p>One piece of SQL functionality that doesn’t appear to have any consistency or an ANSI SQL Standard is the management of system generated sequential numbers, used for example in suggorate keys.</p><a id=\"more\"></a>\n\n<p>MySQL uses AUTO_INCREMENT which serves the purposes adequately, however in my documenting of differences with Oracle in my upcoming MySQL Conference presentation “MySQL for Oracle Developers” there a number of key differences with Oracle’s SEQUENCE usage.</p>\n<p>MySQL AUTO_INCREMENT to Oracle SEQUENCE Differences</p>\n<p>AUTO_INCREMENT is limited to one column per table<br>AUTO_INCREMENT must be assigned to a specific table.column (not allowing multi table use)<br>AUTO_INCREMENT is INSERTed as a not specified column, or a value of NULL<br>The MaxDB Reserved Words list includes SEQUENCE for the CREATE SEQUENCE however I’ve never used MaxDB. Other popular open source products such as PostgreSQL and Ingres use sequences. Refer to the references section for more details.</p>\n<p>Usage</p>\n<p>The following provides an example sytax usage within MySQL and Oracle.</p>\n<p>MySQL</p>\n<p> CREATE TABLE Movie(<br>id           INT NOT NULL AUTO_INCREMENT,<br>name     VARCHAR(60) NOT NULL,<br>released YEAR NOT NULL,<br>PRIMARY KEY (id)<br>) ENGINE=InnoDB;</p>\n<p>INSERT INTO Movie (name,released) VALUES (‘Gladiator’,2000);<br>INSERT INTO Movie (id,name,released) VALUES (NULL,’The Bourne Identity’,1998);</p>\n<p>Oracle</p>\n<p> CREATE TABLE Movie(<br>id          INT NOT NULL,<br>name     VARCHAR2(60) NOT NULL,<br>released INT NOT NULL,<br>PRIMARY KEY (id)<br>);<br>CREATE SEQUENCE MovieSeq;</p>\n<p>INSERT INTO Movie (id,name,released) VALUES (MovieSeq.NEXTVAL,’Gladiator’,2000);</p>\n<p>You can within Oracle use a Before Insert trigger to simulate handling of the MySQL Insert syntax. Note: Within Oracle you will require a SEQUENCE per table and a TRIGGER per table. Oracle supports multiple triggers of the same type per table (not sure if MySQL supports this).</p>\n<p> CREATE OR REPLACE TRIGGER BRI_MOVIE_TRG<br>BEFORE INSERT ON Movie<br>FOR EACH ROW<br>BEGIN<br>  SELECT MovieSeq.NEXTVAL INTO :new.id FROM DUAL;<br>END BRI_MOVIE_TRG;<br>.<br>RUN;</p>\n<p>INSERT INTO Movie (name,released) VALUES (‘The Lion King’,1994);</p>\n<p>Oracle’s syntax uses the sequence name with .NEXTVAL or .CURVAL.</p>\n<p>Future Directions</p>\n<p>I would like to see a SEQUENCE implementation with MySQL (whether official or unofficial). I’m sure some enterprising person in the community already has one. Database abstraction layer systems would also most likely have implementations. I liked the PostgreSQL Syntax for ease of use with the following commands.</p>\n<p>NEXTVAL(‘sequence’);<br>CURRVAL(‘sequence’);<br>SETVAL(‘sequence’,value);<br>Wanting something and doing something about it are two different things, so here is what I wiped together to demonstrate a possible implementation. It needs a lot more work in appropiate error handling. transaction management, testing and performance analysis, however it shows the options of one possible implementation.</p>\n<p>currval</p>\n<p> DROP TABLE IF EXISTS sequence;<br>CREATE TABLE sequence (<br>name              VARCHAR(50) NOT NULL,<br>current_value INT NOT NULL,<br>increment       INT NOT NULL DEFAULT 1,<br>PRIMARY KEY (name)<br>) ENGINE=InnoDB;<br>INSERT INTO sequence VALUES (‘MovieSeq’,3,5);<br>DROP FUNCTION IF EXISTS currval;<br>DELIMITER $<br>CREATE FUNCTION currval (seq_name VARCHAR(50))<br>RETURNS INTEGER<br>CONTAINS SQL<br>BEGIN<br>  DECLARE value INTEGER;<br>  SET value = 0;<br>  SELECT current_value INTO value<br>  FROM sequence<br>  WHERE name = seq_name;<br>  RETURN value;<br>END$<br>DELIMITER ;</p>\n<p>Some Testing:</p>\n<p> mysql&gt; SELECT currval(‘MovieSeq’);<br>+———————+<br>| currval(‘MovieSeq’) |<br>+———————+<br>|                   3 |<br>+———————+<br>1 row in set (0.00 sec)<br>mysql&gt; SELECT currval(‘x’);<br>+————–+<br>| currval(‘x’) |<br>+————–+<br>|            0 |<br>+————–+<br>1 row in set, 1 warning (0.00 sec)<br>mysql&gt; show warnings;<br>+———+——+——————+<br>| Level   | Code | Message          |<br>+———+——+——————+<br>| Warning | 1329 | No data to FETCH |<br>+———+——+——————+<br>1 row in set (0.00 sec)</p>\n<p>What was interesting was I originally used a cursor, as below, but the results for passing an invalid argument (basic boundary testing), returned a SQL error while the above implementation returned a more manageable warning.</p>\n<p>  DECLARE c CURSOR FOR<br>    SELECT current_value FROM sequence<br>    WHERE name = seq_name;<br>  OPEN c;<br>  FETCH c INTO value;</p>\n<p>mysql&gt; select currval(‘x’);<br>ERROR 1329 (02000): No data to FETCH</p>\n<p>Indeed the Apache Object Relational Bridge Sequence Manager section shows a very cool syntax for MSSQL.</p>\n<p>UPDATE TABLE SET @MAX_KEY = MAX_KEY = MAX_KEY + 1</p>\n<p>UPDATE table SET var = column = value which effectively allows you to eliminated the need for a seperate UPDATE and SELECT for this type of operation.</p>\n<p>nextval</p>\n<p> DROP FUNCTION IF EXISTS nextval;<br>DELIMITER $<br>CREATE FUNCTION nextval (seq_name VARCHAR(50))<br>RETURNS INTEGER<br>CONTAINS SQL<br>BEGIN<br>   UPDATE sequence<br>   SET          current_value = current_value + increment<br>   WHERE name = seq_name;<br>   RETURN currval(seq_name);<br>END$<br>DELIMITER ;</p>\n<p> mysql&gt; select nextval(‘MovieSeq’);<br>+———————+<br>| nextval(‘MovieSeq’) |<br>+———————+<br>|                  15 |<br>+———————+<br>1 row in set (0.09 sec)</p>\n<p>mysql&gt; select nextval(‘MovieSeq’);<br>+———————+<br>| nextval(‘MovieSeq’) |<br>+———————+<br>|                  20 |<br>+———————+<br>1 row in set (0.01 sec)</p>\n<p>mysql&gt; select nextval(‘MovieSeq’);<br>+———————+<br>| nextval(‘MovieSeq’) |<br>+———————+<br>|                  25 |<br>+———————+<br>1 row in set (0.00 sec)</p>\n<p>setval</p>\n<p> DROP FUNCTION IF EXISTS setval;<br>DELIMITER $<br>CREATE FUNCTION setval (seq_name VARCHAR(50), value INTEGER)<br>RETURNS INTEGER<br>CONTAINS SQL<br>BEGIN<br>   UPDATE sequence<br>   SET          current_value = value<br>   WHERE name = seq_name;<br>   RETURN currval(seq_name);<br>END$<br>DELIMITER ;</p>\n<p> mysql&gt; select setval(‘MovieSeq’,150);<br>+————————+<br>| setval(‘MovieSeq’,150) |<br>+————————+<br>|                    150 |<br>+————————+<br>1 row in set (0.06 sec)</p>\n<p>mysql&gt; select curval(‘MovieSeq’);<br>+———————+<br>| currval(‘MovieSeq’) |<br>+———————+<br>|                 150 |<br>+———————+<br>1 row in set (0.00 sec)</p>\n<p>mysql&gt; select nextval(‘MovieSeq’);<br>+———————+<br>| nextval(‘MovieSeq’) |<br>+———————+<br>|                 155 |<br>+———————+<br>1 row in set (0.00 sec)</p>\n","site":{"data":{}},"excerpt":"<p>Sequences in MySQL<br>January 26, 2006 by ronald</p><p>One piece of SQL functionality that doesn’t appear to have any consistency or an ANSI SQL Standard is the management of system generated sequential numbers, used for example in suggorate keys.</p>","more":"\n\n<p>MySQL uses AUTO_INCREMENT which serves the purposes adequately, however in my documenting of differences with Oracle in my upcoming MySQL Conference presentation “MySQL for Oracle Developers” there a number of key differences with Oracle’s SEQUENCE usage.</p>\n<p>MySQL AUTO_INCREMENT to Oracle SEQUENCE Differences</p>\n<p>AUTO_INCREMENT is limited to one column per table<br>AUTO_INCREMENT must be assigned to a specific table.column (not allowing multi table use)<br>AUTO_INCREMENT is INSERTed as a not specified column, or a value of NULL<br>The MaxDB Reserved Words list includes SEQUENCE for the CREATE SEQUENCE however I’ve never used MaxDB. Other popular open source products such as PostgreSQL and Ingres use sequences. Refer to the references section for more details.</p>\n<p>Usage</p>\n<p>The following provides an example sytax usage within MySQL and Oracle.</p>\n<p>MySQL</p>\n<p> CREATE TABLE Movie(<br>id           INT NOT NULL AUTO_INCREMENT,<br>name     VARCHAR(60) NOT NULL,<br>released YEAR NOT NULL,<br>PRIMARY KEY (id)<br>) ENGINE=InnoDB;</p>\n<p>INSERT INTO Movie (name,released) VALUES (‘Gladiator’,2000);<br>INSERT INTO Movie (id,name,released) VALUES (NULL,’The Bourne Identity’,1998);</p>\n<p>Oracle</p>\n<p> CREATE TABLE Movie(<br>id          INT NOT NULL,<br>name     VARCHAR2(60) NOT NULL,<br>released INT NOT NULL,<br>PRIMARY KEY (id)<br>);<br>CREATE SEQUENCE MovieSeq;</p>\n<p>INSERT INTO Movie (id,name,released) VALUES (MovieSeq.NEXTVAL,’Gladiator’,2000);</p>\n<p>You can within Oracle use a Before Insert trigger to simulate handling of the MySQL Insert syntax. Note: Within Oracle you will require a SEQUENCE per table and a TRIGGER per table. Oracle supports multiple triggers of the same type per table (not sure if MySQL supports this).</p>\n<p> CREATE OR REPLACE TRIGGER BRI_MOVIE_TRG<br>BEFORE INSERT ON Movie<br>FOR EACH ROW<br>BEGIN<br>  SELECT MovieSeq.NEXTVAL INTO :new.id FROM DUAL;<br>END BRI_MOVIE_TRG;<br>.<br>RUN;</p>\n<p>INSERT INTO Movie (name,released) VALUES (‘The Lion King’,1994);</p>\n<p>Oracle’s syntax uses the sequence name with .NEXTVAL or .CURVAL.</p>\n<p>Future Directions</p>\n<p>I would like to see a SEQUENCE implementation with MySQL (whether official or unofficial). I’m sure some enterprising person in the community already has one. Database abstraction layer systems would also most likely have implementations. I liked the PostgreSQL Syntax for ease of use with the following commands.</p>\n<p>NEXTVAL(‘sequence’);<br>CURRVAL(‘sequence’);<br>SETVAL(‘sequence’,value);<br>Wanting something and doing something about it are two different things, so here is what I wiped together to demonstrate a possible implementation. It needs a lot more work in appropiate error handling. transaction management, testing and performance analysis, however it shows the options of one possible implementation.</p>\n<p>currval</p>\n<p> DROP TABLE IF EXISTS sequence;<br>CREATE TABLE sequence (<br>name              VARCHAR(50) NOT NULL,<br>current_value INT NOT NULL,<br>increment       INT NOT NULL DEFAULT 1,<br>PRIMARY KEY (name)<br>) ENGINE=InnoDB;<br>INSERT INTO sequence VALUES (‘MovieSeq’,3,5);<br>DROP FUNCTION IF EXISTS currval;<br>DELIMITER $<br>CREATE FUNCTION currval (seq_name VARCHAR(50))<br>RETURNS INTEGER<br>CONTAINS SQL<br>BEGIN<br>  DECLARE value INTEGER;<br>  SET value = 0;<br>  SELECT current_value INTO value<br>  FROM sequence<br>  WHERE name = seq_name;<br>  RETURN value;<br>END$<br>DELIMITER ;</p>\n<p>Some Testing:</p>\n<p> mysql&gt; SELECT currval(‘MovieSeq’);<br>+———————+<br>| currval(‘MovieSeq’) |<br>+———————+<br>|                   3 |<br>+———————+<br>1 row in set (0.00 sec)<br>mysql&gt; SELECT currval(‘x’);<br>+————–+<br>| currval(‘x’) |<br>+————–+<br>|            0 |<br>+————–+<br>1 row in set, 1 warning (0.00 sec)<br>mysql&gt; show warnings;<br>+———+——+——————+<br>| Level   | Code | Message          |<br>+———+——+——————+<br>| Warning | 1329 | No data to FETCH |<br>+———+——+——————+<br>1 row in set (0.00 sec)</p>\n<p>What was interesting was I originally used a cursor, as below, but the results for passing an invalid argument (basic boundary testing), returned a SQL error while the above implementation returned a more manageable warning.</p>\n<p>  DECLARE c CURSOR FOR<br>    SELECT current_value FROM sequence<br>    WHERE name = seq_name;<br>  OPEN c;<br>  FETCH c INTO value;</p>\n<p>mysql&gt; select currval(‘x’);<br>ERROR 1329 (02000): No data to FETCH</p>\n<p>Indeed the Apache Object Relational Bridge Sequence Manager section shows a very cool syntax for MSSQL.</p>\n<p>UPDATE TABLE SET @MAX_KEY = MAX_KEY = MAX_KEY + 1</p>\n<p>UPDATE table SET var = column = value which effectively allows you to eliminated the need for a seperate UPDATE and SELECT for this type of operation.</p>\n<p>nextval</p>\n<p> DROP FUNCTION IF EXISTS nextval;<br>DELIMITER $<br>CREATE FUNCTION nextval (seq_name VARCHAR(50))<br>RETURNS INTEGER<br>CONTAINS SQL<br>BEGIN<br>   UPDATE sequence<br>   SET          current_value = current_value + increment<br>   WHERE name = seq_name;<br>   RETURN currval(seq_name);<br>END$<br>DELIMITER ;</p>\n<p> mysql&gt; select nextval(‘MovieSeq’);<br>+———————+<br>| nextval(‘MovieSeq’) |<br>+———————+<br>|                  15 |<br>+———————+<br>1 row in set (0.09 sec)</p>\n<p>mysql&gt; select nextval(‘MovieSeq’);<br>+———————+<br>| nextval(‘MovieSeq’) |<br>+———————+<br>|                  20 |<br>+———————+<br>1 row in set (0.01 sec)</p>\n<p>mysql&gt; select nextval(‘MovieSeq’);<br>+———————+<br>| nextval(‘MovieSeq’) |<br>+———————+<br>|                  25 |<br>+———————+<br>1 row in set (0.00 sec)</p>\n<p>setval</p>\n<p> DROP FUNCTION IF EXISTS setval;<br>DELIMITER $<br>CREATE FUNCTION setval (seq_name VARCHAR(50), value INTEGER)<br>RETURNS INTEGER<br>CONTAINS SQL<br>BEGIN<br>   UPDATE sequence<br>   SET          current_value = value<br>   WHERE name = seq_name;<br>   RETURN currval(seq_name);<br>END$<br>DELIMITER ;</p>\n<p> mysql&gt; select setval(‘MovieSeq’,150);<br>+————————+<br>| setval(‘MovieSeq’,150) |<br>+————————+<br>|                    150 |<br>+————————+<br>1 row in set (0.06 sec)</p>\n<p>mysql&gt; select curval(‘MovieSeq’);<br>+———————+<br>| currval(‘MovieSeq’) |<br>+———————+<br>|                 150 |<br>+———————+<br>1 row in set (0.00 sec)</p>\n<p>mysql&gt; select nextval(‘MovieSeq’);<br>+———————+<br>| nextval(‘MovieSeq’) |<br>+———————+<br>|                 155 |<br>+———————+<br>1 row in set (0.00 sec)</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Apr 25 2018 20:46:59 GMT+0800 (GMT+08:00)","title":"Sequences in MySQL","path":"2017/03/24/Sequences-in-MySQL/","eyeCatchImage":null,"excerpt":null,"date":"2017-03-24T05:00:42.000Z","pv":0,"totalPV":0,"categories":"Essay","tags":["Mysql"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":4889},{"title":"Spring-boot添加admin监控","date":"2017-08-17T14:46:57.000Z","_content":"# 什么是Spring Boot Admin？\n\nSpring Boot Admin是一个用于管理和监视Spring Boot应用程序的简单应用程序。应用程序通过我们的Spring Boot Admin Client（通过http）注册，或者使用Spring Cloud（例如Eureka）进行注册。\n\n# 入门\n\n## 设置Admin Server服务\n\n- 添加Spring Boot Admin Server 和 UI依赖:\n\n```xml\n<dependency>\n    <groupId>de.codecentric</groupId>\n    <artifactId>spring-boot-admin-server</artifactId>\n    <version>1.5.3</version>\n</dependency>\n<dependency>\n    <groupId>de.codecentric</groupId>\n    <artifactId>spring-boot-admin-server-ui</artifactId>\n    <version>1.5.3</version>\n</dependency>\n```\n\n- 在主配置类上添加@EnableAdminServer注解启用Server:\n\n```java\n@Configuration\n@EnableAutoConfiguration\n@EnableAdminServer\npublic class SpringBootAdminApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBootAdminApplication.class, args);\n    }\n}\n```\n\n## 注册客户端应用\n\n### Spring-boot-admin-starter-client\n\n- 添加Spring-boot-admin-starter-client依赖:\n\n```xml\n<dependency>\n    <groupId>de.codecentric</groupId>\n    <artifactId>spring-boot-admin-starter-client</artifactId>\n    <version>1.5.3</version>\n</dependency>\n```\n\n- 配置Spring-boot-admin-server的Url已注册应用:\n\n```yaml\nspring.boot.admin.url: http://localhost:8080\n```\n\n### 使用 Spring Cloud Discovery 注册\n\n- 添加Spring-cloud-starter-eureka依赖:\n\n```xml\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-eureka</artifactId>\n</dependency>\n```\n\n- 添加@EnableDiscoveryClient注解启用服务发现:\n\n```java\n@Configuration\n@EnableAutoConfiguration\n@EnableDiscoveryClient\n@EnableAdminServer\npublic class SpringBootAdminApplication {\n  public static void main(String[] args) {\n    SpringApplication.run(SpringBootAdminApplication.class, args);\n  }\n}\n```\n\n- 配置服务发现地址:\n\n```yaml\neureka:\n  instance:\n    leaseRenewalIntervalInSeconds: 10\n  client:\n    registryFetchIntervalSeconds: 5\n    serviceUrl:\n      defaultZone: ${EUREKA_SERVICE_URL:http://localhost:8761}/eureka/\n```\n\n# 监控效果\n\n浏览器访问http://localhost:8080\n\n![upload successful](/images/pasted-44.png)\n\n![upload successful](/images/pasted-45.png)\n\n![upload successful](/images/pasted-46.png)\n\n## 更多\n\n> [Github](https://github.com/codecentric/spring-boot-admin)\n> [更多功能和官方文档](https://codecentric.github.io/spring-boot-admin/1.5.3/)","source":"_posts/Spring-boot添加admin监控.md","raw":"---\ntitle: Spring-boot添加admin监控\ntags:\n  - Java\n  - Spring\n  - Spring Boot\n  - Monitor\ncategories:\n  - Collection\ndate: 2017-08-17 22:46:57\n---\n# 什么是Spring Boot Admin？\n\nSpring Boot Admin是一个用于管理和监视Spring Boot应用程序的简单应用程序。应用程序通过我们的Spring Boot Admin Client（通过http）注册，或者使用Spring Cloud（例如Eureka）进行注册。\n\n# 入门\n\n## 设置Admin Server服务\n\n- 添加Spring Boot Admin Server 和 UI依赖:\n\n```xml\n<dependency>\n    <groupId>de.codecentric</groupId>\n    <artifactId>spring-boot-admin-server</artifactId>\n    <version>1.5.3</version>\n</dependency>\n<dependency>\n    <groupId>de.codecentric</groupId>\n    <artifactId>spring-boot-admin-server-ui</artifactId>\n    <version>1.5.3</version>\n</dependency>\n```\n\n- 在主配置类上添加@EnableAdminServer注解启用Server:\n\n```java\n@Configuration\n@EnableAutoConfiguration\n@EnableAdminServer\npublic class SpringBootAdminApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBootAdminApplication.class, args);\n    }\n}\n```\n\n## 注册客户端应用\n\n### Spring-boot-admin-starter-client\n\n- 添加Spring-boot-admin-starter-client依赖:\n\n```xml\n<dependency>\n    <groupId>de.codecentric</groupId>\n    <artifactId>spring-boot-admin-starter-client</artifactId>\n    <version>1.5.3</version>\n</dependency>\n```\n\n- 配置Spring-boot-admin-server的Url已注册应用:\n\n```yaml\nspring.boot.admin.url: http://localhost:8080\n```\n\n### 使用 Spring Cloud Discovery 注册\n\n- 添加Spring-cloud-starter-eureka依赖:\n\n```xml\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-eureka</artifactId>\n</dependency>\n```\n\n- 添加@EnableDiscoveryClient注解启用服务发现:\n\n```java\n@Configuration\n@EnableAutoConfiguration\n@EnableDiscoveryClient\n@EnableAdminServer\npublic class SpringBootAdminApplication {\n  public static void main(String[] args) {\n    SpringApplication.run(SpringBootAdminApplication.class, args);\n  }\n}\n```\n\n- 配置服务发现地址:\n\n```yaml\neureka:\n  instance:\n    leaseRenewalIntervalInSeconds: 10\n  client:\n    registryFetchIntervalSeconds: 5\n    serviceUrl:\n      defaultZone: ${EUREKA_SERVICE_URL:http://localhost:8761}/eureka/\n```\n\n# 监控效果\n\n浏览器访问http://localhost:8080\n\n![upload successful](/images/pasted-44.png)\n\n![upload successful](/images/pasted-45.png)\n\n![upload successful](/images/pasted-46.png)\n\n## 更多\n\n> [Github](https://github.com/codecentric/spring-boot-admin)\n> [更多功能和官方文档](https://codecentric.github.io/spring-boot-admin/1.5.3/)","slug":"Spring-boot添加admin监控","published":1,"updated":"2018-04-25T12:46:59.497Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2fj0npz001mq4vg2u04gdet","content":"<h1 id=\"什么是Spring-Boot-Admin？\"><a href=\"#什么是Spring-Boot-Admin？\" class=\"headerlink\" title=\"什么是Spring Boot Admin？\"></a>什么是Spring Boot Admin？</h1><p>Spring Boot Admin是一个用于管理和监视Spring Boot应用程序的简单应用程序。应用程序通过我们的Spring Boot Admin Client（通过http）注册，或者使用Spring Cloud（例如Eureka）进行注册。</p><h1 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h1><h2 id=\"设置Admin-Server服务\"><a href=\"#设置Admin-Server服务\" class=\"headerlink\" title=\"设置Admin Server服务\"></a>设置Admin Server服务</h2><a id=\"more\"></a>\n<ul>\n<li>添加Spring Boot Admin Server 和 UI依赖:</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>de.codecentric<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-admin-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>de.codecentric<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-admin-server-ui<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在主配置类上添加@EnableAdminServer注解启用Server:</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAutoConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAdminServer</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringBootAdminApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(SpringBootAdminApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注册客户端应用\"><a href=\"#注册客户端应用\" class=\"headerlink\" title=\"注册客户端应用\"></a>注册客户端应用</h2><h3 id=\"Spring-boot-admin-starter-client\"><a href=\"#Spring-boot-admin-starter-client\" class=\"headerlink\" title=\"Spring-boot-admin-starter-client\"></a>Spring-boot-admin-starter-client</h3><ul>\n<li>添加Spring-boot-admin-starter-client依赖:</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>de.codecentric<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置Spring-boot-admin-server的Url已注册应用:</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">spring.boot.admin.url:</span> <span class=\"attr\">http://localhost:8080</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-Spring-Cloud-Discovery-注册\"><a href=\"#使用-Spring-Cloud-Discovery-注册\" class=\"headerlink\" title=\"使用 Spring Cloud Discovery 注册\"></a>使用 Spring Cloud Discovery 注册</h3><ul>\n<li>添加Spring-cloud-starter-eureka依赖:</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>添加@EnableDiscoveryClient注解启用服务发现:</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAutoConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAdminServer</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringBootAdminApplication</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SpringApplication.run(SpringBootAdminApplication.class, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置服务发现地址:</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  instance:</span></span><br><span class=\"line\"><span class=\"attr\">    leaseRenewalIntervalInSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    registryFetchIntervalSeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"attr\">    serviceUrl:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"string\">$&#123;EUREKA_SERVICE_URL:http://localhost:8761&#125;/eureka/</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"监控效果\"><a href=\"#监控效果\" class=\"headerlink\" title=\"监控效果\"></a>监控效果</h1><p>浏览器访问<a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener\">http://localhost:8080</a></p>\n<p><img src=\"/images/pasted-44.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-45.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-46.png\" alt=\"upload successful\"></p>\n<h2 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h2><blockquote>\n<p><a href=\"https://github.com/codecentric/spring-boot-admin\" target=\"_blank\" rel=\"noopener\">Github</a><br><a href=\"https://codecentric.github.io/spring-boot-admin/1.5.3/\" target=\"_blank\" rel=\"noopener\">更多功能和官方文档</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"什么是Spring-Boot-Admin？\"><a href=\"#什么是Spring-Boot-Admin？\" class=\"headerlink\" title=\"什么是Spring Boot Admin？\"></a>什么是Spring Boot Admin？</h1><p>Spring Boot Admin是一个用于管理和监视Spring Boot应用程序的简单应用程序。应用程序通过我们的Spring Boot Admin Client（通过http）注册，或者使用Spring Cloud（例如Eureka）进行注册。</p><h1 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h1><h2 id=\"设置Admin-Server服务\"><a href=\"#设置Admin-Server服务\" class=\"headerlink\" title=\"设置Admin Server服务\"></a>设置Admin Server服务</h2>","more":"\n<ul>\n<li>添加Spring Boot Admin Server 和 UI依赖:</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>de.codecentric<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-admin-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>de.codecentric<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-admin-server-ui<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在主配置类上添加@EnableAdminServer注解启用Server:</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAutoConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAdminServer</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringBootAdminApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(SpringBootAdminApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注册客户端应用\"><a href=\"#注册客户端应用\" class=\"headerlink\" title=\"注册客户端应用\"></a>注册客户端应用</h2><h3 id=\"Spring-boot-admin-starter-client\"><a href=\"#Spring-boot-admin-starter-client\" class=\"headerlink\" title=\"Spring-boot-admin-starter-client\"></a>Spring-boot-admin-starter-client</h3><ul>\n<li>添加Spring-boot-admin-starter-client依赖:</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>de.codecentric<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置Spring-boot-admin-server的Url已注册应用:</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">spring.boot.admin.url:</span> <span class=\"attr\">http://localhost:8080</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-Spring-Cloud-Discovery-注册\"><a href=\"#使用-Spring-Cloud-Discovery-注册\" class=\"headerlink\" title=\"使用 Spring Cloud Discovery 注册\"></a>使用 Spring Cloud Discovery 注册</h3><ul>\n<li>添加Spring-cloud-starter-eureka依赖:</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>添加@EnableDiscoveryClient注解启用服务发现:</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAutoConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAdminServer</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringBootAdminApplication</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SpringApplication.run(SpringBootAdminApplication.class, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置服务发现地址:</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  instance:</span></span><br><span class=\"line\"><span class=\"attr\">    leaseRenewalIntervalInSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    registryFetchIntervalSeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"attr\">    serviceUrl:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"string\">$&#123;EUREKA_SERVICE_URL:http://localhost:8761&#125;/eureka/</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"监控效果\"><a href=\"#监控效果\" class=\"headerlink\" title=\"监控效果\"></a>监控效果</h1><p>浏览器访问<a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener\">http://localhost:8080</a></p>\n<p><img src=\"/images/pasted-44.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-45.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-46.png\" alt=\"upload successful\"></p>\n<h2 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h2><blockquote>\n<p><a href=\"https://github.com/codecentric/spring-boot-admin\" target=\"_blank\" rel=\"noopener\">Github</a><br><a href=\"https://codecentric.github.io/spring-boot-admin/1.5.3/\" target=\"_blank\" rel=\"noopener\">更多功能和官方文档</a></p>\n</blockquote>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"/images/pasted-44.png","popularPost_tmp_gaData":{"updated":"Wed Apr 25 2018 20:46:59 GMT+0800 (GMT+08:00)","title":"Spring-boot添加admin监控","path":"2017/08/17/Spring-boot添加admin监控/","eyeCatchImage":"/images/pasted-44.png","excerpt":null,"date":"2017-08-17T14:46:57.000Z","pv":0,"totalPV":0,"categories":"Collection","tags":["Java","Spring","Spring Boot","Monitor"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1885},{"title":"Spring Retry","date":"2017-08-14T15:50:34.000Z","_content":"## 使用场景:\n\n在实际工作中,重处理是一个非常常见的场景,比如:发送消息失败,调用远程服务失败,争抢锁失败,等等,这些错误可能是因为网络波动造成的,等待过后重处理就能成功.通常来说,会用try/catch,while循环之类的语法来进行重处理,但是这样的做法缺乏统一性,并且不是很方便,要多写很多代码.然而spring-retry却可以通过注解,在不入侵原有业务逻辑代码的方式下,优雅的实现重处理功能.\n\n## Maven Dependencies\n\n```xml\n<dependency>\n    <groupId>org.springframework.retry</groupId>\n    <artifactId>spring-retry</artifactId>\n    <version>1.1.5.RELEASE</version>\n</dependency>\n```\n\n## 如何启用\n\n- Spring boot application\n\n```java\n@Configuration\n@EnableRetry\npublic class AppConfig { ... }\n```\n\n指定方法上添加@Retryable，启用重试功能：\n\n```java\n@Service\npublic interface MyService {\n    @Retryable(\n      value = { SQLException.class },\n      maxAttempts = 2,\n      backoff = @Backoff(delay = 5000))\n    void retryService(String sql) throws SQLException;\n    ...\n}\n```\n\n`value`: 指定异常重试， `maxAttempts`: 最大重试次数， `backoff`: 延时， 单位毫秒\n默认任何异常都重试， 最多3次， 延时1秒\n\n为标注了@Retryable的方法单独指定执行的方法\n指定方法上添加@Recover来开启重试失败后调用的方法:\n\n```java\n@Service\npublic interface MyService {\n    ...\n    @Recover\n    void recover(SQLException e, String sql);\n}\n```\n\n> [原文链接](http://www.baeldung.com/spring-retry)\n> [文档地址http://docs.spring.io/spring-batch/reference/html/retry.html](http://docs.spring.io/spring-batch/reference/html/retry.html)","source":"_posts/Spring-Retry.md","raw":"---\ntitle: Spring Retry\ndate: 2017-08-14 23:50:34\ntags:\n  - Java\n  - Spring\n  - Spring Boot\ncategories:\n  - Collection\n---\n## 使用场景:\n\n在实际工作中,重处理是一个非常常见的场景,比如:发送消息失败,调用远程服务失败,争抢锁失败,等等,这些错误可能是因为网络波动造成的,等待过后重处理就能成功.通常来说,会用try/catch,while循环之类的语法来进行重处理,但是这样的做法缺乏统一性,并且不是很方便,要多写很多代码.然而spring-retry却可以通过注解,在不入侵原有业务逻辑代码的方式下,优雅的实现重处理功能.\n\n## Maven Dependencies\n\n```xml\n<dependency>\n    <groupId>org.springframework.retry</groupId>\n    <artifactId>spring-retry</artifactId>\n    <version>1.1.5.RELEASE</version>\n</dependency>\n```\n\n## 如何启用\n\n- Spring boot application\n\n```java\n@Configuration\n@EnableRetry\npublic class AppConfig { ... }\n```\n\n指定方法上添加@Retryable，启用重试功能：\n\n```java\n@Service\npublic interface MyService {\n    @Retryable(\n      value = { SQLException.class },\n      maxAttempts = 2,\n      backoff = @Backoff(delay = 5000))\n    void retryService(String sql) throws SQLException;\n    ...\n}\n```\n\n`value`: 指定异常重试， `maxAttempts`: 最大重试次数， `backoff`: 延时， 单位毫秒\n默认任何异常都重试， 最多3次， 延时1秒\n\n为标注了@Retryable的方法单独指定执行的方法\n指定方法上添加@Recover来开启重试失败后调用的方法:\n\n```java\n@Service\npublic interface MyService {\n    ...\n    @Recover\n    void recover(SQLException e, String sql);\n}\n```\n\n> [原文链接](http://www.baeldung.com/spring-retry)\n> [文档地址http://docs.spring.io/spring-batch/reference/html/retry.html](http://docs.spring.io/spring-batch/reference/html/retry.html)","slug":"Spring-Retry","published":1,"updated":"2018-04-25T12:46:59.497Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2fj0nq2001pq4vgg3ef9prv","content":"<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景:\"></a>使用场景:</h2><p>在实际工作中,重处理是一个非常常见的场景,比如:发送消息失败,调用远程服务失败,争抢锁失败,等等,这些错误可能是因为网络波动造成的,等待过后重处理就能成功.通常来说,会用try/catch,while循环之类的语法来进行重处理,但是这样的做法缺乏统一性,并且不是很方便,要多写很多代码.然而spring-retry却可以通过注解,在不入侵原有业务逻辑代码的方式下,优雅的实现重处理功能.</p><a id=\"more\"></a>\n<h2 id=\"Maven-Dependencies\"><a href=\"#Maven-Dependencies\" class=\"headerlink\" title=\"Maven Dependencies\"></a>Maven Dependencies</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.retry<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-retry<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何启用\"><a href=\"#如何启用\" class=\"headerlink\" title=\"如何启用\"></a>如何启用</h2><ul>\n<li>Spring boot application</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableRetry</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppConfig</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<p>指定方法上添加@Retryable，启用重试功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Retryable</span>(</span><br><span class=\"line\">      value = &#123; SQLException.class &#125;,</span><br><span class=\"line\">      maxAttempts = <span class=\"number\">2</span>,</span><br><span class=\"line\">      backoff = <span class=\"meta\">@Backoff</span>(delay = <span class=\"number\">5000</span>))</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">retryService</span><span class=\"params\">(String sql)</span> <span class=\"keyword\">throws</span> SQLException</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>value</code>: 指定异常重试， <code>maxAttempts</code>: 最大重试次数， <code>backoff</code>: 延时， 单位毫秒<br>默认任何异常都重试， 最多3次， 延时1秒</p>\n<p>为标注了@Retryable的方法单独指定执行的方法<br>指定方法上添加@Recover来开启重试失败后调用的方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyService</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"meta\">@Recover</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">recover</span><span class=\"params\">(SQLException e, String sql)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"http://www.baeldung.com/spring-retry\" target=\"_blank\" rel=\"noopener\">原文链接</a><br><a href=\"http://docs.spring.io/spring-batch/reference/html/retry.html\" target=\"_blank\" rel=\"noopener\">文档地址http://docs.spring.io/spring-batch/reference/html/retry.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景:\"></a>使用场景:</h2><p>在实际工作中,重处理是一个非常常见的场景,比如:发送消息失败,调用远程服务失败,争抢锁失败,等等,这些错误可能是因为网络波动造成的,等待过后重处理就能成功.通常来说,会用try/catch,while循环之类的语法来进行重处理,但是这样的做法缺乏统一性,并且不是很方便,要多写很多代码.然而spring-retry却可以通过注解,在不入侵原有业务逻辑代码的方式下,优雅的实现重处理功能.</p>","more":"\n<h2 id=\"Maven-Dependencies\"><a href=\"#Maven-Dependencies\" class=\"headerlink\" title=\"Maven Dependencies\"></a>Maven Dependencies</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.retry<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-retry<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何启用\"><a href=\"#如何启用\" class=\"headerlink\" title=\"如何启用\"></a>如何启用</h2><ul>\n<li>Spring boot application</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableRetry</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppConfig</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<p>指定方法上添加@Retryable，启用重试功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Retryable</span>(</span><br><span class=\"line\">      value = &#123; SQLException.class &#125;,</span><br><span class=\"line\">      maxAttempts = <span class=\"number\">2</span>,</span><br><span class=\"line\">      backoff = <span class=\"meta\">@Backoff</span>(delay = <span class=\"number\">5000</span>))</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">retryService</span><span class=\"params\">(String sql)</span> <span class=\"keyword\">throws</span> SQLException</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>value</code>: 指定异常重试， <code>maxAttempts</code>: 最大重试次数， <code>backoff</code>: 延时， 单位毫秒<br>默认任何异常都重试， 最多3次， 延时1秒</p>\n<p>为标注了@Retryable的方法单独指定执行的方法<br>指定方法上添加@Recover来开启重试失败后调用的方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyService</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"meta\">@Recover</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">recover</span><span class=\"params\">(SQLException e, String sql)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"http://www.baeldung.com/spring-retry\" target=\"_blank\" rel=\"noopener\">原文链接</a><br><a href=\"http://docs.spring.io/spring-batch/reference/html/retry.html\" target=\"_blank\" rel=\"noopener\">文档地址http://docs.spring.io/spring-batch/reference/html/retry.html</a></p>\n</blockquote>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Apr 25 2018 20:46:59 GMT+0800 (GMT+08:00)","title":"Spring Retry","path":"2017/08/14/Spring-Retry/","eyeCatchImage":null,"excerpt":null,"date":"2017-08-14T15:50:34.000Z","pv":0,"totalPV":0,"categories":"Collection","tags":["Java","Spring","Spring Boot"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1000},{"title":"Spring模块及生态支持汇总","date":"2017-04-09T05:06:51.000Z","_content":"# 一、Spring模块\n\n## （1）核心容器\n\n- Spring-Core：核心工具类，Spring其他模块大量使用Spring-Core\n- Spring-Bean：Spring定义Bean的支持\n- Spring-Context：运行时Spring容器\n- Spring-Context-Support：Spring容器对第三方包的集成支持\n- Spring-Expression：使用表达式语言在运行时查询和操作对象\n\n## （2）AOP\n\n- Spring-Aop：基于代理的AOP支持\n- Spring-Aspects：基于AspectJ的AOP支持\n\n## （3）消息(message)\n\n- Spring-Messaging：对消息架构和协议的支持\n\n## （4）Web\n\n- Spring-Web：提供基础的Web集成功能，在Web项目中提供Spring的容器\n- Spring-Webmvc：提供基于Servlet的Spring MVC\n- Spring-WebSocket：提供WebSocket功能\n- Spring-Webmvc-Portlet：提供Portlet环境支持\n\n## （5）数据访问/集成（Data Access/Integration）\n\n- Spring-JDBC：提供以JDBC访问数据库的支持\n- Spring-TX：提供编程式和声明式的事务支持\n- Spring-ORM：提供对对象/关系映射技术的支持\n- Spring-OXM：提供对对象/xml映射技术的支持\n- Spring-JMS：提供对JMS的支持\n\n# 二、Spring的生态\n\nSpring发展到现在已经不仅仅是Spring框架本身的内容，Spring目前提供了大量的基于Spring的项目，可以用来更深入地降低我们的开发难度，提高开发效率。\n目前Spring的生态里主要有以下项目，我们可以根据自己项目的需要来选择使用相应的项目：\n\n- Spring Boot：使用默认开发配置来实现快捷开发\n- Spring XD：用来简化大数据应用开发\n- Spring Cloud：为分布式系统开发提供工具集\n- Spring Data：对主流的关系型和Nosql数据库的支持\n- Spring Integration：通过消息机制对企业集成模式（EIP）的支持\n- Spring Batch：简化及优化大量数据的批处理操作\n- Spring Security：通过认证和授权保护应用\n- Spring HATEOAS：基于HATEOAS原则简化REST服务开发\n- Spring Social：于社交网络API（如Facebook、新浪微博等）的集成\n- Spring AMQP：对基于AMQP的消息的支持\n- Spring Mobile：提供对手机设备检测的功能，给不同的设备返回不同的页面的支持\n- Spring for Android：主要提供在Android上消费Restful API的功能\n- Spring Web Flow：基于Spring MVC提供基于向导流程式的Web应用开发\n- Spring Web Services：提供基于协议有限的SOAP/Web服务\n- Spring LDAP：简化LDAP开发\n- Spring Session：提供一个API及实现来管理用户会话信息","source":"_posts/Spring模块及生态支持汇总.md","raw":"---\ntitle: Spring模块及生态支持汇总\ndate: 2017-04-09 13:06:51\ntags:\n  - Spring\n  - Java\ncategories: Essay\n---\n# 一、Spring模块\n\n## （1）核心容器\n\n- Spring-Core：核心工具类，Spring其他模块大量使用Spring-Core\n- Spring-Bean：Spring定义Bean的支持\n- Spring-Context：运行时Spring容器\n- Spring-Context-Support：Spring容器对第三方包的集成支持\n- Spring-Expression：使用表达式语言在运行时查询和操作对象\n\n## （2）AOP\n\n- Spring-Aop：基于代理的AOP支持\n- Spring-Aspects：基于AspectJ的AOP支持\n\n## （3）消息(message)\n\n- Spring-Messaging：对消息架构和协议的支持\n\n## （4）Web\n\n- Spring-Web：提供基础的Web集成功能，在Web项目中提供Spring的容器\n- Spring-Webmvc：提供基于Servlet的Spring MVC\n- Spring-WebSocket：提供WebSocket功能\n- Spring-Webmvc-Portlet：提供Portlet环境支持\n\n## （5）数据访问/集成（Data Access/Integration）\n\n- Spring-JDBC：提供以JDBC访问数据库的支持\n- Spring-TX：提供编程式和声明式的事务支持\n- Spring-ORM：提供对对象/关系映射技术的支持\n- Spring-OXM：提供对对象/xml映射技术的支持\n- Spring-JMS：提供对JMS的支持\n\n# 二、Spring的生态\n\nSpring发展到现在已经不仅仅是Spring框架本身的内容，Spring目前提供了大量的基于Spring的项目，可以用来更深入地降低我们的开发难度，提高开发效率。\n目前Spring的生态里主要有以下项目，我们可以根据自己项目的需要来选择使用相应的项目：\n\n- Spring Boot：使用默认开发配置来实现快捷开发\n- Spring XD：用来简化大数据应用开发\n- Spring Cloud：为分布式系统开发提供工具集\n- Spring Data：对主流的关系型和Nosql数据库的支持\n- Spring Integration：通过消息机制对企业集成模式（EIP）的支持\n- Spring Batch：简化及优化大量数据的批处理操作\n- Spring Security：通过认证和授权保护应用\n- Spring HATEOAS：基于HATEOAS原则简化REST服务开发\n- Spring Social：于社交网络API（如Facebook、新浪微博等）的集成\n- Spring AMQP：对基于AMQP的消息的支持\n- Spring Mobile：提供对手机设备检测的功能，给不同的设备返回不同的页面的支持\n- Spring for Android：主要提供在Android上消费Restful API的功能\n- Spring Web Flow：基于Spring MVC提供基于向导流程式的Web应用开发\n- Spring Web Services：提供基于协议有限的SOAP/Web服务\n- Spring LDAP：简化LDAP开发\n- Spring Session：提供一个API及实现来管理用户会话信息","slug":"Spring模块及生态支持汇总","published":1,"updated":"2018-04-25T12:46:59.498Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2fj0nq4001sq4vgafy62w1c","content":"<h1 id=\"一、Spring模块\"><a href=\"#一、Spring模块\" class=\"headerlink\" title=\"一、Spring模块\"></a>一、Spring模块</h1><h2 id=\"（1）核心容器\"><a href=\"#（1）核心容器\" class=\"headerlink\" title=\"（1）核心容器\"></a>（1）核心容器</h2><ul>\n<li>Spring-Core：核心工具类，Spring其他模块大量使用Spring-Core</li>\n<li>Spring-Bean：Spring定义Bean的支持</li>\n<li>Spring-Context：运行时Spring容器</li>\n<li>Spring-Context-Support：Spring容器对第三方包的集成支持</li>\n<li>Spring-Expression：使用表达式语言在运行时查询和操作对象</li>\n</ul><a id=\"more\"></a>\n<h2 id=\"（2）AOP\"><a href=\"#（2）AOP\" class=\"headerlink\" title=\"（2）AOP\"></a>（2）AOP</h2><ul>\n<li>Spring-Aop：基于代理的AOP支持</li>\n<li>Spring-Aspects：基于AspectJ的AOP支持</li>\n</ul>\n<h2 id=\"（3）消息-message\"><a href=\"#（3）消息-message\" class=\"headerlink\" title=\"（3）消息(message)\"></a>（3）消息(message)</h2><ul>\n<li>Spring-Messaging：对消息架构和协议的支持</li>\n</ul>\n<h2 id=\"（4）Web\"><a href=\"#（4）Web\" class=\"headerlink\" title=\"（4）Web\"></a>（4）Web</h2><ul>\n<li>Spring-Web：提供基础的Web集成功能，在Web项目中提供Spring的容器</li>\n<li>Spring-Webmvc：提供基于Servlet的Spring MVC</li>\n<li>Spring-WebSocket：提供WebSocket功能</li>\n<li>Spring-Webmvc-Portlet：提供Portlet环境支持</li>\n</ul>\n<h2 id=\"（5）数据访问-集成（Data-Access-Integration）\"><a href=\"#（5）数据访问-集成（Data-Access-Integration）\" class=\"headerlink\" title=\"（5）数据访问/集成（Data Access/Integration）\"></a>（5）数据访问/集成（Data Access/Integration）</h2><ul>\n<li>Spring-JDBC：提供以JDBC访问数据库的支持</li>\n<li>Spring-TX：提供编程式和声明式的事务支持</li>\n<li>Spring-ORM：提供对对象/关系映射技术的支持</li>\n<li>Spring-OXM：提供对对象/xml映射技术的支持</li>\n<li>Spring-JMS：提供对JMS的支持</li>\n</ul>\n<h1 id=\"二、Spring的生态\"><a href=\"#二、Spring的生态\" class=\"headerlink\" title=\"二、Spring的生态\"></a>二、Spring的生态</h1><p>Spring发展到现在已经不仅仅是Spring框架本身的内容，Spring目前提供了大量的基于Spring的项目，可以用来更深入地降低我们的开发难度，提高开发效率。<br>目前Spring的生态里主要有以下项目，我们可以根据自己项目的需要来选择使用相应的项目：</p>\n<ul>\n<li>Spring Boot：使用默认开发配置来实现快捷开发</li>\n<li>Spring XD：用来简化大数据应用开发</li>\n<li>Spring Cloud：为分布式系统开发提供工具集</li>\n<li>Spring Data：对主流的关系型和Nosql数据库的支持</li>\n<li>Spring Integration：通过消息机制对企业集成模式（EIP）的支持</li>\n<li>Spring Batch：简化及优化大量数据的批处理操作</li>\n<li>Spring Security：通过认证和授权保护应用</li>\n<li>Spring HATEOAS：基于HATEOAS原则简化REST服务开发</li>\n<li>Spring Social：于社交网络API（如Facebook、新浪微博等）的集成</li>\n<li>Spring AMQP：对基于AMQP的消息的支持</li>\n<li>Spring Mobile：提供对手机设备检测的功能，给不同的设备返回不同的页面的支持</li>\n<li>Spring for Android：主要提供在Android上消费Restful API的功能</li>\n<li>Spring Web Flow：基于Spring MVC提供基于向导流程式的Web应用开发</li>\n<li>Spring Web Services：提供基于协议有限的SOAP/Web服务</li>\n<li>Spring LDAP：简化LDAP开发</li>\n<li>Spring Session：提供一个API及实现来管理用户会话信息</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"一、Spring模块\"><a href=\"#一、Spring模块\" class=\"headerlink\" title=\"一、Spring模块\"></a>一、Spring模块</h1><h2 id=\"（1）核心容器\"><a href=\"#（1）核心容器\" class=\"headerlink\" title=\"（1）核心容器\"></a>（1）核心容器</h2><ul>\n<li>Spring-Core：核心工具类，Spring其他模块大量使用Spring-Core</li>\n<li>Spring-Bean：Spring定义Bean的支持</li>\n<li>Spring-Context：运行时Spring容器</li>\n<li>Spring-Context-Support：Spring容器对第三方包的集成支持</li>\n<li>Spring-Expression：使用表达式语言在运行时查询和操作对象</li>\n</ul>","more":"\n<h2 id=\"（2）AOP\"><a href=\"#（2）AOP\" class=\"headerlink\" title=\"（2）AOP\"></a>（2）AOP</h2><ul>\n<li>Spring-Aop：基于代理的AOP支持</li>\n<li>Spring-Aspects：基于AspectJ的AOP支持</li>\n</ul>\n<h2 id=\"（3）消息-message\"><a href=\"#（3）消息-message\" class=\"headerlink\" title=\"（3）消息(message)\"></a>（3）消息(message)</h2><ul>\n<li>Spring-Messaging：对消息架构和协议的支持</li>\n</ul>\n<h2 id=\"（4）Web\"><a href=\"#（4）Web\" class=\"headerlink\" title=\"（4）Web\"></a>（4）Web</h2><ul>\n<li>Spring-Web：提供基础的Web集成功能，在Web项目中提供Spring的容器</li>\n<li>Spring-Webmvc：提供基于Servlet的Spring MVC</li>\n<li>Spring-WebSocket：提供WebSocket功能</li>\n<li>Spring-Webmvc-Portlet：提供Portlet环境支持</li>\n</ul>\n<h2 id=\"（5）数据访问-集成（Data-Access-Integration）\"><a href=\"#（5）数据访问-集成（Data-Access-Integration）\" class=\"headerlink\" title=\"（5）数据访问/集成（Data Access/Integration）\"></a>（5）数据访问/集成（Data Access/Integration）</h2><ul>\n<li>Spring-JDBC：提供以JDBC访问数据库的支持</li>\n<li>Spring-TX：提供编程式和声明式的事务支持</li>\n<li>Spring-ORM：提供对对象/关系映射技术的支持</li>\n<li>Spring-OXM：提供对对象/xml映射技术的支持</li>\n<li>Spring-JMS：提供对JMS的支持</li>\n</ul>\n<h1 id=\"二、Spring的生态\"><a href=\"#二、Spring的生态\" class=\"headerlink\" title=\"二、Spring的生态\"></a>二、Spring的生态</h1><p>Spring发展到现在已经不仅仅是Spring框架本身的内容，Spring目前提供了大量的基于Spring的项目，可以用来更深入地降低我们的开发难度，提高开发效率。<br>目前Spring的生态里主要有以下项目，我们可以根据自己项目的需要来选择使用相应的项目：</p>\n<ul>\n<li>Spring Boot：使用默认开发配置来实现快捷开发</li>\n<li>Spring XD：用来简化大数据应用开发</li>\n<li>Spring Cloud：为分布式系统开发提供工具集</li>\n<li>Spring Data：对主流的关系型和Nosql数据库的支持</li>\n<li>Spring Integration：通过消息机制对企业集成模式（EIP）的支持</li>\n<li>Spring Batch：简化及优化大量数据的批处理操作</li>\n<li>Spring Security：通过认证和授权保护应用</li>\n<li>Spring HATEOAS：基于HATEOAS原则简化REST服务开发</li>\n<li>Spring Social：于社交网络API（如Facebook、新浪微博等）的集成</li>\n<li>Spring AMQP：对基于AMQP的消息的支持</li>\n<li>Spring Mobile：提供对手机设备检测的功能，给不同的设备返回不同的页面的支持</li>\n<li>Spring for Android：主要提供在Android上消费Restful API的功能</li>\n<li>Spring Web Flow：基于Spring MVC提供基于向导流程式的Web应用开发</li>\n<li>Spring Web Services：提供基于协议有限的SOAP/Web服务</li>\n<li>Spring LDAP：简化LDAP开发</li>\n<li>Spring Session：提供一个API及实现来管理用户会话信息</li>\n</ul>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Apr 25 2018 20:46:59 GMT+0800 (GMT+08:00)","title":"Spring模块及生态支持汇总","path":"2017/04/09/Spring模块及生态支持汇总/","eyeCatchImage":null,"excerpt":null,"date":"2017-04-09T05:06:51.000Z","pv":0,"totalPV":0,"categories":"Essay","tags":["Java","Spring"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1243},{"title":"Spring 中使用 logback打印日志，替换其他日志如log4j,commons-logging","date":"2017-03-21T11:42:32.000Z","_content":"### Spring MVC集成slf4j-log4j\n\n关于slf4j和log4j的相关介绍和用法，网上有很多文章可供参考，但是关于logback的，尤其是spring MVC集成logback的，就相对少一些了，而且其中一些也有着这样那样的问题。进入正题之前先简单介绍下Spring MVC集成slf4j-log4j的过程，如下：\n\n- 在pom.xml文件中添加slf4j-log4j的依赖，完成后的classpath中将新增三个jar包，分别是：slf4j-api.jar、log4j.jar及slf4j-log4j.jar\n- 在当前classpath中添加log4j.properties配置文件，按照log4j的参数语法编写该文件\n- 以上两步完成后，普通的Java项目就能使用slf4j-log4j进行日志处理了；对于Java Web项目，还需要在web.xml文件中配置Log4jConfigLocation和Log4jConfigListener\n\n### log4j与logback简要比较\n\n本文意在阐述用logback替代log4j作为Spring MVC项目的日志处理组件。这两者虽然作者相同，但log4j早已被托管给Apache基金会维护，并且自从2012年5月之后就没有更新了。而logback从出生开始就是其作者奔着取代log4j的目的开发的，因此一方面logback继承了log4j大量的用法，使得学习和迁移的成本不高，另一方面logback在性能上要明显优于log4j，尤其是在大量并发的环境下，并且新增了一些log4j所没有的功能（如将日志文件压缩成zip包等）\n\n### Spring MVC集成slf4j-logback\n\n#### 添加依赖\n\n```java\n<dependency>  \n    <groupId>ch.qos.logback</groupId>  \n    <artifactId>logback-classic</artifactId>  \n    <version>1.1.4</version>  \n</dependency>  \n<dependency>  \n    <groupId>ch.qos.logback</groupId>  \n    <artifactId>logback-core</artifactId>  \n    <version>1.1.4</version>  \n</dependency>  \n\n<dependency>  \n    <groupId>org.slf4j</groupId>  \n    <artifactId>log4j-over-slf4j</artifactId>  \n    <version>1.7.20</version>  \n</dependency>  \n<dependency>  \n    <groupId>org.slf4j</groupId>  \n    <artifactId>slf4j-api</artifactId>  \n    <version>1.7.21</version>  \n</dependency>  \n<dependency>  \n    <groupId>org.logback-extensions</groupId>  \n    <artifactId>logback-ext-spring</artifactId>  \n    <version>0.1.2</version>  \n</dependency>  \n<dependency>  \n    <groupId>org.slf4j</groupId>  \n    <artifactId>jcl-over-slf4j</artifactId>  \n    <version>1.7.12</version>  \n</dependency>  \n```\n注意：删除原有的log4j.jar。\n如上所示是集成所需要的依赖，其中：\n第一个logback-classic包含了logback本身所需的slf4j-api.jar、logback-core.jar及logback-classsic.jar\n第二个logback-ext-spring是由官方提供的对Spring的支持，它的作用就相当于log4j中的Log4jConfigListener；这个listener，网上大多都是用的自己实现的，原因在于这个插件似乎并没有出现在官方文档的显要位置导致大多数人并不知道它的存在\n第三个jcl-over-slf4j是用来把Spring源代码中大量使用到的commons-logging替换成slf4j，只有在添加了这个依赖之后才能看到Spring框架本身打印的日志，否则只能看到开发者自己打印的日志\n\n#### 编写logback.xml\n\nlogback与log4j一样，也需要在classpath中编写配置文件。但logback配置文件似乎比log4j复杂一些：log4j不仅支持xml格式的配置文件，还支持properties格式的，而logback只支持xml格式的。好在官方提供了一个在线工具，可以将log4j的properties文件直接转换成logback的xml文件，地址如下：\n[http://logback.qos.ch/translator/](http://logback.qos.ch/translator/)\nlogback的详细用法及其xml文件的相关语法，可参见它的用户向导，地址如下：\n[http://logback.qos.ch/manual/introduction.html](http://logback.qos.ch/manual/introduction.html)\n\n#### 配置web.xml\n\n与log4j类似，logback集成到Spring MVC项目中，也需要在web.xml中进行配置，同样也是配置一个config location和一个config listener，如下所示：\n```java\n<context-param>  \n         <param-name>logbackConfigLocation</param-name>  \n         <param-value>classpath:logback.xml</param-value>  \n</context-param>  \n<listener>  \n         <listener-class>ch.qos.logback.ext.spring.web.LogbackConfigListener</listener-class>  \n</listener>  \n```\n其中LogbackConfigListener由前述的logback-ext-spring依赖提供，若不依赖它则找不到这个listener类\n\n### 其它\n\n从上面可以看出，slf4j-log4j和slf4j-logback集成到Spring MVC（或推广到其它Java Web项目中）的步骤大体是相同的。集成完毕后，就可以通过slf4j提供的API隐藏掉logback（或log4j）的具体实现，直接进行日志处理了\n使用slf4j-api的时候，需要注意的是：slf4j采用了单例模式，项目中创建的每一个Logger实例都会按你传入的name（传入的Class<?>实例也会被转换成String型的name）保存到一个静态的ConcurrentHashMap中；因此只要name（或Class<?>实例）相同，每次返回的实际上都是同一个Logger实例。因此完全没必要把Logger实例作为常量或静态成员，随用随取即可。实际上，其作者也不建议那么做","source":"_posts/spring-中使用-logback打印日志，替换其他日志如log4j-commons-logging.md","raw":"---\ntitle: 'Spring 中使用 logback打印日志，替换其他日志如log4j,commons-logging'\ndate: 2017-03-21 19:42:32\ntags: [Java, Spring]\ncategories: Essay\n---\n### Spring MVC集成slf4j-log4j\n\n关于slf4j和log4j的相关介绍和用法，网上有很多文章可供参考，但是关于logback的，尤其是spring MVC集成logback的，就相对少一些了，而且其中一些也有着这样那样的问题。进入正题之前先简单介绍下Spring MVC集成slf4j-log4j的过程，如下：\n\n- 在pom.xml文件中添加slf4j-log4j的依赖，完成后的classpath中将新增三个jar包，分别是：slf4j-api.jar、log4j.jar及slf4j-log4j.jar\n- 在当前classpath中添加log4j.properties配置文件，按照log4j的参数语法编写该文件\n- 以上两步完成后，普通的Java项目就能使用slf4j-log4j进行日志处理了；对于Java Web项目，还需要在web.xml文件中配置Log4jConfigLocation和Log4jConfigListener\n\n### log4j与logback简要比较\n\n本文意在阐述用logback替代log4j作为Spring MVC项目的日志处理组件。这两者虽然作者相同，但log4j早已被托管给Apache基金会维护，并且自从2012年5月之后就没有更新了。而logback从出生开始就是其作者奔着取代log4j的目的开发的，因此一方面logback继承了log4j大量的用法，使得学习和迁移的成本不高，另一方面logback在性能上要明显优于log4j，尤其是在大量并发的环境下，并且新增了一些log4j所没有的功能（如将日志文件压缩成zip包等）\n\n### Spring MVC集成slf4j-logback\n\n#### 添加依赖\n\n```java\n<dependency>  \n    <groupId>ch.qos.logback</groupId>  \n    <artifactId>logback-classic</artifactId>  \n    <version>1.1.4</version>  \n</dependency>  \n<dependency>  \n    <groupId>ch.qos.logback</groupId>  \n    <artifactId>logback-core</artifactId>  \n    <version>1.1.4</version>  \n</dependency>  \n\n<dependency>  \n    <groupId>org.slf4j</groupId>  \n    <artifactId>log4j-over-slf4j</artifactId>  \n    <version>1.7.20</version>  \n</dependency>  \n<dependency>  \n    <groupId>org.slf4j</groupId>  \n    <artifactId>slf4j-api</artifactId>  \n    <version>1.7.21</version>  \n</dependency>  \n<dependency>  \n    <groupId>org.logback-extensions</groupId>  \n    <artifactId>logback-ext-spring</artifactId>  \n    <version>0.1.2</version>  \n</dependency>  \n<dependency>  \n    <groupId>org.slf4j</groupId>  \n    <artifactId>jcl-over-slf4j</artifactId>  \n    <version>1.7.12</version>  \n</dependency>  \n```\n注意：删除原有的log4j.jar。\n如上所示是集成所需要的依赖，其中：\n第一个logback-classic包含了logback本身所需的slf4j-api.jar、logback-core.jar及logback-classsic.jar\n第二个logback-ext-spring是由官方提供的对Spring的支持，它的作用就相当于log4j中的Log4jConfigListener；这个listener，网上大多都是用的自己实现的，原因在于这个插件似乎并没有出现在官方文档的显要位置导致大多数人并不知道它的存在\n第三个jcl-over-slf4j是用来把Spring源代码中大量使用到的commons-logging替换成slf4j，只有在添加了这个依赖之后才能看到Spring框架本身打印的日志，否则只能看到开发者自己打印的日志\n\n#### 编写logback.xml\n\nlogback与log4j一样，也需要在classpath中编写配置文件。但logback配置文件似乎比log4j复杂一些：log4j不仅支持xml格式的配置文件，还支持properties格式的，而logback只支持xml格式的。好在官方提供了一个在线工具，可以将log4j的properties文件直接转换成logback的xml文件，地址如下：\n[http://logback.qos.ch/translator/](http://logback.qos.ch/translator/)\nlogback的详细用法及其xml文件的相关语法，可参见它的用户向导，地址如下：\n[http://logback.qos.ch/manual/introduction.html](http://logback.qos.ch/manual/introduction.html)\n\n#### 配置web.xml\n\n与log4j类似，logback集成到Spring MVC项目中，也需要在web.xml中进行配置，同样也是配置一个config location和一个config listener，如下所示：\n```java\n<context-param>  \n         <param-name>logbackConfigLocation</param-name>  \n         <param-value>classpath:logback.xml</param-value>  \n</context-param>  \n<listener>  \n         <listener-class>ch.qos.logback.ext.spring.web.LogbackConfigListener</listener-class>  \n</listener>  \n```\n其中LogbackConfigListener由前述的logback-ext-spring依赖提供，若不依赖它则找不到这个listener类\n\n### 其它\n\n从上面可以看出，slf4j-log4j和slf4j-logback集成到Spring MVC（或推广到其它Java Web项目中）的步骤大体是相同的。集成完毕后，就可以通过slf4j提供的API隐藏掉logback（或log4j）的具体实现，直接进行日志处理了\n使用slf4j-api的时候，需要注意的是：slf4j采用了单例模式，项目中创建的每一个Logger实例都会按你传入的name（传入的Class<?>实例也会被转换成String型的name）保存到一个静态的ConcurrentHashMap中；因此只要name（或Class<?>实例）相同，每次返回的实际上都是同一个Logger实例。因此完全没必要把Logger实例作为常量或静态成员，随用随取即可。实际上，其作者也不建议那么做","slug":"spring-中使用-logback打印日志，替换其他日志如log4j-commons-logging","published":1,"updated":"2018-04-25T12:46:59.498Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2fj0nq7001vq4vgd5l10066","content":"<h3 id=\"Spring-MVC集成slf4j-log4j\"><a href=\"#Spring-MVC集成slf4j-log4j\" class=\"headerlink\" title=\"Spring MVC集成slf4j-log4j\"></a>Spring MVC集成slf4j-log4j</h3><p>关于slf4j和log4j的相关介绍和用法，网上有很多文章可供参考，但是关于logback的，尤其是spring MVC集成logback的，就相对少一些了，而且其中一些也有着这样那样的问题。进入正题之前先简单介绍下Spring MVC集成slf4j-log4j的过程，如下：</p><a id=\"more\"></a>\n<ul>\n<li>在pom.xml文件中添加slf4j-log4j的依赖，完成后的classpath中将新增三个jar包，分别是：slf4j-api.jar、log4j.jar及slf4j-log4j.jar</li>\n<li>在当前classpath中添加log4j.properties配置文件，按照log4j的参数语法编写该文件</li>\n<li>以上两步完成后，普通的Java项目就能使用slf4j-log4j进行日志处理了；对于Java Web项目，还需要在web.xml文件中配置Log4jConfigLocation和Log4jConfigListener</li>\n</ul>\n<h3 id=\"log4j与logback简要比较\"><a href=\"#log4j与logback简要比较\" class=\"headerlink\" title=\"log4j与logback简要比较\"></a>log4j与logback简要比较</h3><p>本文意在阐述用logback替代log4j作为Spring MVC项目的日志处理组件。这两者虽然作者相同，但log4j早已被托管给Apache基金会维护，并且自从2012年5月之后就没有更新了。而logback从出生开始就是其作者奔着取代log4j的目的开发的，因此一方面logback继承了log4j大量的用法，使得学习和迁移的成本不高，另一方面logback在性能上要明显优于log4j，尤其是在大量并发的环境下，并且新增了一些log4j所没有的功能（如将日志文件压缩成zip包等）</p>\n<h3 id=\"Spring-MVC集成slf4j-logback\"><a href=\"#Spring-MVC集成slf4j-logback\" class=\"headerlink\" title=\"Spring MVC集成slf4j-logback\"></a>Spring MVC集成slf4j-logback</h3><h4 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;  </span><br><span class=\"line\">    &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;  </span><br><span class=\"line\">    &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;  </span><br><span class=\"line\">    &lt;version&gt;1.1.4&lt;/version&gt;  </span><br><span class=\"line\">&lt;/dependency&gt;  </span><br><span class=\"line\">&lt;dependency&gt;  </span><br><span class=\"line\">    &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;  </span><br><span class=\"line\">    &lt;artifactId&gt;logback-core&lt;/artifactId&gt;  </span><br><span class=\"line\">    &lt;version&gt;1.1.4&lt;/version&gt;  </span><br><span class=\"line\">&lt;/dependency&gt;  </span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;  </span><br><span class=\"line\">    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;  </span><br><span class=\"line\">    &lt;artifactId&gt;log4j-over-slf4j&lt;/artifactId&gt;  </span><br><span class=\"line\">    &lt;version&gt;1.7.20&lt;/version&gt;  </span><br><span class=\"line\">&lt;/dependency&gt;  </span><br><span class=\"line\">&lt;dependency&gt;  </span><br><span class=\"line\">    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;  </span><br><span class=\"line\">    &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;  </span><br><span class=\"line\">    &lt;version&gt;1.7.21&lt;/version&gt;  </span><br><span class=\"line\">&lt;/dependency&gt;  </span><br><span class=\"line\">&lt;dependency&gt;  </span><br><span class=\"line\">    &lt;groupId&gt;org.logback-extensions&lt;/groupId&gt;  </span><br><span class=\"line\">    &lt;artifactId&gt;logback-ext-spring&lt;/artifactId&gt;  </span><br><span class=\"line\">    &lt;version&gt;0.1.2&lt;/version&gt;  </span><br><span class=\"line\">&lt;/dependency&gt;  </span><br><span class=\"line\">&lt;dependency&gt;  </span><br><span class=\"line\">    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;  </span><br><span class=\"line\">    &lt;artifactId&gt;jcl-over-slf4j&lt;/artifactId&gt;  </span><br><span class=\"line\">    &lt;version&gt;1.7.12&lt;/version&gt;  </span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>注意：删除原有的log4j.jar。<br>如上所示是集成所需要的依赖，其中：<br>第一个logback-classic包含了logback本身所需的slf4j-api.jar、logback-core.jar及logback-classsic.jar<br>第二个logback-ext-spring是由官方提供的对Spring的支持，它的作用就相当于log4j中的Log4jConfigListener；这个listener，网上大多都是用的自己实现的，原因在于这个插件似乎并没有出现在官方文档的显要位置导致大多数人并不知道它的存在<br>第三个jcl-over-slf4j是用来把Spring源代码中大量使用到的commons-logging替换成slf4j，只有在添加了这个依赖之后才能看到Spring框架本身打印的日志，否则只能看到开发者自己打印的日志</p>\n<h4 id=\"编写logback-xml\"><a href=\"#编写logback-xml\" class=\"headerlink\" title=\"编写logback.xml\"></a>编写logback.xml</h4><p>logback与log4j一样，也需要在classpath中编写配置文件。但logback配置文件似乎比log4j复杂一些：log4j不仅支持xml格式的配置文件，还支持properties格式的，而logback只支持xml格式的。好在官方提供了一个在线工具，可以将log4j的properties文件直接转换成logback的xml文件，地址如下：<br><a href=\"http://logback.qos.ch/translator/\" target=\"_blank\" rel=\"noopener\">http://logback.qos.ch/translator/</a><br>logback的详细用法及其xml文件的相关语法，可参见它的用户向导，地址如下：<br><a href=\"http://logback.qos.ch/manual/introduction.html\" target=\"_blank\" rel=\"noopener\">http://logback.qos.ch/manual/introduction.html</a></p>\n<h4 id=\"配置web-xml\"><a href=\"#配置web-xml\" class=\"headerlink\" title=\"配置web.xml\"></a>配置web.xml</h4><p>与log4j类似，logback集成到Spring MVC项目中，也需要在web.xml中进行配置，同样也是配置一个config location和一个config listener，如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;context-param&gt;  </span><br><span class=\"line\">         &lt;param-name&gt;logbackConfigLocation&lt;/param-name&gt;  </span><br><span class=\"line\">         &lt;param-value&gt;classpath:logback.xml&lt;/param-value&gt;  </span><br><span class=\"line\">&lt;/context-param&gt;  </span><br><span class=\"line\">&lt;listener&gt;  </span><br><span class=\"line\">         &lt;listener-<span class=\"class\"><span class=\"keyword\">class</span>&gt;<span class=\"title\">ch</span>.<span class=\"title\">qos</span>.<span class=\"title\">logback</span>.<span class=\"title\">ext</span>.<span class=\"title\">spring</span>.<span class=\"title\">web</span>.<span class=\"title\">LogbackConfigListener</span>&lt;/<span class=\"title\">listener</span>-<span class=\"title\">class</span>&gt;  </span></span><br><span class=\"line\"><span class=\"class\">&lt;/<span class=\"title\">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其中LogbackConfigListener由前述的logback-ext-spring依赖提供，若不依赖它则找不到这个listener类</p>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>从上面可以看出，slf4j-log4j和slf4j-logback集成到Spring MVC（或推广到其它Java Web项目中）的步骤大体是相同的。集成完毕后，就可以通过slf4j提供的API隐藏掉logback（或log4j）的具体实现，直接进行日志处理了<br>使用slf4j-api的时候，需要注意的是：slf4j采用了单例模式，项目中创建的每一个Logger实例都会按你传入的name（传入的Class<?>实例也会被转换成String型的name）保存到一个静态的ConcurrentHashMap中；因此只要name（或Class<?>实例）相同，每次返回的实际上都是同一个Logger实例。因此完全没必要把Logger实例作为常量或静态成员，随用随取即可。实际上，其作者也不建议那么做</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"Spring-MVC集成slf4j-log4j\"><a href=\"#Spring-MVC集成slf4j-log4j\" class=\"headerlink\" title=\"Spring MVC集成slf4j-log4j\"></a>Spring MVC集成slf4j-log4j</h3><p>关于slf4j和log4j的相关介绍和用法，网上有很多文章可供参考，但是关于logback的，尤其是spring MVC集成logback的，就相对少一些了，而且其中一些也有着这样那样的问题。进入正题之前先简单介绍下Spring MVC集成slf4j-log4j的过程，如下：</p>","more":"\n<ul>\n<li>在pom.xml文件中添加slf4j-log4j的依赖，完成后的classpath中将新增三个jar包，分别是：slf4j-api.jar、log4j.jar及slf4j-log4j.jar</li>\n<li>在当前classpath中添加log4j.properties配置文件，按照log4j的参数语法编写该文件</li>\n<li>以上两步完成后，普通的Java项目就能使用slf4j-log4j进行日志处理了；对于Java Web项目，还需要在web.xml文件中配置Log4jConfigLocation和Log4jConfigListener</li>\n</ul>\n<h3 id=\"log4j与logback简要比较\"><a href=\"#log4j与logback简要比较\" class=\"headerlink\" title=\"log4j与logback简要比较\"></a>log4j与logback简要比较</h3><p>本文意在阐述用logback替代log4j作为Spring MVC项目的日志处理组件。这两者虽然作者相同，但log4j早已被托管给Apache基金会维护，并且自从2012年5月之后就没有更新了。而logback从出生开始就是其作者奔着取代log4j的目的开发的，因此一方面logback继承了log4j大量的用法，使得学习和迁移的成本不高，另一方面logback在性能上要明显优于log4j，尤其是在大量并发的环境下，并且新增了一些log4j所没有的功能（如将日志文件压缩成zip包等）</p>\n<h3 id=\"Spring-MVC集成slf4j-logback\"><a href=\"#Spring-MVC集成slf4j-logback\" class=\"headerlink\" title=\"Spring MVC集成slf4j-logback\"></a>Spring MVC集成slf4j-logback</h3><h4 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;  </span><br><span class=\"line\">    &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;  </span><br><span class=\"line\">    &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;  </span><br><span class=\"line\">    &lt;version&gt;1.1.4&lt;/version&gt;  </span><br><span class=\"line\">&lt;/dependency&gt;  </span><br><span class=\"line\">&lt;dependency&gt;  </span><br><span class=\"line\">    &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;  </span><br><span class=\"line\">    &lt;artifactId&gt;logback-core&lt;/artifactId&gt;  </span><br><span class=\"line\">    &lt;version&gt;1.1.4&lt;/version&gt;  </span><br><span class=\"line\">&lt;/dependency&gt;  </span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;  </span><br><span class=\"line\">    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;  </span><br><span class=\"line\">    &lt;artifactId&gt;log4j-over-slf4j&lt;/artifactId&gt;  </span><br><span class=\"line\">    &lt;version&gt;1.7.20&lt;/version&gt;  </span><br><span class=\"line\">&lt;/dependency&gt;  </span><br><span class=\"line\">&lt;dependency&gt;  </span><br><span class=\"line\">    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;  </span><br><span class=\"line\">    &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;  </span><br><span class=\"line\">    &lt;version&gt;1.7.21&lt;/version&gt;  </span><br><span class=\"line\">&lt;/dependency&gt;  </span><br><span class=\"line\">&lt;dependency&gt;  </span><br><span class=\"line\">    &lt;groupId&gt;org.logback-extensions&lt;/groupId&gt;  </span><br><span class=\"line\">    &lt;artifactId&gt;logback-ext-spring&lt;/artifactId&gt;  </span><br><span class=\"line\">    &lt;version&gt;0.1.2&lt;/version&gt;  </span><br><span class=\"line\">&lt;/dependency&gt;  </span><br><span class=\"line\">&lt;dependency&gt;  </span><br><span class=\"line\">    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;  </span><br><span class=\"line\">    &lt;artifactId&gt;jcl-over-slf4j&lt;/artifactId&gt;  </span><br><span class=\"line\">    &lt;version&gt;1.7.12&lt;/version&gt;  </span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>注意：删除原有的log4j.jar。<br>如上所示是集成所需要的依赖，其中：<br>第一个logback-classic包含了logback本身所需的slf4j-api.jar、logback-core.jar及logback-classsic.jar<br>第二个logback-ext-spring是由官方提供的对Spring的支持，它的作用就相当于log4j中的Log4jConfigListener；这个listener，网上大多都是用的自己实现的，原因在于这个插件似乎并没有出现在官方文档的显要位置导致大多数人并不知道它的存在<br>第三个jcl-over-slf4j是用来把Spring源代码中大量使用到的commons-logging替换成slf4j，只有在添加了这个依赖之后才能看到Spring框架本身打印的日志，否则只能看到开发者自己打印的日志</p>\n<h4 id=\"编写logback-xml\"><a href=\"#编写logback-xml\" class=\"headerlink\" title=\"编写logback.xml\"></a>编写logback.xml</h4><p>logback与log4j一样，也需要在classpath中编写配置文件。但logback配置文件似乎比log4j复杂一些：log4j不仅支持xml格式的配置文件，还支持properties格式的，而logback只支持xml格式的。好在官方提供了一个在线工具，可以将log4j的properties文件直接转换成logback的xml文件，地址如下：<br><a href=\"http://logback.qos.ch/translator/\" target=\"_blank\" rel=\"noopener\">http://logback.qos.ch/translator/</a><br>logback的详细用法及其xml文件的相关语法，可参见它的用户向导，地址如下：<br><a href=\"http://logback.qos.ch/manual/introduction.html\" target=\"_blank\" rel=\"noopener\">http://logback.qos.ch/manual/introduction.html</a></p>\n<h4 id=\"配置web-xml\"><a href=\"#配置web-xml\" class=\"headerlink\" title=\"配置web.xml\"></a>配置web.xml</h4><p>与log4j类似，logback集成到Spring MVC项目中，也需要在web.xml中进行配置，同样也是配置一个config location和一个config listener，如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;context-param&gt;  </span><br><span class=\"line\">         &lt;param-name&gt;logbackConfigLocation&lt;/param-name&gt;  </span><br><span class=\"line\">         &lt;param-value&gt;classpath:logback.xml&lt;/param-value&gt;  </span><br><span class=\"line\">&lt;/context-param&gt;  </span><br><span class=\"line\">&lt;listener&gt;  </span><br><span class=\"line\">         &lt;listener-<span class=\"class\"><span class=\"keyword\">class</span>&gt;<span class=\"title\">ch</span>.<span class=\"title\">qos</span>.<span class=\"title\">logback</span>.<span class=\"title\">ext</span>.<span class=\"title\">spring</span>.<span class=\"title\">web</span>.<span class=\"title\">LogbackConfigListener</span>&lt;/<span class=\"title\">listener</span>-<span class=\"title\">class</span>&gt;  </span></span><br><span class=\"line\"><span class=\"class\">&lt;/<span class=\"title\">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其中LogbackConfigListener由前述的logback-ext-spring依赖提供，若不依赖它则找不到这个listener类</p>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>从上面可以看出，slf4j-log4j和slf4j-logback集成到Spring MVC（或推广到其它Java Web项目中）的步骤大体是相同的。集成完毕后，就可以通过slf4j提供的API隐藏掉logback（或log4j）的具体实现，直接进行日志处理了<br>使用slf4j-api的时候，需要注意的是：slf4j采用了单例模式，项目中创建的每一个Logger实例都会按你传入的name（传入的Class<?>实例也会被转换成String型的name）保存到一个静态的ConcurrentHashMap中；因此只要name（或Class<?>实例）相同，每次返回的实际上都是同一个Logger实例。因此完全没必要把Logger实例作为常量或静态成员，随用随取即可。实际上，其作者也不建议那么做</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Apr 25 2018 20:46:59 GMT+0800 (GMT+08:00)","title":"Spring 中使用 logback打印日志，替换其他日志如log4j,commons-logging","path":"2017/03/21/spring-中使用-logback打印日志，替换其他日志如log4j-commons-logging/","eyeCatchImage":null,"excerpt":null,"date":"2017-03-21T11:42:32.000Z","pv":0,"totalPV":0,"categories":"Essay","tags":["Java","Spring"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":3247},{"title":"Java开源项目","date":"2017-05-04T15:53:43.000Z","_content":"> 原文地址：http://blog.longjiazuo.com/archives/2625\n\n# 开源相关的文章链接：\n\n## Apache的开源软件列表\n\n> http://www.oschina.net/project/apache\n\n## Java开源Apache项目\n\n> http://www.open-open.com/56.htm\n\n## 阿里巴巴的开源软件列表\n\n> http://www.oschina.net/project/alibaba\n\n## 百度的开源软件列表\n\n> http://www.oschina.net/project/baidu\n\n## 腾讯的开源软件列表\n\n> http://www.oschina.net/project/tencent\n\n## 华为的开源软件列表\n\n> http://www.oschina.net/project/huawei\n\n## Netflix的开源软件列表\n\n> http://www.oschina.net/project/netflix\n\n## 大公司都有哪些开源项目\n\n> http://www.cnblogs.com/dunitian/p/5581520.html\n\n## 2017年你不能错过的Java类库\n\n> http://www.importnew.com/23858.html\n\n## 公司开源导航页\n\n> https://www.oschina.net/company\n\n# 开源项目链接地址：\n\n## 【spring项目】\n\n### spring以及子项目:\n\n> github地址:https://github.com/spring-projects\n\n## 【spring cloud项目】\n\n### spring cloud系列项目:\n\n> github地址:https://github.com/spring-cloud\n\n## 【apache基金会】\n\n### apache开源项目列表:\n\n> apache地址:http://www.apache.org/index.html#projects-list\n\n### apache项目github地址:\n\n> github地址:https://github.com/apache\n\n## 【eclipse基金会】\n\n### 轻量级的高性能JVM应用平台Vert.x\n\n> apache地址:https://github.com/eclipse/vert.x\n> 官方参考文档：http://vertx.io/docs/\n\n## 【阿里巴巴】\n\n### 开源JSON处理框架fastjson:\n\n> github地址:https://github.com/alibaba/fastjson\n\n### 开源数据库连接池druid：\n\n> github地址:https://github.com/alibaba/druid\n\n### 开源分布式服务框架dubbo：\n\n> github地址:https://github.com/alibaba/dubbo\n\n### 开源分布式开放消息队列RocketMQ：\n\n> github地址:https://github.com/alibaba/RocketMQ\n备注：RocketMQ已经进入apache孵化器,在孵化器的github地址如下：\n> github地址:https://github.com/apache/incubator-rocketmq\n\n### 开源实时流式计算框架jstorm\n\n> github地址:https://github.com/alibaba/jstorm\n\n### 开源分布式数据库同步系统otter\n\n> github地址:https://github.com/alibaba/otter\n\n### 开源分布式数据库服务中间件cobar\n\n> github地址:https://github.com/alibaba/cobar\n\n## 【唯品会】\n\n### 开源调度框架Saturn:\n\n> github地址:https://github.com/vipshop/Saturn\n\n## 【当当】\n\n### 开源调度框架elastic-job:\n\n> github地址:https://github.com/dangdangdotcom/elastic-job\n\n### 开源分库分表中间件Sharding-JDBC:\n\n> github地址:https://github.com/dangdangdotcom/sharding-jdbc\n\n### 开源分布式服务框架dubbox:\n\n> github地址:https://github.com/dangdangdotcom/dubbox\n\n## 【百度】\n\n### 分布式系统配置管理disconf\n\n> github地址:https://github.com/knightliao/disconf\n\n## 【腾讯】\n\n### 开源基于微服务的平台Tars\n\n> github地址:https://github.com/Tencent/Tars\n\n## 【携程】\n\n### 开源Redis多数据中心复制管理系统x-pipe\n\n> github地址:https://github.com/ctripcorp/x-pipe\n\n### 开源配置管理平台apollo\n\n> github地址:https://github.com/ctripcorp/apollo\n\n### 开源数据库访问框架dal\n\n> github地址:https://github.com/ctripcorp/dal\n\n## 【大众点评】\n\n### 开源实时应用监控平台cat\n\n> github地址:https://github.com/dianping/cat\n\n## 【谷歌Google】\n\n### 开源java轻量级IOC框架Guice\n\n> github地址:https://github.com/google/guice\n\n### 开源基于java1.6的类库集合的扩展guava\n\n> github地址:https://github.com/google/guava\n\n## 【移动支付公司Square】\n\n### 开源处理网络请求的网络框架OkHttp\n\n> github地址:https://github.com/square/okhttp\n\n### 网络请求框架Retrofit\n\n> github地址:https://github.com/square/retrofit\n\n## 【mybatis项目】\n\n### Sql映射持久层框架mybatis\n\n> github地址:https://github.com/mybatis/mybatis-3\n\n## 【hibernate项目】\n\n### 对象关系映射框架hibernate\n\n> github地址:https://github.com/hibernate/hibernate-orm\n\n## 开源组织或者个人项目\n\n说明：由于一些项目的名字比较类似,为了区分把作者加上,作者署名团队或者主要开发者。\n\n### spring boot中文参考文档\n\n作者：qibaoguang\n\n> github地址:https://github.com/qibaoguang/Spring-Boot-Reference-Guide\n\n### spring4中文参考文档\n\n作者：Way Lau\n\n> github地址:https://github.com/waylau/spring-framework-4-reference\n\n### 开源分布式数据库中间件Mycat-Server\n\n作者：mycat开源团队\n\n> github地址:https://github.com/MyCATApache/Mycat-Server\n\n### 开源分布式数据库中间件mycat文档mycat-doc\n\n作者：mycat开源团队\n\n> github地址:https://github.com/MyCATApache/Mycat-doc\n\n### 基于spring的基础框架库springside\n\n作者：江南白衣\n\n> github地址:https://github.com/springside/springside4\n\n### 开源信息化快速开发平台jeesite\n\n作者：thinkgem\n\n> github地址:https://github.com/thinkgem/jeesite\n\n### Java资源大全中文版awesome-java-cn\n\n作者：伯乐在线\n\n> github地址:https://github.com/jobbole/awesome-java-cn\n\n### 通用权限管理系统cl-privilege\n\n作者：pumadong\n\n> github地址:https://github.com/pumadong/cl-privilege\n\n### 开源分布式应用追踪分析系统sky-walking\n\n作者：sky-walking团队\n\n> github地址:https://github.com/wu-sheng/sky-walking\n\n### 轻量级Java Web框架smart-framework\n\n作者：黄勇\n\n> git.oschina地址:http://git.oschina.net/huangyong/smart-framework\n\n### 许雪里github:\n\n作者：许雪里\n\n> github地址:https://github.com/xuxueli\n\n### 响应式函数编程框架RxJava\n\n作者：ReactiveX\n\n> github地址:https://github.com/ReactiveX/RxJava\n\n### 常用的java基础工具类iceroot\n\n作者：iceroot\n\n> github地址:https://github.com/iceroot/iceroot\n\n### 开源轻量级的,高性能的事件总线MBassador\n\n作者：Benjamin Diedrichsen\n\n> github地址:https://github.com/bennidi/mbassador\n\n### 通过注解来减少Java中的重复代码工具lombok\n\n作者：Reinier Zwitserloot\n\n> github地址:https://github.com/rzwitserloot/lombok\n\n### 简单日志门面slf4j\n\n作者：QOS.ch\n\n> github地址:https://github.com/qos-ch/slf4j\n\n### 模拟测试框架Mockito\n\n作者：mockito\n\n> github地址:https://github.com/mockito/mockito\n\n### 结合JUnit、 Guice、 Mockito的高效组合测试框架Jukito\n\n作者：Arcbees\n\n> github地址:https://github.com/ArcBees/Jukito\n\n### 轻量化的分布式服务框架rsf\n\n作者：Hasor Group\n\n> 码云地址:http://git.oschina.net/zycgit/rs\n","source":"_posts/java开源项目.md","raw":"---\ntitle: Java开源项目\ndate: 2017-05-04 23:53:43\ntags: Java\ncategories: Collection\n---\n> 原文地址：http://blog.longjiazuo.com/archives/2625\n\n# 开源相关的文章链接：\n\n## Apache的开源软件列表\n\n> http://www.oschina.net/project/apache\n\n## Java开源Apache项目\n\n> http://www.open-open.com/56.htm\n\n## 阿里巴巴的开源软件列表\n\n> http://www.oschina.net/project/alibaba\n\n## 百度的开源软件列表\n\n> http://www.oschina.net/project/baidu\n\n## 腾讯的开源软件列表\n\n> http://www.oschina.net/project/tencent\n\n## 华为的开源软件列表\n\n> http://www.oschina.net/project/huawei\n\n## Netflix的开源软件列表\n\n> http://www.oschina.net/project/netflix\n\n## 大公司都有哪些开源项目\n\n> http://www.cnblogs.com/dunitian/p/5581520.html\n\n## 2017年你不能错过的Java类库\n\n> http://www.importnew.com/23858.html\n\n## 公司开源导航页\n\n> https://www.oschina.net/company\n\n# 开源项目链接地址：\n\n## 【spring项目】\n\n### spring以及子项目:\n\n> github地址:https://github.com/spring-projects\n\n## 【spring cloud项目】\n\n### spring cloud系列项目:\n\n> github地址:https://github.com/spring-cloud\n\n## 【apache基金会】\n\n### apache开源项目列表:\n\n> apache地址:http://www.apache.org/index.html#projects-list\n\n### apache项目github地址:\n\n> github地址:https://github.com/apache\n\n## 【eclipse基金会】\n\n### 轻量级的高性能JVM应用平台Vert.x\n\n> apache地址:https://github.com/eclipse/vert.x\n> 官方参考文档：http://vertx.io/docs/\n\n## 【阿里巴巴】\n\n### 开源JSON处理框架fastjson:\n\n> github地址:https://github.com/alibaba/fastjson\n\n### 开源数据库连接池druid：\n\n> github地址:https://github.com/alibaba/druid\n\n### 开源分布式服务框架dubbo：\n\n> github地址:https://github.com/alibaba/dubbo\n\n### 开源分布式开放消息队列RocketMQ：\n\n> github地址:https://github.com/alibaba/RocketMQ\n备注：RocketMQ已经进入apache孵化器,在孵化器的github地址如下：\n> github地址:https://github.com/apache/incubator-rocketmq\n\n### 开源实时流式计算框架jstorm\n\n> github地址:https://github.com/alibaba/jstorm\n\n### 开源分布式数据库同步系统otter\n\n> github地址:https://github.com/alibaba/otter\n\n### 开源分布式数据库服务中间件cobar\n\n> github地址:https://github.com/alibaba/cobar\n\n## 【唯品会】\n\n### 开源调度框架Saturn:\n\n> github地址:https://github.com/vipshop/Saturn\n\n## 【当当】\n\n### 开源调度框架elastic-job:\n\n> github地址:https://github.com/dangdangdotcom/elastic-job\n\n### 开源分库分表中间件Sharding-JDBC:\n\n> github地址:https://github.com/dangdangdotcom/sharding-jdbc\n\n### 开源分布式服务框架dubbox:\n\n> github地址:https://github.com/dangdangdotcom/dubbox\n\n## 【百度】\n\n### 分布式系统配置管理disconf\n\n> github地址:https://github.com/knightliao/disconf\n\n## 【腾讯】\n\n### 开源基于微服务的平台Tars\n\n> github地址:https://github.com/Tencent/Tars\n\n## 【携程】\n\n### 开源Redis多数据中心复制管理系统x-pipe\n\n> github地址:https://github.com/ctripcorp/x-pipe\n\n### 开源配置管理平台apollo\n\n> github地址:https://github.com/ctripcorp/apollo\n\n### 开源数据库访问框架dal\n\n> github地址:https://github.com/ctripcorp/dal\n\n## 【大众点评】\n\n### 开源实时应用监控平台cat\n\n> github地址:https://github.com/dianping/cat\n\n## 【谷歌Google】\n\n### 开源java轻量级IOC框架Guice\n\n> github地址:https://github.com/google/guice\n\n### 开源基于java1.6的类库集合的扩展guava\n\n> github地址:https://github.com/google/guava\n\n## 【移动支付公司Square】\n\n### 开源处理网络请求的网络框架OkHttp\n\n> github地址:https://github.com/square/okhttp\n\n### 网络请求框架Retrofit\n\n> github地址:https://github.com/square/retrofit\n\n## 【mybatis项目】\n\n### Sql映射持久层框架mybatis\n\n> github地址:https://github.com/mybatis/mybatis-3\n\n## 【hibernate项目】\n\n### 对象关系映射框架hibernate\n\n> github地址:https://github.com/hibernate/hibernate-orm\n\n## 开源组织或者个人项目\n\n说明：由于一些项目的名字比较类似,为了区分把作者加上,作者署名团队或者主要开发者。\n\n### spring boot中文参考文档\n\n作者：qibaoguang\n\n> github地址:https://github.com/qibaoguang/Spring-Boot-Reference-Guide\n\n### spring4中文参考文档\n\n作者：Way Lau\n\n> github地址:https://github.com/waylau/spring-framework-4-reference\n\n### 开源分布式数据库中间件Mycat-Server\n\n作者：mycat开源团队\n\n> github地址:https://github.com/MyCATApache/Mycat-Server\n\n### 开源分布式数据库中间件mycat文档mycat-doc\n\n作者：mycat开源团队\n\n> github地址:https://github.com/MyCATApache/Mycat-doc\n\n### 基于spring的基础框架库springside\n\n作者：江南白衣\n\n> github地址:https://github.com/springside/springside4\n\n### 开源信息化快速开发平台jeesite\n\n作者：thinkgem\n\n> github地址:https://github.com/thinkgem/jeesite\n\n### Java资源大全中文版awesome-java-cn\n\n作者：伯乐在线\n\n> github地址:https://github.com/jobbole/awesome-java-cn\n\n### 通用权限管理系统cl-privilege\n\n作者：pumadong\n\n> github地址:https://github.com/pumadong/cl-privilege\n\n### 开源分布式应用追踪分析系统sky-walking\n\n作者：sky-walking团队\n\n> github地址:https://github.com/wu-sheng/sky-walking\n\n### 轻量级Java Web框架smart-framework\n\n作者：黄勇\n\n> git.oschina地址:http://git.oschina.net/huangyong/smart-framework\n\n### 许雪里github:\n\n作者：许雪里\n\n> github地址:https://github.com/xuxueli\n\n### 响应式函数编程框架RxJava\n\n作者：ReactiveX\n\n> github地址:https://github.com/ReactiveX/RxJava\n\n### 常用的java基础工具类iceroot\n\n作者：iceroot\n\n> github地址:https://github.com/iceroot/iceroot\n\n### 开源轻量级的,高性能的事件总线MBassador\n\n作者：Benjamin Diedrichsen\n\n> github地址:https://github.com/bennidi/mbassador\n\n### 通过注解来减少Java中的重复代码工具lombok\n\n作者：Reinier Zwitserloot\n\n> github地址:https://github.com/rzwitserloot/lombok\n\n### 简单日志门面slf4j\n\n作者：QOS.ch\n\n> github地址:https://github.com/qos-ch/slf4j\n\n### 模拟测试框架Mockito\n\n作者：mockito\n\n> github地址:https://github.com/mockito/mockito\n\n### 结合JUnit、 Guice、 Mockito的高效组合测试框架Jukito\n\n作者：Arcbees\n\n> github地址:https://github.com/ArcBees/Jukito\n\n### 轻量化的分布式服务框架rsf\n\n作者：Hasor Group\n\n> 码云地址:http://git.oschina.net/zycgit/rs\n","slug":"java开源项目","published":1,"updated":"2018-04-25T12:46:59.498Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2fj0nqc001yq4vga8aee4d0","content":"<blockquote>\n<p>原文地址：<a href=\"http://blog.longjiazuo.com/archives/2625\" target=\"_blank\" rel=\"noopener\">http://blog.longjiazuo.com/archives/2625</a></p>\n</blockquote><h1 id=\"开源相关的文章链接：\"><a href=\"#开源相关的文章链接：\" class=\"headerlink\" title=\"开源相关的文章链接：\"></a>开源相关的文章链接：</h1><h2 id=\"Apache的开源软件列表\"><a href=\"#Apache的开源软件列表\" class=\"headerlink\" title=\"Apache的开源软件列表\"></a>Apache的开源软件列表</h2><blockquote>\n<p><a href=\"http://www.oschina.net/project/apache\" target=\"_blank\" rel=\"noopener\">http://www.oschina.net/project/apache</a></p>\n</blockquote><h2 id=\"Java开源Apache项目\"><a href=\"#Java开源Apache项目\" class=\"headerlink\" title=\"Java开源Apache项目\"></a>Java开源Apache项目</h2><blockquote>\n<p><a href=\"http://www.open-open.com/56.htm\" target=\"_blank\" rel=\"noopener\">http://www.open-open.com/56.htm</a></p>\n</blockquote><a id=\"more\"></a>\n\n\n<h2 id=\"阿里巴巴的开源软件列表\"><a href=\"#阿里巴巴的开源软件列表\" class=\"headerlink\" title=\"阿里巴巴的开源软件列表\"></a>阿里巴巴的开源软件列表</h2><blockquote>\n<p><a href=\"http://www.oschina.net/project/alibaba\" target=\"_blank\" rel=\"noopener\">http://www.oschina.net/project/alibaba</a></p>\n</blockquote>\n<h2 id=\"百度的开源软件列表\"><a href=\"#百度的开源软件列表\" class=\"headerlink\" title=\"百度的开源软件列表\"></a>百度的开源软件列表</h2><blockquote>\n<p><a href=\"http://www.oschina.net/project/baidu\" target=\"_blank\" rel=\"noopener\">http://www.oschina.net/project/baidu</a></p>\n</blockquote>\n<h2 id=\"腾讯的开源软件列表\"><a href=\"#腾讯的开源软件列表\" class=\"headerlink\" title=\"腾讯的开源软件列表\"></a>腾讯的开源软件列表</h2><blockquote>\n<p><a href=\"http://www.oschina.net/project/tencent\" target=\"_blank\" rel=\"noopener\">http://www.oschina.net/project/tencent</a></p>\n</blockquote>\n<h2 id=\"华为的开源软件列表\"><a href=\"#华为的开源软件列表\" class=\"headerlink\" title=\"华为的开源软件列表\"></a>华为的开源软件列表</h2><blockquote>\n<p><a href=\"http://www.oschina.net/project/huawei\" target=\"_blank\" rel=\"noopener\">http://www.oschina.net/project/huawei</a></p>\n</blockquote>\n<h2 id=\"Netflix的开源软件列表\"><a href=\"#Netflix的开源软件列表\" class=\"headerlink\" title=\"Netflix的开源软件列表\"></a>Netflix的开源软件列表</h2><blockquote>\n<p><a href=\"http://www.oschina.net/project/netflix\" target=\"_blank\" rel=\"noopener\">http://www.oschina.net/project/netflix</a></p>\n</blockquote>\n<h2 id=\"大公司都有哪些开源项目\"><a href=\"#大公司都有哪些开源项目\" class=\"headerlink\" title=\"大公司都有哪些开源项目\"></a>大公司都有哪些开源项目</h2><blockquote>\n<p><a href=\"http://www.cnblogs.com/dunitian/p/5581520.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/dunitian/p/5581520.html</a></p>\n</blockquote>\n<h2 id=\"2017年你不能错过的Java类库\"><a href=\"#2017年你不能错过的Java类库\" class=\"headerlink\" title=\"2017年你不能错过的Java类库\"></a>2017年你不能错过的Java类库</h2><blockquote>\n<p><a href=\"http://www.importnew.com/23858.html\" target=\"_blank\" rel=\"noopener\">http://www.importnew.com/23858.html</a></p>\n</blockquote>\n<h2 id=\"公司开源导航页\"><a href=\"#公司开源导航页\" class=\"headerlink\" title=\"公司开源导航页\"></a>公司开源导航页</h2><blockquote>\n<p><a href=\"https://www.oschina.net/company\" target=\"_blank\" rel=\"noopener\">https://www.oschina.net/company</a></p>\n</blockquote>\n<h1 id=\"开源项目链接地址：\"><a href=\"#开源项目链接地址：\" class=\"headerlink\" title=\"开源项目链接地址：\"></a>开源项目链接地址：</h1><h2 id=\"【spring项目】\"><a href=\"#【spring项目】\" class=\"headerlink\" title=\"【spring项目】\"></a>【spring项目】</h2><h3 id=\"spring以及子项目\"><a href=\"#spring以及子项目\" class=\"headerlink\" title=\"spring以及子项目:\"></a>spring以及子项目:</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/spring-projects\" target=\"_blank\" rel=\"noopener\">https://github.com/spring-projects</a></p>\n</blockquote>\n<h2 id=\"【spring-cloud项目】\"><a href=\"#【spring-cloud项目】\" class=\"headerlink\" title=\"【spring cloud项目】\"></a>【spring cloud项目】</h2><h3 id=\"spring-cloud系列项目\"><a href=\"#spring-cloud系列项目\" class=\"headerlink\" title=\"spring cloud系列项目:\"></a>spring cloud系列项目:</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/spring-cloud\" target=\"_blank\" rel=\"noopener\">https://github.com/spring-cloud</a></p>\n</blockquote>\n<h2 id=\"【apache基金会】\"><a href=\"#【apache基金会】\" class=\"headerlink\" title=\"【apache基金会】\"></a>【apache基金会】</h2><h3 id=\"apache开源项目列表\"><a href=\"#apache开源项目列表\" class=\"headerlink\" title=\"apache开源项目列表:\"></a>apache开源项目列表:</h3><blockquote>\n<p>apache地址:<a href=\"http://www.apache.org/index.html#projects-list\" target=\"_blank\" rel=\"noopener\">http://www.apache.org/index.html#projects-list</a></p>\n</blockquote>\n<h3 id=\"apache项目github地址\"><a href=\"#apache项目github地址\" class=\"headerlink\" title=\"apache项目github地址:\"></a>apache项目github地址:</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/apache\" target=\"_blank\" rel=\"noopener\">https://github.com/apache</a></p>\n</blockquote>\n<h2 id=\"【eclipse基金会】\"><a href=\"#【eclipse基金会】\" class=\"headerlink\" title=\"【eclipse基金会】\"></a>【eclipse基金会】</h2><h3 id=\"轻量级的高性能JVM应用平台Vert-x\"><a href=\"#轻量级的高性能JVM应用平台Vert-x\" class=\"headerlink\" title=\"轻量级的高性能JVM应用平台Vert.x\"></a>轻量级的高性能JVM应用平台Vert.x</h3><blockquote>\n<p>apache地址:<a href=\"https://github.com/eclipse/vert.x\" target=\"_blank\" rel=\"noopener\">https://github.com/eclipse/vert.x</a><br>官方参考文档：<a href=\"http://vertx.io/docs/\" target=\"_blank\" rel=\"noopener\">http://vertx.io/docs/</a></p>\n</blockquote>\n<h2 id=\"【阿里巴巴】\"><a href=\"#【阿里巴巴】\" class=\"headerlink\" title=\"【阿里巴巴】\"></a>【阿里巴巴】</h2><h3 id=\"开源JSON处理框架fastjson\"><a href=\"#开源JSON处理框架fastjson\" class=\"headerlink\" title=\"开源JSON处理框架fastjson:\"></a>开源JSON处理框架fastjson:</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/alibaba/fastjson\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/fastjson</a></p>\n</blockquote>\n<h3 id=\"开源数据库连接池druid：\"><a href=\"#开源数据库连接池druid：\" class=\"headerlink\" title=\"开源数据库连接池druid：\"></a>开源数据库连接池druid：</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/alibaba/druid\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/druid</a></p>\n</blockquote>\n<h3 id=\"开源分布式服务框架dubbo：\"><a href=\"#开源分布式服务框架dubbo：\" class=\"headerlink\" title=\"开源分布式服务框架dubbo：\"></a>开源分布式服务框架dubbo：</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/alibaba/dubbo\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/dubbo</a></p>\n</blockquote>\n<h3 id=\"开源分布式开放消息队列RocketMQ：\"><a href=\"#开源分布式开放消息队列RocketMQ：\" class=\"headerlink\" title=\"开源分布式开放消息队列RocketMQ：\"></a>开源分布式开放消息队列RocketMQ：</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/alibaba/RocketMQ\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/RocketMQ</a><br>备注：RocketMQ已经进入apache孵化器,在孵化器的github地址如下：<br>github地址:<a href=\"https://github.com/apache/incubator-rocketmq\" target=\"_blank\" rel=\"noopener\">https://github.com/apache/incubator-rocketmq</a></p>\n</blockquote>\n<h3 id=\"开源实时流式计算框架jstorm\"><a href=\"#开源实时流式计算框架jstorm\" class=\"headerlink\" title=\"开源实时流式计算框架jstorm\"></a>开源实时流式计算框架jstorm</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/alibaba/jstorm\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/jstorm</a></p>\n</blockquote>\n<h3 id=\"开源分布式数据库同步系统otter\"><a href=\"#开源分布式数据库同步系统otter\" class=\"headerlink\" title=\"开源分布式数据库同步系统otter\"></a>开源分布式数据库同步系统otter</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/alibaba/otter\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/otter</a></p>\n</blockquote>\n<h3 id=\"开源分布式数据库服务中间件cobar\"><a href=\"#开源分布式数据库服务中间件cobar\" class=\"headerlink\" title=\"开源分布式数据库服务中间件cobar\"></a>开源分布式数据库服务中间件cobar</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/alibaba/cobar\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/cobar</a></p>\n</blockquote>\n<h2 id=\"【唯品会】\"><a href=\"#【唯品会】\" class=\"headerlink\" title=\"【唯品会】\"></a>【唯品会】</h2><h3 id=\"开源调度框架Saturn\"><a href=\"#开源调度框架Saturn\" class=\"headerlink\" title=\"开源调度框架Saturn:\"></a>开源调度框架Saturn:</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/vipshop/Saturn\" target=\"_blank\" rel=\"noopener\">https://github.com/vipshop/Saturn</a></p>\n</blockquote>\n<h2 id=\"【当当】\"><a href=\"#【当当】\" class=\"headerlink\" title=\"【当当】\"></a>【当当】</h2><h3 id=\"开源调度框架elastic-job\"><a href=\"#开源调度框架elastic-job\" class=\"headerlink\" title=\"开源调度框架elastic-job:\"></a>开源调度框架elastic-job:</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/dangdangdotcom/elastic-job\" target=\"_blank\" rel=\"noopener\">https://github.com/dangdangdotcom/elastic-job</a></p>\n</blockquote>\n<h3 id=\"开源分库分表中间件Sharding-JDBC\"><a href=\"#开源分库分表中间件Sharding-JDBC\" class=\"headerlink\" title=\"开源分库分表中间件Sharding-JDBC:\"></a>开源分库分表中间件Sharding-JDBC:</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/dangdangdotcom/sharding-jdbc\" target=\"_blank\" rel=\"noopener\">https://github.com/dangdangdotcom/sharding-jdbc</a></p>\n</blockquote>\n<h3 id=\"开源分布式服务框架dubbox\"><a href=\"#开源分布式服务框架dubbox\" class=\"headerlink\" title=\"开源分布式服务框架dubbox:\"></a>开源分布式服务框架dubbox:</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/dangdangdotcom/dubbox\" target=\"_blank\" rel=\"noopener\">https://github.com/dangdangdotcom/dubbox</a></p>\n</blockquote>\n<h2 id=\"【百度】\"><a href=\"#【百度】\" class=\"headerlink\" title=\"【百度】\"></a>【百度】</h2><h3 id=\"分布式系统配置管理disconf\"><a href=\"#分布式系统配置管理disconf\" class=\"headerlink\" title=\"分布式系统配置管理disconf\"></a>分布式系统配置管理disconf</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/knightliao/disconf\" target=\"_blank\" rel=\"noopener\">https://github.com/knightliao/disconf</a></p>\n</blockquote>\n<h2 id=\"【腾讯】\"><a href=\"#【腾讯】\" class=\"headerlink\" title=\"【腾讯】\"></a>【腾讯】</h2><h3 id=\"开源基于微服务的平台Tars\"><a href=\"#开源基于微服务的平台Tars\" class=\"headerlink\" title=\"开源基于微服务的平台Tars\"></a>开源基于微服务的平台Tars</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/Tencent/Tars\" target=\"_blank\" rel=\"noopener\">https://github.com/Tencent/Tars</a></p>\n</blockquote>\n<h2 id=\"【携程】\"><a href=\"#【携程】\" class=\"headerlink\" title=\"【携程】\"></a>【携程】</h2><h3 id=\"开源Redis多数据中心复制管理系统x-pipe\"><a href=\"#开源Redis多数据中心复制管理系统x-pipe\" class=\"headerlink\" title=\"开源Redis多数据中心复制管理系统x-pipe\"></a>开源Redis多数据中心复制管理系统x-pipe</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/ctripcorp/x-pipe\" target=\"_blank\" rel=\"noopener\">https://github.com/ctripcorp/x-pipe</a></p>\n</blockquote>\n<h3 id=\"开源配置管理平台apollo\"><a href=\"#开源配置管理平台apollo\" class=\"headerlink\" title=\"开源配置管理平台apollo\"></a>开源配置管理平台apollo</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/ctripcorp/apollo\" target=\"_blank\" rel=\"noopener\">https://github.com/ctripcorp/apollo</a></p>\n</blockquote>\n<h3 id=\"开源数据库访问框架dal\"><a href=\"#开源数据库访问框架dal\" class=\"headerlink\" title=\"开源数据库访问框架dal\"></a>开源数据库访问框架dal</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/ctripcorp/dal\" target=\"_blank\" rel=\"noopener\">https://github.com/ctripcorp/dal</a></p>\n</blockquote>\n<h2 id=\"【大众点评】\"><a href=\"#【大众点评】\" class=\"headerlink\" title=\"【大众点评】\"></a>【大众点评】</h2><h3 id=\"开源实时应用监控平台cat\"><a href=\"#开源实时应用监控平台cat\" class=\"headerlink\" title=\"开源实时应用监控平台cat\"></a>开源实时应用监控平台cat</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/dianping/cat\" target=\"_blank\" rel=\"noopener\">https://github.com/dianping/cat</a></p>\n</blockquote>\n<h2 id=\"【谷歌Google】\"><a href=\"#【谷歌Google】\" class=\"headerlink\" title=\"【谷歌Google】\"></a>【谷歌Google】</h2><h3 id=\"开源java轻量级IOC框架Guice\"><a href=\"#开源java轻量级IOC框架Guice\" class=\"headerlink\" title=\"开源java轻量级IOC框架Guice\"></a>开源java轻量级IOC框架Guice</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/google/guice\" target=\"_blank\" rel=\"noopener\">https://github.com/google/guice</a></p>\n</blockquote>\n<h3 id=\"开源基于java1-6的类库集合的扩展guava\"><a href=\"#开源基于java1-6的类库集合的扩展guava\" class=\"headerlink\" title=\"开源基于java1.6的类库集合的扩展guava\"></a>开源基于java1.6的类库集合的扩展guava</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/google/guava\" target=\"_blank\" rel=\"noopener\">https://github.com/google/guava</a></p>\n</blockquote>\n<h2 id=\"【移动支付公司Square】\"><a href=\"#【移动支付公司Square】\" class=\"headerlink\" title=\"【移动支付公司Square】\"></a>【移动支付公司Square】</h2><h3 id=\"开源处理网络请求的网络框架OkHttp\"><a href=\"#开源处理网络请求的网络框架OkHttp\" class=\"headerlink\" title=\"开源处理网络请求的网络框架OkHttp\"></a>开源处理网络请求的网络框架OkHttp</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/square/okhttp\" target=\"_blank\" rel=\"noopener\">https://github.com/square/okhttp</a></p>\n</blockquote>\n<h3 id=\"网络请求框架Retrofit\"><a href=\"#网络请求框架Retrofit\" class=\"headerlink\" title=\"网络请求框架Retrofit\"></a>网络请求框架Retrofit</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/square/retrofit\" target=\"_blank\" rel=\"noopener\">https://github.com/square/retrofit</a></p>\n</blockquote>\n<h2 id=\"【mybatis项目】\"><a href=\"#【mybatis项目】\" class=\"headerlink\" title=\"【mybatis项目】\"></a>【mybatis项目】</h2><h3 id=\"Sql映射持久层框架mybatis\"><a href=\"#Sql映射持久层框架mybatis\" class=\"headerlink\" title=\"Sql映射持久层框架mybatis\"></a>Sql映射持久层框架mybatis</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/mybatis/mybatis-3\" target=\"_blank\" rel=\"noopener\">https://github.com/mybatis/mybatis-3</a></p>\n</blockquote>\n<h2 id=\"【hibernate项目】\"><a href=\"#【hibernate项目】\" class=\"headerlink\" title=\"【hibernate项目】\"></a>【hibernate项目】</h2><h3 id=\"对象关系映射框架hibernate\"><a href=\"#对象关系映射框架hibernate\" class=\"headerlink\" title=\"对象关系映射框架hibernate\"></a>对象关系映射框架hibernate</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/hibernate/hibernate-orm\" target=\"_blank\" rel=\"noopener\">https://github.com/hibernate/hibernate-orm</a></p>\n</blockquote>\n<h2 id=\"开源组织或者个人项目\"><a href=\"#开源组织或者个人项目\" class=\"headerlink\" title=\"开源组织或者个人项目\"></a>开源组织或者个人项目</h2><p>说明：由于一些项目的名字比较类似,为了区分把作者加上,作者署名团队或者主要开发者。</p>\n<h3 id=\"spring-boot中文参考文档\"><a href=\"#spring-boot中文参考文档\" class=\"headerlink\" title=\"spring boot中文参考文档\"></a>spring boot中文参考文档</h3><p>作者：qibaoguang</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/qibaoguang/Spring-Boot-Reference-Guide\" target=\"_blank\" rel=\"noopener\">https://github.com/qibaoguang/Spring-Boot-Reference-Guide</a></p>\n</blockquote>\n<h3 id=\"spring4中文参考文档\"><a href=\"#spring4中文参考文档\" class=\"headerlink\" title=\"spring4中文参考文档\"></a>spring4中文参考文档</h3><p>作者：Way Lau</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/waylau/spring-framework-4-reference\" target=\"_blank\" rel=\"noopener\">https://github.com/waylau/spring-framework-4-reference</a></p>\n</blockquote>\n<h3 id=\"开源分布式数据库中间件Mycat-Server\"><a href=\"#开源分布式数据库中间件Mycat-Server\" class=\"headerlink\" title=\"开源分布式数据库中间件Mycat-Server\"></a>开源分布式数据库中间件Mycat-Server</h3><p>作者：mycat开源团队</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/MyCATApache/Mycat-Server\" target=\"_blank\" rel=\"noopener\">https://github.com/MyCATApache/Mycat-Server</a></p>\n</blockquote>\n<h3 id=\"开源分布式数据库中间件mycat文档mycat-doc\"><a href=\"#开源分布式数据库中间件mycat文档mycat-doc\" class=\"headerlink\" title=\"开源分布式数据库中间件mycat文档mycat-doc\"></a>开源分布式数据库中间件mycat文档mycat-doc</h3><p>作者：mycat开源团队</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/MyCATApache/Mycat-doc\" target=\"_blank\" rel=\"noopener\">https://github.com/MyCATApache/Mycat-doc</a></p>\n</blockquote>\n<h3 id=\"基于spring的基础框架库springside\"><a href=\"#基于spring的基础框架库springside\" class=\"headerlink\" title=\"基于spring的基础框架库springside\"></a>基于spring的基础框架库springside</h3><p>作者：江南白衣</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/springside/springside4\" target=\"_blank\" rel=\"noopener\">https://github.com/springside/springside4</a></p>\n</blockquote>\n<h3 id=\"开源信息化快速开发平台jeesite\"><a href=\"#开源信息化快速开发平台jeesite\" class=\"headerlink\" title=\"开源信息化快速开发平台jeesite\"></a>开源信息化快速开发平台jeesite</h3><p>作者：thinkgem</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/thinkgem/jeesite\" target=\"_blank\" rel=\"noopener\">https://github.com/thinkgem/jeesite</a></p>\n</blockquote>\n<h3 id=\"Java资源大全中文版awesome-java-cn\"><a href=\"#Java资源大全中文版awesome-java-cn\" class=\"headerlink\" title=\"Java资源大全中文版awesome-java-cn\"></a>Java资源大全中文版awesome-java-cn</h3><p>作者：伯乐在线</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/jobbole/awesome-java-cn\" target=\"_blank\" rel=\"noopener\">https://github.com/jobbole/awesome-java-cn</a></p>\n</blockquote>\n<h3 id=\"通用权限管理系统cl-privilege\"><a href=\"#通用权限管理系统cl-privilege\" class=\"headerlink\" title=\"通用权限管理系统cl-privilege\"></a>通用权限管理系统cl-privilege</h3><p>作者：pumadong</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/pumadong/cl-privilege\" target=\"_blank\" rel=\"noopener\">https://github.com/pumadong/cl-privilege</a></p>\n</blockquote>\n<h3 id=\"开源分布式应用追踪分析系统sky-walking\"><a href=\"#开源分布式应用追踪分析系统sky-walking\" class=\"headerlink\" title=\"开源分布式应用追踪分析系统sky-walking\"></a>开源分布式应用追踪分析系统sky-walking</h3><p>作者：sky-walking团队</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/wu-sheng/sky-walking\" target=\"_blank\" rel=\"noopener\">https://github.com/wu-sheng/sky-walking</a></p>\n</blockquote>\n<h3 id=\"轻量级Java-Web框架smart-framework\"><a href=\"#轻量级Java-Web框架smart-framework\" class=\"headerlink\" title=\"轻量级Java Web框架smart-framework\"></a>轻量级Java Web框架smart-framework</h3><p>作者：黄勇</p>\n<blockquote>\n<p>git.oschina地址:<a href=\"http://git.oschina.net/huangyong/smart-framework\" target=\"_blank\" rel=\"noopener\">http://git.oschina.net/huangyong/smart-framework</a></p>\n</blockquote>\n<h3 id=\"许雪里github\"><a href=\"#许雪里github\" class=\"headerlink\" title=\"许雪里github:\"></a>许雪里github:</h3><p>作者：许雪里</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/xuxueli\" target=\"_blank\" rel=\"noopener\">https://github.com/xuxueli</a></p>\n</blockquote>\n<h3 id=\"响应式函数编程框架RxJava\"><a href=\"#响应式函数编程框架RxJava\" class=\"headerlink\" title=\"响应式函数编程框架RxJava\"></a>响应式函数编程框架RxJava</h3><p>作者：ReactiveX</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/ReactiveX/RxJava\" target=\"_blank\" rel=\"noopener\">https://github.com/ReactiveX/RxJava</a></p>\n</blockquote>\n<h3 id=\"常用的java基础工具类iceroot\"><a href=\"#常用的java基础工具类iceroot\" class=\"headerlink\" title=\"常用的java基础工具类iceroot\"></a>常用的java基础工具类iceroot</h3><p>作者：iceroot</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/iceroot/iceroot\" target=\"_blank\" rel=\"noopener\">https://github.com/iceroot/iceroot</a></p>\n</blockquote>\n<h3 id=\"开源轻量级的-高性能的事件总线MBassador\"><a href=\"#开源轻量级的-高性能的事件总线MBassador\" class=\"headerlink\" title=\"开源轻量级的,高性能的事件总线MBassador\"></a>开源轻量级的,高性能的事件总线MBassador</h3><p>作者：Benjamin Diedrichsen</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/bennidi/mbassador\" target=\"_blank\" rel=\"noopener\">https://github.com/bennidi/mbassador</a></p>\n</blockquote>\n<h3 id=\"通过注解来减少Java中的重复代码工具lombok\"><a href=\"#通过注解来减少Java中的重复代码工具lombok\" class=\"headerlink\" title=\"通过注解来减少Java中的重复代码工具lombok\"></a>通过注解来减少Java中的重复代码工具lombok</h3><p>作者：Reinier Zwitserloot</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/rzwitserloot/lombok\" target=\"_blank\" rel=\"noopener\">https://github.com/rzwitserloot/lombok</a></p>\n</blockquote>\n<h3 id=\"简单日志门面slf4j\"><a href=\"#简单日志门面slf4j\" class=\"headerlink\" title=\"简单日志门面slf4j\"></a>简单日志门面slf4j</h3><p>作者：QOS.ch</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/qos-ch/slf4j\" target=\"_blank\" rel=\"noopener\">https://github.com/qos-ch/slf4j</a></p>\n</blockquote>\n<h3 id=\"模拟测试框架Mockito\"><a href=\"#模拟测试框架Mockito\" class=\"headerlink\" title=\"模拟测试框架Mockito\"></a>模拟测试框架Mockito</h3><p>作者：mockito</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/mockito/mockito\" target=\"_blank\" rel=\"noopener\">https://github.com/mockito/mockito</a></p>\n</blockquote>\n<h3 id=\"结合JUnit、-Guice、-Mockito的高效组合测试框架Jukito\"><a href=\"#结合JUnit、-Guice、-Mockito的高效组合测试框架Jukito\" class=\"headerlink\" title=\"结合JUnit、 Guice、 Mockito的高效组合测试框架Jukito\"></a>结合JUnit、 Guice、 Mockito的高效组合测试框架Jukito</h3><p>作者：Arcbees</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/ArcBees/Jukito\" target=\"_blank\" rel=\"noopener\">https://github.com/ArcBees/Jukito</a></p>\n</blockquote>\n<h3 id=\"轻量化的分布式服务框架rsf\"><a href=\"#轻量化的分布式服务框架rsf\" class=\"headerlink\" title=\"轻量化的分布式服务框架rsf\"></a>轻量化的分布式服务框架rsf</h3><p>作者：Hasor Group</p>\n<blockquote>\n<p>码云地址:<a href=\"http://git.oschina.net/zycgit/rs\" target=\"_blank\" rel=\"noopener\">http://git.oschina.net/zycgit/rs</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>原文地址：<a href=\"http://blog.longjiazuo.com/archives/2625\" target=\"_blank\" rel=\"noopener\">http://blog.longjiazuo.com/archives/2625</a></p>\n</blockquote><h1 id=\"开源相关的文章链接：\"><a href=\"#开源相关的文章链接：\" class=\"headerlink\" title=\"开源相关的文章链接：\"></a>开源相关的文章链接：</h1><h2 id=\"Apache的开源软件列表\"><a href=\"#Apache的开源软件列表\" class=\"headerlink\" title=\"Apache的开源软件列表\"></a>Apache的开源软件列表</h2><blockquote>\n<p><a href=\"http://www.oschina.net/project/apache\" target=\"_blank\" rel=\"noopener\">http://www.oschina.net/project/apache</a></p>\n</blockquote><h2 id=\"Java开源Apache项目\"><a href=\"#Java开源Apache项目\" class=\"headerlink\" title=\"Java开源Apache项目\"></a>Java开源Apache项目</h2><blockquote>\n<p><a href=\"http://www.open-open.com/56.htm\" target=\"_blank\" rel=\"noopener\">http://www.open-open.com/56.htm</a></p>\n</blockquote>","more":"\n\n\n<h2 id=\"阿里巴巴的开源软件列表\"><a href=\"#阿里巴巴的开源软件列表\" class=\"headerlink\" title=\"阿里巴巴的开源软件列表\"></a>阿里巴巴的开源软件列表</h2><blockquote>\n<p><a href=\"http://www.oschina.net/project/alibaba\" target=\"_blank\" rel=\"noopener\">http://www.oschina.net/project/alibaba</a></p>\n</blockquote>\n<h2 id=\"百度的开源软件列表\"><a href=\"#百度的开源软件列表\" class=\"headerlink\" title=\"百度的开源软件列表\"></a>百度的开源软件列表</h2><blockquote>\n<p><a href=\"http://www.oschina.net/project/baidu\" target=\"_blank\" rel=\"noopener\">http://www.oschina.net/project/baidu</a></p>\n</blockquote>\n<h2 id=\"腾讯的开源软件列表\"><a href=\"#腾讯的开源软件列表\" class=\"headerlink\" title=\"腾讯的开源软件列表\"></a>腾讯的开源软件列表</h2><blockquote>\n<p><a href=\"http://www.oschina.net/project/tencent\" target=\"_blank\" rel=\"noopener\">http://www.oschina.net/project/tencent</a></p>\n</blockquote>\n<h2 id=\"华为的开源软件列表\"><a href=\"#华为的开源软件列表\" class=\"headerlink\" title=\"华为的开源软件列表\"></a>华为的开源软件列表</h2><blockquote>\n<p><a href=\"http://www.oschina.net/project/huawei\" target=\"_blank\" rel=\"noopener\">http://www.oschina.net/project/huawei</a></p>\n</blockquote>\n<h2 id=\"Netflix的开源软件列表\"><a href=\"#Netflix的开源软件列表\" class=\"headerlink\" title=\"Netflix的开源软件列表\"></a>Netflix的开源软件列表</h2><blockquote>\n<p><a href=\"http://www.oschina.net/project/netflix\" target=\"_blank\" rel=\"noopener\">http://www.oschina.net/project/netflix</a></p>\n</blockquote>\n<h2 id=\"大公司都有哪些开源项目\"><a href=\"#大公司都有哪些开源项目\" class=\"headerlink\" title=\"大公司都有哪些开源项目\"></a>大公司都有哪些开源项目</h2><blockquote>\n<p><a href=\"http://www.cnblogs.com/dunitian/p/5581520.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/dunitian/p/5581520.html</a></p>\n</blockquote>\n<h2 id=\"2017年你不能错过的Java类库\"><a href=\"#2017年你不能错过的Java类库\" class=\"headerlink\" title=\"2017年你不能错过的Java类库\"></a>2017年你不能错过的Java类库</h2><blockquote>\n<p><a href=\"http://www.importnew.com/23858.html\" target=\"_blank\" rel=\"noopener\">http://www.importnew.com/23858.html</a></p>\n</blockquote>\n<h2 id=\"公司开源导航页\"><a href=\"#公司开源导航页\" class=\"headerlink\" title=\"公司开源导航页\"></a>公司开源导航页</h2><blockquote>\n<p><a href=\"https://www.oschina.net/company\" target=\"_blank\" rel=\"noopener\">https://www.oschina.net/company</a></p>\n</blockquote>\n<h1 id=\"开源项目链接地址：\"><a href=\"#开源项目链接地址：\" class=\"headerlink\" title=\"开源项目链接地址：\"></a>开源项目链接地址：</h1><h2 id=\"【spring项目】\"><a href=\"#【spring项目】\" class=\"headerlink\" title=\"【spring项目】\"></a>【spring项目】</h2><h3 id=\"spring以及子项目\"><a href=\"#spring以及子项目\" class=\"headerlink\" title=\"spring以及子项目:\"></a>spring以及子项目:</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/spring-projects\" target=\"_blank\" rel=\"noopener\">https://github.com/spring-projects</a></p>\n</blockquote>\n<h2 id=\"【spring-cloud项目】\"><a href=\"#【spring-cloud项目】\" class=\"headerlink\" title=\"【spring cloud项目】\"></a>【spring cloud项目】</h2><h3 id=\"spring-cloud系列项目\"><a href=\"#spring-cloud系列项目\" class=\"headerlink\" title=\"spring cloud系列项目:\"></a>spring cloud系列项目:</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/spring-cloud\" target=\"_blank\" rel=\"noopener\">https://github.com/spring-cloud</a></p>\n</blockquote>\n<h2 id=\"【apache基金会】\"><a href=\"#【apache基金会】\" class=\"headerlink\" title=\"【apache基金会】\"></a>【apache基金会】</h2><h3 id=\"apache开源项目列表\"><a href=\"#apache开源项目列表\" class=\"headerlink\" title=\"apache开源项目列表:\"></a>apache开源项目列表:</h3><blockquote>\n<p>apache地址:<a href=\"http://www.apache.org/index.html#projects-list\" target=\"_blank\" rel=\"noopener\">http://www.apache.org/index.html#projects-list</a></p>\n</blockquote>\n<h3 id=\"apache项目github地址\"><a href=\"#apache项目github地址\" class=\"headerlink\" title=\"apache项目github地址:\"></a>apache项目github地址:</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/apache\" target=\"_blank\" rel=\"noopener\">https://github.com/apache</a></p>\n</blockquote>\n<h2 id=\"【eclipse基金会】\"><a href=\"#【eclipse基金会】\" class=\"headerlink\" title=\"【eclipse基金会】\"></a>【eclipse基金会】</h2><h3 id=\"轻量级的高性能JVM应用平台Vert-x\"><a href=\"#轻量级的高性能JVM应用平台Vert-x\" class=\"headerlink\" title=\"轻量级的高性能JVM应用平台Vert.x\"></a>轻量级的高性能JVM应用平台Vert.x</h3><blockquote>\n<p>apache地址:<a href=\"https://github.com/eclipse/vert.x\" target=\"_blank\" rel=\"noopener\">https://github.com/eclipse/vert.x</a><br>官方参考文档：<a href=\"http://vertx.io/docs/\" target=\"_blank\" rel=\"noopener\">http://vertx.io/docs/</a></p>\n</blockquote>\n<h2 id=\"【阿里巴巴】\"><a href=\"#【阿里巴巴】\" class=\"headerlink\" title=\"【阿里巴巴】\"></a>【阿里巴巴】</h2><h3 id=\"开源JSON处理框架fastjson\"><a href=\"#开源JSON处理框架fastjson\" class=\"headerlink\" title=\"开源JSON处理框架fastjson:\"></a>开源JSON处理框架fastjson:</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/alibaba/fastjson\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/fastjson</a></p>\n</blockquote>\n<h3 id=\"开源数据库连接池druid：\"><a href=\"#开源数据库连接池druid：\" class=\"headerlink\" title=\"开源数据库连接池druid：\"></a>开源数据库连接池druid：</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/alibaba/druid\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/druid</a></p>\n</blockquote>\n<h3 id=\"开源分布式服务框架dubbo：\"><a href=\"#开源分布式服务框架dubbo：\" class=\"headerlink\" title=\"开源分布式服务框架dubbo：\"></a>开源分布式服务框架dubbo：</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/alibaba/dubbo\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/dubbo</a></p>\n</blockquote>\n<h3 id=\"开源分布式开放消息队列RocketMQ：\"><a href=\"#开源分布式开放消息队列RocketMQ：\" class=\"headerlink\" title=\"开源分布式开放消息队列RocketMQ：\"></a>开源分布式开放消息队列RocketMQ：</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/alibaba/RocketMQ\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/RocketMQ</a><br>备注：RocketMQ已经进入apache孵化器,在孵化器的github地址如下：<br>github地址:<a href=\"https://github.com/apache/incubator-rocketmq\" target=\"_blank\" rel=\"noopener\">https://github.com/apache/incubator-rocketmq</a></p>\n</blockquote>\n<h3 id=\"开源实时流式计算框架jstorm\"><a href=\"#开源实时流式计算框架jstorm\" class=\"headerlink\" title=\"开源实时流式计算框架jstorm\"></a>开源实时流式计算框架jstorm</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/alibaba/jstorm\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/jstorm</a></p>\n</blockquote>\n<h3 id=\"开源分布式数据库同步系统otter\"><a href=\"#开源分布式数据库同步系统otter\" class=\"headerlink\" title=\"开源分布式数据库同步系统otter\"></a>开源分布式数据库同步系统otter</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/alibaba/otter\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/otter</a></p>\n</blockquote>\n<h3 id=\"开源分布式数据库服务中间件cobar\"><a href=\"#开源分布式数据库服务中间件cobar\" class=\"headerlink\" title=\"开源分布式数据库服务中间件cobar\"></a>开源分布式数据库服务中间件cobar</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/alibaba/cobar\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/cobar</a></p>\n</blockquote>\n<h2 id=\"【唯品会】\"><a href=\"#【唯品会】\" class=\"headerlink\" title=\"【唯品会】\"></a>【唯品会】</h2><h3 id=\"开源调度框架Saturn\"><a href=\"#开源调度框架Saturn\" class=\"headerlink\" title=\"开源调度框架Saturn:\"></a>开源调度框架Saturn:</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/vipshop/Saturn\" target=\"_blank\" rel=\"noopener\">https://github.com/vipshop/Saturn</a></p>\n</blockquote>\n<h2 id=\"【当当】\"><a href=\"#【当当】\" class=\"headerlink\" title=\"【当当】\"></a>【当当】</h2><h3 id=\"开源调度框架elastic-job\"><a href=\"#开源调度框架elastic-job\" class=\"headerlink\" title=\"开源调度框架elastic-job:\"></a>开源调度框架elastic-job:</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/dangdangdotcom/elastic-job\" target=\"_blank\" rel=\"noopener\">https://github.com/dangdangdotcom/elastic-job</a></p>\n</blockquote>\n<h3 id=\"开源分库分表中间件Sharding-JDBC\"><a href=\"#开源分库分表中间件Sharding-JDBC\" class=\"headerlink\" title=\"开源分库分表中间件Sharding-JDBC:\"></a>开源分库分表中间件Sharding-JDBC:</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/dangdangdotcom/sharding-jdbc\" target=\"_blank\" rel=\"noopener\">https://github.com/dangdangdotcom/sharding-jdbc</a></p>\n</blockquote>\n<h3 id=\"开源分布式服务框架dubbox\"><a href=\"#开源分布式服务框架dubbox\" class=\"headerlink\" title=\"开源分布式服务框架dubbox:\"></a>开源分布式服务框架dubbox:</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/dangdangdotcom/dubbox\" target=\"_blank\" rel=\"noopener\">https://github.com/dangdangdotcom/dubbox</a></p>\n</blockquote>\n<h2 id=\"【百度】\"><a href=\"#【百度】\" class=\"headerlink\" title=\"【百度】\"></a>【百度】</h2><h3 id=\"分布式系统配置管理disconf\"><a href=\"#分布式系统配置管理disconf\" class=\"headerlink\" title=\"分布式系统配置管理disconf\"></a>分布式系统配置管理disconf</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/knightliao/disconf\" target=\"_blank\" rel=\"noopener\">https://github.com/knightliao/disconf</a></p>\n</blockquote>\n<h2 id=\"【腾讯】\"><a href=\"#【腾讯】\" class=\"headerlink\" title=\"【腾讯】\"></a>【腾讯】</h2><h3 id=\"开源基于微服务的平台Tars\"><a href=\"#开源基于微服务的平台Tars\" class=\"headerlink\" title=\"开源基于微服务的平台Tars\"></a>开源基于微服务的平台Tars</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/Tencent/Tars\" target=\"_blank\" rel=\"noopener\">https://github.com/Tencent/Tars</a></p>\n</blockquote>\n<h2 id=\"【携程】\"><a href=\"#【携程】\" class=\"headerlink\" title=\"【携程】\"></a>【携程】</h2><h3 id=\"开源Redis多数据中心复制管理系统x-pipe\"><a href=\"#开源Redis多数据中心复制管理系统x-pipe\" class=\"headerlink\" title=\"开源Redis多数据中心复制管理系统x-pipe\"></a>开源Redis多数据中心复制管理系统x-pipe</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/ctripcorp/x-pipe\" target=\"_blank\" rel=\"noopener\">https://github.com/ctripcorp/x-pipe</a></p>\n</blockquote>\n<h3 id=\"开源配置管理平台apollo\"><a href=\"#开源配置管理平台apollo\" class=\"headerlink\" title=\"开源配置管理平台apollo\"></a>开源配置管理平台apollo</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/ctripcorp/apollo\" target=\"_blank\" rel=\"noopener\">https://github.com/ctripcorp/apollo</a></p>\n</blockquote>\n<h3 id=\"开源数据库访问框架dal\"><a href=\"#开源数据库访问框架dal\" class=\"headerlink\" title=\"开源数据库访问框架dal\"></a>开源数据库访问框架dal</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/ctripcorp/dal\" target=\"_blank\" rel=\"noopener\">https://github.com/ctripcorp/dal</a></p>\n</blockquote>\n<h2 id=\"【大众点评】\"><a href=\"#【大众点评】\" class=\"headerlink\" title=\"【大众点评】\"></a>【大众点评】</h2><h3 id=\"开源实时应用监控平台cat\"><a href=\"#开源实时应用监控平台cat\" class=\"headerlink\" title=\"开源实时应用监控平台cat\"></a>开源实时应用监控平台cat</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/dianping/cat\" target=\"_blank\" rel=\"noopener\">https://github.com/dianping/cat</a></p>\n</blockquote>\n<h2 id=\"【谷歌Google】\"><a href=\"#【谷歌Google】\" class=\"headerlink\" title=\"【谷歌Google】\"></a>【谷歌Google】</h2><h3 id=\"开源java轻量级IOC框架Guice\"><a href=\"#开源java轻量级IOC框架Guice\" class=\"headerlink\" title=\"开源java轻量级IOC框架Guice\"></a>开源java轻量级IOC框架Guice</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/google/guice\" target=\"_blank\" rel=\"noopener\">https://github.com/google/guice</a></p>\n</blockquote>\n<h3 id=\"开源基于java1-6的类库集合的扩展guava\"><a href=\"#开源基于java1-6的类库集合的扩展guava\" class=\"headerlink\" title=\"开源基于java1.6的类库集合的扩展guava\"></a>开源基于java1.6的类库集合的扩展guava</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/google/guava\" target=\"_blank\" rel=\"noopener\">https://github.com/google/guava</a></p>\n</blockquote>\n<h2 id=\"【移动支付公司Square】\"><a href=\"#【移动支付公司Square】\" class=\"headerlink\" title=\"【移动支付公司Square】\"></a>【移动支付公司Square】</h2><h3 id=\"开源处理网络请求的网络框架OkHttp\"><a href=\"#开源处理网络请求的网络框架OkHttp\" class=\"headerlink\" title=\"开源处理网络请求的网络框架OkHttp\"></a>开源处理网络请求的网络框架OkHttp</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/square/okhttp\" target=\"_blank\" rel=\"noopener\">https://github.com/square/okhttp</a></p>\n</blockquote>\n<h3 id=\"网络请求框架Retrofit\"><a href=\"#网络请求框架Retrofit\" class=\"headerlink\" title=\"网络请求框架Retrofit\"></a>网络请求框架Retrofit</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/square/retrofit\" target=\"_blank\" rel=\"noopener\">https://github.com/square/retrofit</a></p>\n</blockquote>\n<h2 id=\"【mybatis项目】\"><a href=\"#【mybatis项目】\" class=\"headerlink\" title=\"【mybatis项目】\"></a>【mybatis项目】</h2><h3 id=\"Sql映射持久层框架mybatis\"><a href=\"#Sql映射持久层框架mybatis\" class=\"headerlink\" title=\"Sql映射持久层框架mybatis\"></a>Sql映射持久层框架mybatis</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/mybatis/mybatis-3\" target=\"_blank\" rel=\"noopener\">https://github.com/mybatis/mybatis-3</a></p>\n</blockquote>\n<h2 id=\"【hibernate项目】\"><a href=\"#【hibernate项目】\" class=\"headerlink\" title=\"【hibernate项目】\"></a>【hibernate项目】</h2><h3 id=\"对象关系映射框架hibernate\"><a href=\"#对象关系映射框架hibernate\" class=\"headerlink\" title=\"对象关系映射框架hibernate\"></a>对象关系映射框架hibernate</h3><blockquote>\n<p>github地址:<a href=\"https://github.com/hibernate/hibernate-orm\" target=\"_blank\" rel=\"noopener\">https://github.com/hibernate/hibernate-orm</a></p>\n</blockquote>\n<h2 id=\"开源组织或者个人项目\"><a href=\"#开源组织或者个人项目\" class=\"headerlink\" title=\"开源组织或者个人项目\"></a>开源组织或者个人项目</h2><p>说明：由于一些项目的名字比较类似,为了区分把作者加上,作者署名团队或者主要开发者。</p>\n<h3 id=\"spring-boot中文参考文档\"><a href=\"#spring-boot中文参考文档\" class=\"headerlink\" title=\"spring boot中文参考文档\"></a>spring boot中文参考文档</h3><p>作者：qibaoguang</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/qibaoguang/Spring-Boot-Reference-Guide\" target=\"_blank\" rel=\"noopener\">https://github.com/qibaoguang/Spring-Boot-Reference-Guide</a></p>\n</blockquote>\n<h3 id=\"spring4中文参考文档\"><a href=\"#spring4中文参考文档\" class=\"headerlink\" title=\"spring4中文参考文档\"></a>spring4中文参考文档</h3><p>作者：Way Lau</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/waylau/spring-framework-4-reference\" target=\"_blank\" rel=\"noopener\">https://github.com/waylau/spring-framework-4-reference</a></p>\n</blockquote>\n<h3 id=\"开源分布式数据库中间件Mycat-Server\"><a href=\"#开源分布式数据库中间件Mycat-Server\" class=\"headerlink\" title=\"开源分布式数据库中间件Mycat-Server\"></a>开源分布式数据库中间件Mycat-Server</h3><p>作者：mycat开源团队</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/MyCATApache/Mycat-Server\" target=\"_blank\" rel=\"noopener\">https://github.com/MyCATApache/Mycat-Server</a></p>\n</blockquote>\n<h3 id=\"开源分布式数据库中间件mycat文档mycat-doc\"><a href=\"#开源分布式数据库中间件mycat文档mycat-doc\" class=\"headerlink\" title=\"开源分布式数据库中间件mycat文档mycat-doc\"></a>开源分布式数据库中间件mycat文档mycat-doc</h3><p>作者：mycat开源团队</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/MyCATApache/Mycat-doc\" target=\"_blank\" rel=\"noopener\">https://github.com/MyCATApache/Mycat-doc</a></p>\n</blockquote>\n<h3 id=\"基于spring的基础框架库springside\"><a href=\"#基于spring的基础框架库springside\" class=\"headerlink\" title=\"基于spring的基础框架库springside\"></a>基于spring的基础框架库springside</h3><p>作者：江南白衣</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/springside/springside4\" target=\"_blank\" rel=\"noopener\">https://github.com/springside/springside4</a></p>\n</blockquote>\n<h3 id=\"开源信息化快速开发平台jeesite\"><a href=\"#开源信息化快速开发平台jeesite\" class=\"headerlink\" title=\"开源信息化快速开发平台jeesite\"></a>开源信息化快速开发平台jeesite</h3><p>作者：thinkgem</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/thinkgem/jeesite\" target=\"_blank\" rel=\"noopener\">https://github.com/thinkgem/jeesite</a></p>\n</blockquote>\n<h3 id=\"Java资源大全中文版awesome-java-cn\"><a href=\"#Java资源大全中文版awesome-java-cn\" class=\"headerlink\" title=\"Java资源大全中文版awesome-java-cn\"></a>Java资源大全中文版awesome-java-cn</h3><p>作者：伯乐在线</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/jobbole/awesome-java-cn\" target=\"_blank\" rel=\"noopener\">https://github.com/jobbole/awesome-java-cn</a></p>\n</blockquote>\n<h3 id=\"通用权限管理系统cl-privilege\"><a href=\"#通用权限管理系统cl-privilege\" class=\"headerlink\" title=\"通用权限管理系统cl-privilege\"></a>通用权限管理系统cl-privilege</h3><p>作者：pumadong</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/pumadong/cl-privilege\" target=\"_blank\" rel=\"noopener\">https://github.com/pumadong/cl-privilege</a></p>\n</blockquote>\n<h3 id=\"开源分布式应用追踪分析系统sky-walking\"><a href=\"#开源分布式应用追踪分析系统sky-walking\" class=\"headerlink\" title=\"开源分布式应用追踪分析系统sky-walking\"></a>开源分布式应用追踪分析系统sky-walking</h3><p>作者：sky-walking团队</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/wu-sheng/sky-walking\" target=\"_blank\" rel=\"noopener\">https://github.com/wu-sheng/sky-walking</a></p>\n</blockquote>\n<h3 id=\"轻量级Java-Web框架smart-framework\"><a href=\"#轻量级Java-Web框架smart-framework\" class=\"headerlink\" title=\"轻量级Java Web框架smart-framework\"></a>轻量级Java Web框架smart-framework</h3><p>作者：黄勇</p>\n<blockquote>\n<p>git.oschina地址:<a href=\"http://git.oschina.net/huangyong/smart-framework\" target=\"_blank\" rel=\"noopener\">http://git.oschina.net/huangyong/smart-framework</a></p>\n</blockquote>\n<h3 id=\"许雪里github\"><a href=\"#许雪里github\" class=\"headerlink\" title=\"许雪里github:\"></a>许雪里github:</h3><p>作者：许雪里</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/xuxueli\" target=\"_blank\" rel=\"noopener\">https://github.com/xuxueli</a></p>\n</blockquote>\n<h3 id=\"响应式函数编程框架RxJava\"><a href=\"#响应式函数编程框架RxJava\" class=\"headerlink\" title=\"响应式函数编程框架RxJava\"></a>响应式函数编程框架RxJava</h3><p>作者：ReactiveX</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/ReactiveX/RxJava\" target=\"_blank\" rel=\"noopener\">https://github.com/ReactiveX/RxJava</a></p>\n</blockquote>\n<h3 id=\"常用的java基础工具类iceroot\"><a href=\"#常用的java基础工具类iceroot\" class=\"headerlink\" title=\"常用的java基础工具类iceroot\"></a>常用的java基础工具类iceroot</h3><p>作者：iceroot</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/iceroot/iceroot\" target=\"_blank\" rel=\"noopener\">https://github.com/iceroot/iceroot</a></p>\n</blockquote>\n<h3 id=\"开源轻量级的-高性能的事件总线MBassador\"><a href=\"#开源轻量级的-高性能的事件总线MBassador\" class=\"headerlink\" title=\"开源轻量级的,高性能的事件总线MBassador\"></a>开源轻量级的,高性能的事件总线MBassador</h3><p>作者：Benjamin Diedrichsen</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/bennidi/mbassador\" target=\"_blank\" rel=\"noopener\">https://github.com/bennidi/mbassador</a></p>\n</blockquote>\n<h3 id=\"通过注解来减少Java中的重复代码工具lombok\"><a href=\"#通过注解来减少Java中的重复代码工具lombok\" class=\"headerlink\" title=\"通过注解来减少Java中的重复代码工具lombok\"></a>通过注解来减少Java中的重复代码工具lombok</h3><p>作者：Reinier Zwitserloot</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/rzwitserloot/lombok\" target=\"_blank\" rel=\"noopener\">https://github.com/rzwitserloot/lombok</a></p>\n</blockquote>\n<h3 id=\"简单日志门面slf4j\"><a href=\"#简单日志门面slf4j\" class=\"headerlink\" title=\"简单日志门面slf4j\"></a>简单日志门面slf4j</h3><p>作者：QOS.ch</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/qos-ch/slf4j\" target=\"_blank\" rel=\"noopener\">https://github.com/qos-ch/slf4j</a></p>\n</blockquote>\n<h3 id=\"模拟测试框架Mockito\"><a href=\"#模拟测试框架Mockito\" class=\"headerlink\" title=\"模拟测试框架Mockito\"></a>模拟测试框架Mockito</h3><p>作者：mockito</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/mockito/mockito\" target=\"_blank\" rel=\"noopener\">https://github.com/mockito/mockito</a></p>\n</blockquote>\n<h3 id=\"结合JUnit、-Guice、-Mockito的高效组合测试框架Jukito\"><a href=\"#结合JUnit、-Guice、-Mockito的高效组合测试框架Jukito\" class=\"headerlink\" title=\"结合JUnit、 Guice、 Mockito的高效组合测试框架Jukito\"></a>结合JUnit、 Guice、 Mockito的高效组合测试框架Jukito</h3><p>作者：Arcbees</p>\n<blockquote>\n<p>github地址:<a href=\"https://github.com/ArcBees/Jukito\" target=\"_blank\" rel=\"noopener\">https://github.com/ArcBees/Jukito</a></p>\n</blockquote>\n<h3 id=\"轻量化的分布式服务框架rsf\"><a href=\"#轻量化的分布式服务框架rsf\" class=\"headerlink\" title=\"轻量化的分布式服务框架rsf\"></a>轻量化的分布式服务框架rsf</h3><p>作者：Hasor Group</p>\n<blockquote>\n<p>码云地址:<a href=\"http://git.oschina.net/zycgit/rs\" target=\"_blank\" rel=\"noopener\">http://git.oschina.net/zycgit/rs</a></p>\n</blockquote>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Apr 25 2018 20:46:59 GMT+0800 (GMT+08:00)","title":"Java开源项目","path":"2017/05/04/java开源项目/","eyeCatchImage":null,"excerpt":null,"date":"2017-05-04T15:53:43.000Z","pv":0,"totalPV":0,"categories":"Collection","tags":["Java"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":4052},{"title":"从地址栏输入URL到页面加载完成发生了什么？","date":"2017-04-08T09:52:26.000Z","_content":"不管是前端还是后台开发，在找工作的时候，只要涉及到网络方面的知识，必然会问到这样一个问题：当我在浏览器的地址栏里输入一个完整的URL，在按下回车直至页面加载完成，整个过程发生了什么？这是一道考察综合能力的面试题，今天我们就一起来总结下该如何回答这个问题，当然我只是在这里讲解主要的知识点，涉及到的细节还需要大家再去找资料看。\n整体过程\n在这整个过程中，大致可以分为以下几个过程\n\n* DNS域名解析\n* TCP连接\n* HTTP请求\n* 处理请求返回HTTP响应\n* 页面渲染\n* 关闭连接\n* DNS域名解析\n\n首先我们应该要知道的是，在地址栏输入的域名并不是最后资源所在的真实位置，域名只是与IP地址的一个映射。网络服务器的IP地址那么多，我们不可能去记一串串的数字，因此域名就产生了，域名解析的过程实际是将域名还原为IP地址的过程。\nDNS域名解析有两种方法，分别是迭代查询和递归查询\n\n* 迭代查询\n* 递归查询\n\nTCP连接\n在通过第一步的DNS域名解析后，获取到了服务器的IP地址，在获取到IP地址后，便会开始建立一次连接，这是由TCP协议完成的，主要通过三次握手进行连接。\n\n三次握手\nHTTP请求\n在确认与服务器建立连接后，便会发送一个HTTP请求，HTTP请求的报文主要包括请求行，请求头，请求正文。\n请求行的内容一般类似于：GET index.html HTTP/1.1\n请求头的内容一般如下，可以通过浏览器开发者工具查看\n\n请求头\n请求体一般包含请求传递的参数\n\n请求体\n处理HTTP请求并响应\n服务器在收到浏览器发送的HTTP请求之后，会将收到的HTTP报文封装成HTTP的Request对象，并通过不同的Web服务器进行处理，处理完的结果以HTTP的Response对象返回，主要包括状态码，响应头，响应报文三个部分。\n状态码主要包括以下部分\n1xx：指示信息–表示请求已接收，继续处理。\n2xx：成功–表示请求已被成功接收、理解、接受。\n3xx：重定向–要完成请求必须进行更进一步的操作。\n4xx：客户端错误–请求有语法错误或请求无法实现。\n5xx：服务器端错误–服务器未能实现合法的请求。\n响应头主要由Cache-Control、 Connection、Date、Pragma等组成\n响应体为服务器返回给浏览器的信息，主要由HTML，css，js，图片文件组成\n页面渲染\n页面DOM树的渲染是个复杂的过程，需要深入了解DOM原理，这里简要描述一下，主要过程如下\n\nDOM树渲染\n关闭连接\n在页面元素传输完成后，会选择关闭连接，此时用到的是TCP四次挥手。\n\nTCP四次挥手\n总结\n至此一个完成的URL从输入到加载的过程就分析完了。","source":"_posts/从地址栏输入URL到页面加载完成发生了什么？.md","raw":"---\ntitle: 从地址栏输入URL到页面加载完成发生了什么？\ndate: 2017-04-08 17:52:26\ntags:\ncategories: Essay\n---\n不管是前端还是后台开发，在找工作的时候，只要涉及到网络方面的知识，必然会问到这样一个问题：当我在浏览器的地址栏里输入一个完整的URL，在按下回车直至页面加载完成，整个过程发生了什么？这是一道考察综合能力的面试题，今天我们就一起来总结下该如何回答这个问题，当然我只是在这里讲解主要的知识点，涉及到的细节还需要大家再去找资料看。\n整体过程\n在这整个过程中，大致可以分为以下几个过程\n\n* DNS域名解析\n* TCP连接\n* HTTP请求\n* 处理请求返回HTTP响应\n* 页面渲染\n* 关闭连接\n* DNS域名解析\n\n首先我们应该要知道的是，在地址栏输入的域名并不是最后资源所在的真实位置，域名只是与IP地址的一个映射。网络服务器的IP地址那么多，我们不可能去记一串串的数字，因此域名就产生了，域名解析的过程实际是将域名还原为IP地址的过程。\nDNS域名解析有两种方法，分别是迭代查询和递归查询\n\n* 迭代查询\n* 递归查询\n\nTCP连接\n在通过第一步的DNS域名解析后，获取到了服务器的IP地址，在获取到IP地址后，便会开始建立一次连接，这是由TCP协议完成的，主要通过三次握手进行连接。\n\n三次握手\nHTTP请求\n在确认与服务器建立连接后，便会发送一个HTTP请求，HTTP请求的报文主要包括请求行，请求头，请求正文。\n请求行的内容一般类似于：GET index.html HTTP/1.1\n请求头的内容一般如下，可以通过浏览器开发者工具查看\n\n请求头\n请求体一般包含请求传递的参数\n\n请求体\n处理HTTP请求并响应\n服务器在收到浏览器发送的HTTP请求之后，会将收到的HTTP报文封装成HTTP的Request对象，并通过不同的Web服务器进行处理，处理完的结果以HTTP的Response对象返回，主要包括状态码，响应头，响应报文三个部分。\n状态码主要包括以下部分\n1xx：指示信息–表示请求已接收，继续处理。\n2xx：成功–表示请求已被成功接收、理解、接受。\n3xx：重定向–要完成请求必须进行更进一步的操作。\n4xx：客户端错误–请求有语法错误或请求无法实现。\n5xx：服务器端错误–服务器未能实现合法的请求。\n响应头主要由Cache-Control、 Connection、Date、Pragma等组成\n响应体为服务器返回给浏览器的信息，主要由HTML，css，js，图片文件组成\n页面渲染\n页面DOM树的渲染是个复杂的过程，需要深入了解DOM原理，这里简要描述一下，主要过程如下\n\nDOM树渲染\n关闭连接\n在页面元素传输完成后，会选择关闭连接，此时用到的是TCP四次挥手。\n\nTCP四次挥手\n总结\n至此一个完成的URL从输入到加载的过程就分析完了。","slug":"从地址栏输入URL到页面加载完成发生了什么？","published":1,"updated":"2018-04-25T12:46:59.499Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2fj0nqd0020q4vg9q480uip","content":"<p>不管是前端还是后台开发，在找工作的时候，只要涉及到网络方面的知识，必然会问到这样一个问题：当我在浏览器的地址栏里输入一个完整的URL，在按下回车直至页面加载完成，整个过程发生了什么？这是一道考察综合能力的面试题，今天我们就一起来总结下该如何回答这个问题，当然我只是在这里讲解主要的知识点，涉及到的细节还需要大家再去找资料看。<br>整体过程<br>在这整个过程中，大致可以分为以下几个过程</p><a id=\"more\"></a>\n<ul>\n<li>DNS域名解析</li>\n<li>TCP连接</li>\n<li>HTTP请求</li>\n<li>处理请求返回HTTP响应</li>\n<li>页面渲染</li>\n<li>关闭连接</li>\n<li>DNS域名解析</li>\n</ul>\n<p>首先我们应该要知道的是，在地址栏输入的域名并不是最后资源所在的真实位置，域名只是与IP地址的一个映射。网络服务器的IP地址那么多，我们不可能去记一串串的数字，因此域名就产生了，域名解析的过程实际是将域名还原为IP地址的过程。<br>DNS域名解析有两种方法，分别是迭代查询和递归查询</p>\n<ul>\n<li>迭代查询</li>\n<li>递归查询</li>\n</ul>\n<p>TCP连接<br>在通过第一步的DNS域名解析后，获取到了服务器的IP地址，在获取到IP地址后，便会开始建立一次连接，这是由TCP协议完成的，主要通过三次握手进行连接。</p>\n<p>三次握手<br>HTTP请求<br>在确认与服务器建立连接后，便会发送一个HTTP请求，HTTP请求的报文主要包括请求行，请求头，请求正文。<br>请求行的内容一般类似于：GET index.html HTTP/1.1<br>请求头的内容一般如下，可以通过浏览器开发者工具查看</p>\n<p>请求头<br>请求体一般包含请求传递的参数</p>\n<p>请求体<br>处理HTTP请求并响应<br>服务器在收到浏览器发送的HTTP请求之后，会将收到的HTTP报文封装成HTTP的Request对象，并通过不同的Web服务器进行处理，处理完的结果以HTTP的Response对象返回，主要包括状态码，响应头，响应报文三个部分。<br>状态码主要包括以下部分<br>1xx：指示信息–表示请求已接收，继续处理。<br>2xx：成功–表示请求已被成功接收、理解、接受。<br>3xx：重定向–要完成请求必须进行更进一步的操作。<br>4xx：客户端错误–请求有语法错误或请求无法实现。<br>5xx：服务器端错误–服务器未能实现合法的请求。<br>响应头主要由Cache-Control、 Connection、Date、Pragma等组成<br>响应体为服务器返回给浏览器的信息，主要由HTML，css，js，图片文件组成<br>页面渲染<br>页面DOM树的渲染是个复杂的过程，需要深入了解DOM原理，这里简要描述一下，主要过程如下</p>\n<p>DOM树渲染<br>关闭连接<br>在页面元素传输完成后，会选择关闭连接，此时用到的是TCP四次挥手。</p>\n<p>TCP四次挥手<br>总结<br>至此一个完成的URL从输入到加载的过程就分析完了。</p>\n","site":{"data":{}},"excerpt":"<p>不管是前端还是后台开发，在找工作的时候，只要涉及到网络方面的知识，必然会问到这样一个问题：当我在浏览器的地址栏里输入一个完整的URL，在按下回车直至页面加载完成，整个过程发生了什么？这是一道考察综合能力的面试题，今天我们就一起来总结下该如何回答这个问题，当然我只是在这里讲解主要的知识点，涉及到的细节还需要大家再去找资料看。<br>整体过程<br>在这整个过程中，大致可以分为以下几个过程</p>","more":"\n<ul>\n<li>DNS域名解析</li>\n<li>TCP连接</li>\n<li>HTTP请求</li>\n<li>处理请求返回HTTP响应</li>\n<li>页面渲染</li>\n<li>关闭连接</li>\n<li>DNS域名解析</li>\n</ul>\n<p>首先我们应该要知道的是，在地址栏输入的域名并不是最后资源所在的真实位置，域名只是与IP地址的一个映射。网络服务器的IP地址那么多，我们不可能去记一串串的数字，因此域名就产生了，域名解析的过程实际是将域名还原为IP地址的过程。<br>DNS域名解析有两种方法，分别是迭代查询和递归查询</p>\n<ul>\n<li>迭代查询</li>\n<li>递归查询</li>\n</ul>\n<p>TCP连接<br>在通过第一步的DNS域名解析后，获取到了服务器的IP地址，在获取到IP地址后，便会开始建立一次连接，这是由TCP协议完成的，主要通过三次握手进行连接。</p>\n<p>三次握手<br>HTTP请求<br>在确认与服务器建立连接后，便会发送一个HTTP请求，HTTP请求的报文主要包括请求行，请求头，请求正文。<br>请求行的内容一般类似于：GET index.html HTTP/1.1<br>请求头的内容一般如下，可以通过浏览器开发者工具查看</p>\n<p>请求头<br>请求体一般包含请求传递的参数</p>\n<p>请求体<br>处理HTTP请求并响应<br>服务器在收到浏览器发送的HTTP请求之后，会将收到的HTTP报文封装成HTTP的Request对象，并通过不同的Web服务器进行处理，处理完的结果以HTTP的Response对象返回，主要包括状态码，响应头，响应报文三个部分。<br>状态码主要包括以下部分<br>1xx：指示信息–表示请求已接收，继续处理。<br>2xx：成功–表示请求已被成功接收、理解、接受。<br>3xx：重定向–要完成请求必须进行更进一步的操作。<br>4xx：客户端错误–请求有语法错误或请求无法实现。<br>5xx：服务器端错误–服务器未能实现合法的请求。<br>响应头主要由Cache-Control、 Connection、Date、Pragma等组成<br>响应体为服务器返回给浏览器的信息，主要由HTML，css，js，图片文件组成<br>页面渲染<br>页面DOM树的渲染是个复杂的过程，需要深入了解DOM原理，这里简要描述一下，主要过程如下</p>\n<p>DOM树渲染<br>关闭连接<br>在页面元素传输完成后，会选择关闭连接，此时用到的是TCP四次挥手。</p>\n<p>TCP四次挥手<br>总结<br>至此一个完成的URL从输入到加载的过程就分析完了。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Apr 25 2018 20:46:59 GMT+0800 (GMT+08:00)","title":"从地址栏输入URL到页面加载完成发生了什么？","path":"2017/04/08/从地址栏输入URL到页面加载完成发生了什么？/","eyeCatchImage":null,"excerpt":null,"date":"2017-04-08T09:52:26.000Z","pv":0,"totalPV":0,"categories":"Essay","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1059},{"title":"你应该知道的5个Docker实用工具","date":"2017-05-27T05:44:37.000Z","_content":"\n【摘要】网上有很多不错的Docker工具，大部分在github上都是开源的。最近两年，我一直在使用Docker，并将其应用到了一些开发项目上。如果你刚开始使用Docker，你会发现它能应用到的实例远远多于预想。Docker能为你做更多，不会让你失望的！\n\nDocker社区非常活跃，每天都有许多新的实用工具出现。因此，天天去检查更新，试图跟上社区的步伐确实有点困难。所以我在此分享在工作中收集到的一些有趣而实用的Docker工具，帮助大家提高日常工作效率。\n\n下面开始一一介绍我在使用Docker的过程中找到的有用工具吧。\n\n### watchtower：自动更新Docker容器\n\nwatchtower监视容器运行过程，并且能够捕捉到容器中的变化。当watchtower检测到有镜像发生变化，会自动使用新镜像重启容器。我在本地开发环境中创建的最后一个镜像就用到了watchtower。\n\nwatchtower本身就像一个Docker镜像，所以它启动容器的方式和别的镜像无异。运行watchtower的命令如下：\n\n![upload successful](/images/pasted-4.png)\n\n上面的代码中，我们用到了一个安装文件/var/run/docker.sock。这个文件主要用来使watchtower与Docker后台API交互。 interval30秒的选项主要用来定义watchtower的轮询间隔时间。watchtower还支持一些别的选项，具体可以查看他们的文档。\n\n现在，开启一个容器，用watchtower来监控。\n\n![upload successful](/images/pasted-8.png)\n\nwatchtower会开始监控friendlyhello容器。接下来我把新镜像push到Docker Hub，watchtower接下来就会检测到有新镜像可用。它会关掉容器，然后用新镜像重启容器。这里会用到我们刚刚传到运行命令中的选项，换句话说，容器会在4000:80 公共端口选项上开启。\n\n默认情况下，watchtower会轮询Dockder Hub注册表查找更新的镜像。你也可以通过在环境变量REPO_USER和REPO_PASS中添加指定注册表证书，来设置watchtower轮询私有注册表。\n\n了解更多watchtower的用法，我推荐watchtower文档。\n\n### docker-gc：收集垃圾容器和镜像\n\ndocker-gc工具能够帮助Docker host清理不需要的容器和镜像。它可以删除存在一小时以上的容器。同时，它也可以删除没有容器的镜像。\n\ndocker-gc可以被当做脚本，也可以被视为容器。我们用容器方法运行docker-gc，用它来查找可以被删除的容器和镜像。\n\n![upload successful](/images/pasted-9.png)\n\n在上述命令中，我们安装Docker socket文件，这样docker-gc就可以和Docker API进行交互。设置环境变量DRY_RUN=1，查找可被删除的容器和镜像。如果我们不这样设置，docker-gc直接删除它们。所以在删除之前，还是先确认一下。以上代码的输出结果如下：\n\n![upload successful](/images/pasted-10.png)\n\n确认需要删除的容器和镜像之后，再次运行docker-gc来进行删除清理，这次就不用再设置DRY_RUN参数了。\n\n![upload successful](/images/pasted-11.png)\n\n上述命令运行后的输出会告诉你哪些容器和镜像已经被docker-gc删除。\n\n了解更多docker-gc支持的选项，我推荐阅读docker-gc documentation。\n\n### docker-slim：给你的容器瘦身\n\n如果你对Docker镜像的大小有过担忧，docker-slim绝对是一丸灵丹妙药。\n\ndocker-slim工具可以通过静态和动态分析，针对你的“胖镜像”创建对应的“瘦镜像”。在Github上下载二进制文件，即可使用docker-slim。该二进制文件在Linux和Mac可用。下载之后添加到路径PATH。\n\n我创建了一个Docker镜像示例应用“friendlyhello”，Docker官方文档中有用到。这个镜像的大小如下图所示，194MB。\n\n![upload successful](/images/pasted-12.png)\n\n这么简单的一个应用，我们就要下载194MB的数据。再来看看docker-slim究竟能让它“瘦”多少。\n\n![upload successful](/images/pasted-13.png)\n\ndocker-slim工具先是对“胖镜像”进行一系列的检测，最终创建了对应的“瘦镜像”。看一下“瘦镜像”的大小：\n\n![upload successful](/images/pasted-14.png)\n\n正如上图所示，“瘦镜像”大小为24.9MB。开启容器，运行照旧。docker-slim对java、python、ruby、和Node.js应用都非常友好。\n\n你自己也试一下吧，看看结果如何。以我个人的项目来说，我认为docker-slim在大部分情况下都能适用。阅读docker-slim文档了解更多。\n\n### rocker：打破Dockerfile限制\n\n很多Docker用户都用Dockerfile来构建镜像。Dockerfile是定义命令的声明方式，通过在命令行调用这些命令，可以对镜像进行操作。\n\nrocker给Dockerfile的指令集增加了新的指令。rocker是由Grammaryly创建的，原意是用来解决Dockerfile格式的问题。Grammaryly团队写过一篇博客解释当初的动机。我建议你也看一下这篇博客，可以更好的理解rocker。他们在博客中提出的两个关键问题是：\n\nDocker镜像的大小\n构建速度缓慢\n博客还提到了rocker添加的一些新指令。查看rocker文档了解更多。\n\nMOUNT用来分享volume，这样依赖管理工具就可以重用。\nFROM指令在Dockerfile中也存在。rocker添加了不止一条FROM指令。这就意味着，一个Rockerfile可以通过创建多个镜像。首个指令集使用所有依赖来创建artifact，第二个指令集可以使用已有的artifact。这种做法极大的降低了镜像的大小。\nTAG用来标记处于不同构建阶段的镜像。这样一来就不在需要手动标记镜像了。\nPUSH用来把镜像push到registry。\nATTACH用来和中间步骤交互，在debug的时候非常有用。\n安装rocker，对Mac用户来说，只要运行几条brew命令就行了：\n\n![upload successful](/images/pasted-15.png)\n\n安装完成后，就可以使用rocker创建镜像。\n\n![upload successful](/images/pasted-16.png)\n\n创建镜像并将其push到Docker Hub，可以用下面这条命令：\n\n![upload successful](/images/pasted-17.png)\n\nrocker功能十分完备，了解更多，请参阅其文档。\n\n### ctop：容器的顶层界面工具\n\nctop是我最近才开始使用的工具，它可以为多个容器提供实时显示的数据视图。如果你是Mac用户，可以按下面的命令安装ctop。\n\n![upload successful](/images/pasted-18.png)\n\n安装之后，只需配置DOCKER_HOST环境变量，即可使用ctop。\n\n运行ctop命令，可以查看所有容器的状态。\n\n运行\n\nctop-a命令，可以仅查看当前运行的容器。\n\nctop简单好用，查看机器上运行的容器非常方便。了解更多，请看ctop文档。","source":"_posts/你应该知道的5个Docker实用工具.md","raw":"---\ntitle: 你应该知道的5个Docker实用工具\ntags: Docker\ncategories:\n  - Collection\ndate: 2017-05-27 13:44:37\n---\n\n【摘要】网上有很多不错的Docker工具，大部分在github上都是开源的。最近两年，我一直在使用Docker，并将其应用到了一些开发项目上。如果你刚开始使用Docker，你会发现它能应用到的实例远远多于预想。Docker能为你做更多，不会让你失望的！\n\nDocker社区非常活跃，每天都有许多新的实用工具出现。因此，天天去检查更新，试图跟上社区的步伐确实有点困难。所以我在此分享在工作中收集到的一些有趣而实用的Docker工具，帮助大家提高日常工作效率。\n\n下面开始一一介绍我在使用Docker的过程中找到的有用工具吧。\n\n### watchtower：自动更新Docker容器\n\nwatchtower监视容器运行过程，并且能够捕捉到容器中的变化。当watchtower检测到有镜像发生变化，会自动使用新镜像重启容器。我在本地开发环境中创建的最后一个镜像就用到了watchtower。\n\nwatchtower本身就像一个Docker镜像，所以它启动容器的方式和别的镜像无异。运行watchtower的命令如下：\n\n![upload successful](/images/pasted-4.png)\n\n上面的代码中，我们用到了一个安装文件/var/run/docker.sock。这个文件主要用来使watchtower与Docker后台API交互。 interval30秒的选项主要用来定义watchtower的轮询间隔时间。watchtower还支持一些别的选项，具体可以查看他们的文档。\n\n现在，开启一个容器，用watchtower来监控。\n\n![upload successful](/images/pasted-8.png)\n\nwatchtower会开始监控friendlyhello容器。接下来我把新镜像push到Docker Hub，watchtower接下来就会检测到有新镜像可用。它会关掉容器，然后用新镜像重启容器。这里会用到我们刚刚传到运行命令中的选项，换句话说，容器会在4000:80 公共端口选项上开启。\n\n默认情况下，watchtower会轮询Dockder Hub注册表查找更新的镜像。你也可以通过在环境变量REPO_USER和REPO_PASS中添加指定注册表证书，来设置watchtower轮询私有注册表。\n\n了解更多watchtower的用法，我推荐watchtower文档。\n\n### docker-gc：收集垃圾容器和镜像\n\ndocker-gc工具能够帮助Docker host清理不需要的容器和镜像。它可以删除存在一小时以上的容器。同时，它也可以删除没有容器的镜像。\n\ndocker-gc可以被当做脚本，也可以被视为容器。我们用容器方法运行docker-gc，用它来查找可以被删除的容器和镜像。\n\n![upload successful](/images/pasted-9.png)\n\n在上述命令中，我们安装Docker socket文件，这样docker-gc就可以和Docker API进行交互。设置环境变量DRY_RUN=1，查找可被删除的容器和镜像。如果我们不这样设置，docker-gc直接删除它们。所以在删除之前，还是先确认一下。以上代码的输出结果如下：\n\n![upload successful](/images/pasted-10.png)\n\n确认需要删除的容器和镜像之后，再次运行docker-gc来进行删除清理，这次就不用再设置DRY_RUN参数了。\n\n![upload successful](/images/pasted-11.png)\n\n上述命令运行后的输出会告诉你哪些容器和镜像已经被docker-gc删除。\n\n了解更多docker-gc支持的选项，我推荐阅读docker-gc documentation。\n\n### docker-slim：给你的容器瘦身\n\n如果你对Docker镜像的大小有过担忧，docker-slim绝对是一丸灵丹妙药。\n\ndocker-slim工具可以通过静态和动态分析，针对你的“胖镜像”创建对应的“瘦镜像”。在Github上下载二进制文件，即可使用docker-slim。该二进制文件在Linux和Mac可用。下载之后添加到路径PATH。\n\n我创建了一个Docker镜像示例应用“friendlyhello”，Docker官方文档中有用到。这个镜像的大小如下图所示，194MB。\n\n![upload successful](/images/pasted-12.png)\n\n这么简单的一个应用，我们就要下载194MB的数据。再来看看docker-slim究竟能让它“瘦”多少。\n\n![upload successful](/images/pasted-13.png)\n\ndocker-slim工具先是对“胖镜像”进行一系列的检测，最终创建了对应的“瘦镜像”。看一下“瘦镜像”的大小：\n\n![upload successful](/images/pasted-14.png)\n\n正如上图所示，“瘦镜像”大小为24.9MB。开启容器，运行照旧。docker-slim对java、python、ruby、和Node.js应用都非常友好。\n\n你自己也试一下吧，看看结果如何。以我个人的项目来说，我认为docker-slim在大部分情况下都能适用。阅读docker-slim文档了解更多。\n\n### rocker：打破Dockerfile限制\n\n很多Docker用户都用Dockerfile来构建镜像。Dockerfile是定义命令的声明方式，通过在命令行调用这些命令，可以对镜像进行操作。\n\nrocker给Dockerfile的指令集增加了新的指令。rocker是由Grammaryly创建的，原意是用来解决Dockerfile格式的问题。Grammaryly团队写过一篇博客解释当初的动机。我建议你也看一下这篇博客，可以更好的理解rocker。他们在博客中提出的两个关键问题是：\n\nDocker镜像的大小\n构建速度缓慢\n博客还提到了rocker添加的一些新指令。查看rocker文档了解更多。\n\nMOUNT用来分享volume，这样依赖管理工具就可以重用。\nFROM指令在Dockerfile中也存在。rocker添加了不止一条FROM指令。这就意味着，一个Rockerfile可以通过创建多个镜像。首个指令集使用所有依赖来创建artifact，第二个指令集可以使用已有的artifact。这种做法极大的降低了镜像的大小。\nTAG用来标记处于不同构建阶段的镜像。这样一来就不在需要手动标记镜像了。\nPUSH用来把镜像push到registry。\nATTACH用来和中间步骤交互，在debug的时候非常有用。\n安装rocker，对Mac用户来说，只要运行几条brew命令就行了：\n\n![upload successful](/images/pasted-15.png)\n\n安装完成后，就可以使用rocker创建镜像。\n\n![upload successful](/images/pasted-16.png)\n\n创建镜像并将其push到Docker Hub，可以用下面这条命令：\n\n![upload successful](/images/pasted-17.png)\n\nrocker功能十分完备，了解更多，请参阅其文档。\n\n### ctop：容器的顶层界面工具\n\nctop是我最近才开始使用的工具，它可以为多个容器提供实时显示的数据视图。如果你是Mac用户，可以按下面的命令安装ctop。\n\n![upload successful](/images/pasted-18.png)\n\n安装之后，只需配置DOCKER_HOST环境变量，即可使用ctop。\n\n运行ctop命令，可以查看所有容器的状态。\n\n运行\n\nctop-a命令，可以仅查看当前运行的容器。\n\nctop简单好用，查看机器上运行的容器非常方便。了解更多，请看ctop文档。","slug":"你应该知道的5个Docker实用工具","published":1,"updated":"2018-04-25T12:46:59.499Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2fj0nqf0024q4vgajl3hm7u","content":"<p>【摘要】网上有很多不错的Docker工具，大部分在github上都是开源的。最近两年，我一直在使用Docker，并将其应用到了一些开发项目上。如果你刚开始使用Docker，你会发现它能应用到的实例远远多于预想。Docker能为你做更多，不会让你失望的！</p><p>Docker社区非常活跃，每天都有许多新的实用工具出现。因此，天天去检查更新，试图跟上社区的步伐确实有点困难。所以我在此分享在工作中收集到的一些有趣而实用的Docker工具，帮助大家提高日常工作效率。</p><a id=\"more\"></a>\n\n<p>下面开始一一介绍我在使用Docker的过程中找到的有用工具吧。</p>\n<h3 id=\"watchtower：自动更新Docker容器\"><a href=\"#watchtower：自动更新Docker容器\" class=\"headerlink\" title=\"watchtower：自动更新Docker容器\"></a>watchtower：自动更新Docker容器</h3><p>watchtower监视容器运行过程，并且能够捕捉到容器中的变化。当watchtower检测到有镜像发生变化，会自动使用新镜像重启容器。我在本地开发环境中创建的最后一个镜像就用到了watchtower。</p>\n<p>watchtower本身就像一个Docker镜像，所以它启动容器的方式和别的镜像无异。运行watchtower的命令如下：</p>\n<p><img src=\"/images/pasted-4.png\" alt=\"upload successful\"></p>\n<p>上面的代码中，我们用到了一个安装文件/var/run/docker.sock。这个文件主要用来使watchtower与Docker后台API交互。 interval30秒的选项主要用来定义watchtower的轮询间隔时间。watchtower还支持一些别的选项，具体可以查看他们的文档。</p>\n<p>现在，开启一个容器，用watchtower来监控。</p>\n<p><img src=\"/images/pasted-8.png\" alt=\"upload successful\"></p>\n<p>watchtower会开始监控friendlyhello容器。接下来我把新镜像push到Docker Hub，watchtower接下来就会检测到有新镜像可用。它会关掉容器，然后用新镜像重启容器。这里会用到我们刚刚传到运行命令中的选项，换句话说，容器会在4000:80 公共端口选项上开启。</p>\n<p>默认情况下，watchtower会轮询Dockder Hub注册表查找更新的镜像。你也可以通过在环境变量REPO_USER和REPO_PASS中添加指定注册表证书，来设置watchtower轮询私有注册表。</p>\n<p>了解更多watchtower的用法，我推荐watchtower文档。</p>\n<h3 id=\"docker-gc：收集垃圾容器和镜像\"><a href=\"#docker-gc：收集垃圾容器和镜像\" class=\"headerlink\" title=\"docker-gc：收集垃圾容器和镜像\"></a>docker-gc：收集垃圾容器和镜像</h3><p>docker-gc工具能够帮助Docker host清理不需要的容器和镜像。它可以删除存在一小时以上的容器。同时，它也可以删除没有容器的镜像。</p>\n<p>docker-gc可以被当做脚本，也可以被视为容器。我们用容器方法运行docker-gc，用它来查找可以被删除的容器和镜像。</p>\n<p><img src=\"/images/pasted-9.png\" alt=\"upload successful\"></p>\n<p>在上述命令中，我们安装Docker socket文件，这样docker-gc就可以和Docker API进行交互。设置环境变量DRY_RUN=1，查找可被删除的容器和镜像。如果我们不这样设置，docker-gc直接删除它们。所以在删除之前，还是先确认一下。以上代码的输出结果如下：</p>\n<p><img src=\"/images/pasted-10.png\" alt=\"upload successful\"></p>\n<p>确认需要删除的容器和镜像之后，再次运行docker-gc来进行删除清理，这次就不用再设置DRY_RUN参数了。</p>\n<p><img src=\"/images/pasted-11.png\" alt=\"upload successful\"></p>\n<p>上述命令运行后的输出会告诉你哪些容器和镜像已经被docker-gc删除。</p>\n<p>了解更多docker-gc支持的选项，我推荐阅读docker-gc documentation。</p>\n<h3 id=\"docker-slim：给你的容器瘦身\"><a href=\"#docker-slim：给你的容器瘦身\" class=\"headerlink\" title=\"docker-slim：给你的容器瘦身\"></a>docker-slim：给你的容器瘦身</h3><p>如果你对Docker镜像的大小有过担忧，docker-slim绝对是一丸灵丹妙药。</p>\n<p>docker-slim工具可以通过静态和动态分析，针对你的“胖镜像”创建对应的“瘦镜像”。在Github上下载二进制文件，即可使用docker-slim。该二进制文件在Linux和Mac可用。下载之后添加到路径PATH。</p>\n<p>我创建了一个Docker镜像示例应用“friendlyhello”，Docker官方文档中有用到。这个镜像的大小如下图所示，194MB。</p>\n<p><img src=\"/images/pasted-12.png\" alt=\"upload successful\"></p>\n<p>这么简单的一个应用，我们就要下载194MB的数据。再来看看docker-slim究竟能让它“瘦”多少。</p>\n<p><img src=\"/images/pasted-13.png\" alt=\"upload successful\"></p>\n<p>docker-slim工具先是对“胖镜像”进行一系列的检测，最终创建了对应的“瘦镜像”。看一下“瘦镜像”的大小：</p>\n<p><img src=\"/images/pasted-14.png\" alt=\"upload successful\"></p>\n<p>正如上图所示，“瘦镜像”大小为24.9MB。开启容器，运行照旧。docker-slim对java、python、ruby、和Node.js应用都非常友好。</p>\n<p>你自己也试一下吧，看看结果如何。以我个人的项目来说，我认为docker-slim在大部分情况下都能适用。阅读docker-slim文档了解更多。</p>\n<h3 id=\"rocker：打破Dockerfile限制\"><a href=\"#rocker：打破Dockerfile限制\" class=\"headerlink\" title=\"rocker：打破Dockerfile限制\"></a>rocker：打破Dockerfile限制</h3><p>很多Docker用户都用Dockerfile来构建镜像。Dockerfile是定义命令的声明方式，通过在命令行调用这些命令，可以对镜像进行操作。</p>\n<p>rocker给Dockerfile的指令集增加了新的指令。rocker是由Grammaryly创建的，原意是用来解决Dockerfile格式的问题。Grammaryly团队写过一篇博客解释当初的动机。我建议你也看一下这篇博客，可以更好的理解rocker。他们在博客中提出的两个关键问题是：</p>\n<p>Docker镜像的大小<br>构建速度缓慢<br>博客还提到了rocker添加的一些新指令。查看rocker文档了解更多。</p>\n<p>MOUNT用来分享volume，这样依赖管理工具就可以重用。<br>FROM指令在Dockerfile中也存在。rocker添加了不止一条FROM指令。这就意味着，一个Rockerfile可以通过创建多个镜像。首个指令集使用所有依赖来创建artifact，第二个指令集可以使用已有的artifact。这种做法极大的降低了镜像的大小。<br>TAG用来标记处于不同构建阶段的镜像。这样一来就不在需要手动标记镜像了。<br>PUSH用来把镜像push到registry。<br>ATTACH用来和中间步骤交互，在debug的时候非常有用。<br>安装rocker，对Mac用户来说，只要运行几条brew命令就行了：</p>\n<p><img src=\"/images/pasted-15.png\" alt=\"upload successful\"></p>\n<p>安装完成后，就可以使用rocker创建镜像。</p>\n<p><img src=\"/images/pasted-16.png\" alt=\"upload successful\"></p>\n<p>创建镜像并将其push到Docker Hub，可以用下面这条命令：</p>\n<p><img src=\"/images/pasted-17.png\" alt=\"upload successful\"></p>\n<p>rocker功能十分完备，了解更多，请参阅其文档。</p>\n<h3 id=\"ctop：容器的顶层界面工具\"><a href=\"#ctop：容器的顶层界面工具\" class=\"headerlink\" title=\"ctop：容器的顶层界面工具\"></a>ctop：容器的顶层界面工具</h3><p>ctop是我最近才开始使用的工具，它可以为多个容器提供实时显示的数据视图。如果你是Mac用户，可以按下面的命令安装ctop。</p>\n<p><img src=\"/images/pasted-18.png\" alt=\"upload successful\"></p>\n<p>安装之后，只需配置DOCKER_HOST环境变量，即可使用ctop。</p>\n<p>运行ctop命令，可以查看所有容器的状态。</p>\n<p>运行</p>\n<p>ctop-a命令，可以仅查看当前运行的容器。</p>\n<p>ctop简单好用，查看机器上运行的容器非常方便。了解更多，请看ctop文档。</p>\n","site":{"data":{}},"excerpt":"<p>【摘要】网上有很多不错的Docker工具，大部分在github上都是开源的。最近两年，我一直在使用Docker，并将其应用到了一些开发项目上。如果你刚开始使用Docker，你会发现它能应用到的实例远远多于预想。Docker能为你做更多，不会让你失望的！</p><p>Docker社区非常活跃，每天都有许多新的实用工具出现。因此，天天去检查更新，试图跟上社区的步伐确实有点困难。所以我在此分享在工作中收集到的一些有趣而实用的Docker工具，帮助大家提高日常工作效率。</p>","more":"\n\n<p>下面开始一一介绍我在使用Docker的过程中找到的有用工具吧。</p>\n<h3 id=\"watchtower：自动更新Docker容器\"><a href=\"#watchtower：自动更新Docker容器\" class=\"headerlink\" title=\"watchtower：自动更新Docker容器\"></a>watchtower：自动更新Docker容器</h3><p>watchtower监视容器运行过程，并且能够捕捉到容器中的变化。当watchtower检测到有镜像发生变化，会自动使用新镜像重启容器。我在本地开发环境中创建的最后一个镜像就用到了watchtower。</p>\n<p>watchtower本身就像一个Docker镜像，所以它启动容器的方式和别的镜像无异。运行watchtower的命令如下：</p>\n<p><img src=\"/images/pasted-4.png\" alt=\"upload successful\"></p>\n<p>上面的代码中，我们用到了一个安装文件/var/run/docker.sock。这个文件主要用来使watchtower与Docker后台API交互。 interval30秒的选项主要用来定义watchtower的轮询间隔时间。watchtower还支持一些别的选项，具体可以查看他们的文档。</p>\n<p>现在，开启一个容器，用watchtower来监控。</p>\n<p><img src=\"/images/pasted-8.png\" alt=\"upload successful\"></p>\n<p>watchtower会开始监控friendlyhello容器。接下来我把新镜像push到Docker Hub，watchtower接下来就会检测到有新镜像可用。它会关掉容器，然后用新镜像重启容器。这里会用到我们刚刚传到运行命令中的选项，换句话说，容器会在4000:80 公共端口选项上开启。</p>\n<p>默认情况下，watchtower会轮询Dockder Hub注册表查找更新的镜像。你也可以通过在环境变量REPO_USER和REPO_PASS中添加指定注册表证书，来设置watchtower轮询私有注册表。</p>\n<p>了解更多watchtower的用法，我推荐watchtower文档。</p>\n<h3 id=\"docker-gc：收集垃圾容器和镜像\"><a href=\"#docker-gc：收集垃圾容器和镜像\" class=\"headerlink\" title=\"docker-gc：收集垃圾容器和镜像\"></a>docker-gc：收集垃圾容器和镜像</h3><p>docker-gc工具能够帮助Docker host清理不需要的容器和镜像。它可以删除存在一小时以上的容器。同时，它也可以删除没有容器的镜像。</p>\n<p>docker-gc可以被当做脚本，也可以被视为容器。我们用容器方法运行docker-gc，用它来查找可以被删除的容器和镜像。</p>\n<p><img src=\"/images/pasted-9.png\" alt=\"upload successful\"></p>\n<p>在上述命令中，我们安装Docker socket文件，这样docker-gc就可以和Docker API进行交互。设置环境变量DRY_RUN=1，查找可被删除的容器和镜像。如果我们不这样设置，docker-gc直接删除它们。所以在删除之前，还是先确认一下。以上代码的输出结果如下：</p>\n<p><img src=\"/images/pasted-10.png\" alt=\"upload successful\"></p>\n<p>确认需要删除的容器和镜像之后，再次运行docker-gc来进行删除清理，这次就不用再设置DRY_RUN参数了。</p>\n<p><img src=\"/images/pasted-11.png\" alt=\"upload successful\"></p>\n<p>上述命令运行后的输出会告诉你哪些容器和镜像已经被docker-gc删除。</p>\n<p>了解更多docker-gc支持的选项，我推荐阅读docker-gc documentation。</p>\n<h3 id=\"docker-slim：给你的容器瘦身\"><a href=\"#docker-slim：给你的容器瘦身\" class=\"headerlink\" title=\"docker-slim：给你的容器瘦身\"></a>docker-slim：给你的容器瘦身</h3><p>如果你对Docker镜像的大小有过担忧，docker-slim绝对是一丸灵丹妙药。</p>\n<p>docker-slim工具可以通过静态和动态分析，针对你的“胖镜像”创建对应的“瘦镜像”。在Github上下载二进制文件，即可使用docker-slim。该二进制文件在Linux和Mac可用。下载之后添加到路径PATH。</p>\n<p>我创建了一个Docker镜像示例应用“friendlyhello”，Docker官方文档中有用到。这个镜像的大小如下图所示，194MB。</p>\n<p><img src=\"/images/pasted-12.png\" alt=\"upload successful\"></p>\n<p>这么简单的一个应用，我们就要下载194MB的数据。再来看看docker-slim究竟能让它“瘦”多少。</p>\n<p><img src=\"/images/pasted-13.png\" alt=\"upload successful\"></p>\n<p>docker-slim工具先是对“胖镜像”进行一系列的检测，最终创建了对应的“瘦镜像”。看一下“瘦镜像”的大小：</p>\n<p><img src=\"/images/pasted-14.png\" alt=\"upload successful\"></p>\n<p>正如上图所示，“瘦镜像”大小为24.9MB。开启容器，运行照旧。docker-slim对java、python、ruby、和Node.js应用都非常友好。</p>\n<p>你自己也试一下吧，看看结果如何。以我个人的项目来说，我认为docker-slim在大部分情况下都能适用。阅读docker-slim文档了解更多。</p>\n<h3 id=\"rocker：打破Dockerfile限制\"><a href=\"#rocker：打破Dockerfile限制\" class=\"headerlink\" title=\"rocker：打破Dockerfile限制\"></a>rocker：打破Dockerfile限制</h3><p>很多Docker用户都用Dockerfile来构建镜像。Dockerfile是定义命令的声明方式，通过在命令行调用这些命令，可以对镜像进行操作。</p>\n<p>rocker给Dockerfile的指令集增加了新的指令。rocker是由Grammaryly创建的，原意是用来解决Dockerfile格式的问题。Grammaryly团队写过一篇博客解释当初的动机。我建议你也看一下这篇博客，可以更好的理解rocker。他们在博客中提出的两个关键问题是：</p>\n<p>Docker镜像的大小<br>构建速度缓慢<br>博客还提到了rocker添加的一些新指令。查看rocker文档了解更多。</p>\n<p>MOUNT用来分享volume，这样依赖管理工具就可以重用。<br>FROM指令在Dockerfile中也存在。rocker添加了不止一条FROM指令。这就意味着，一个Rockerfile可以通过创建多个镜像。首个指令集使用所有依赖来创建artifact，第二个指令集可以使用已有的artifact。这种做法极大的降低了镜像的大小。<br>TAG用来标记处于不同构建阶段的镜像。这样一来就不在需要手动标记镜像了。<br>PUSH用来把镜像push到registry。<br>ATTACH用来和中间步骤交互，在debug的时候非常有用。<br>安装rocker，对Mac用户来说，只要运行几条brew命令就行了：</p>\n<p><img src=\"/images/pasted-15.png\" alt=\"upload successful\"></p>\n<p>安装完成后，就可以使用rocker创建镜像。</p>\n<p><img src=\"/images/pasted-16.png\" alt=\"upload successful\"></p>\n<p>创建镜像并将其push到Docker Hub，可以用下面这条命令：</p>\n<p><img src=\"/images/pasted-17.png\" alt=\"upload successful\"></p>\n<p>rocker功能十分完备，了解更多，请参阅其文档。</p>\n<h3 id=\"ctop：容器的顶层界面工具\"><a href=\"#ctop：容器的顶层界面工具\" class=\"headerlink\" title=\"ctop：容器的顶层界面工具\"></a>ctop：容器的顶层界面工具</h3><p>ctop是我最近才开始使用的工具，它可以为多个容器提供实时显示的数据视图。如果你是Mac用户，可以按下面的命令安装ctop。</p>\n<p><img src=\"/images/pasted-18.png\" alt=\"upload successful\"></p>\n<p>安装之后，只需配置DOCKER_HOST环境变量，即可使用ctop。</p>\n<p>运行ctop命令，可以查看所有容器的状态。</p>\n<p>运行</p>\n<p>ctop-a命令，可以仅查看当前运行的容器。</p>\n<p>ctop简单好用，查看机器上运行的容器非常方便。了解更多，请看ctop文档。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"/images/pasted-4.png","popularPost_tmp_gaData":{"updated":"Wed Apr 25 2018 20:46:59 GMT+0800 (GMT+08:00)","title":"你应该知道的5个Docker实用工具","path":"2017/05/27/你应该知道的5个Docker实用工具/","eyeCatchImage":"/images/pasted-4.png","excerpt":null,"date":"2017-05-27T05:44:37.000Z","pv":0,"totalPV":0,"categories":"Collection","tags":["Docker"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2657},{"title":"四个Kubernetes集群管理工具","author":"Zhang Fei","date":"2017-05-18T12:33:40.000Z","_content":"几乎所有用过Kubernetes的人都会发现其缺点，随着大K在负载平衡和工作管理方面的重大改进，用户可以将注意力逐渐转移到其他地方了，这里有四个项目可以减轻Kubernetes集群管理的负载。\n\n![Kubernetes](http://p1.pstatp.com/large/212f0004094fad2d1aa6)\n\n# Kube-applier\n\nKubernetes成功的关键是其与除Google以外的IT厂商和产品的接触。云存储公司Box收购了Kubernetes，并开放了一些用于帮助其内部部署的项目，kube-applier就是这样一个项目。\n\n作为Kubernetes服务运行的Kube-applier，为Gube仓库中托管的Kubernetes集群提供了一组声明性配置文件，并将其持续应用于集群中的pod。无论何时对定义文件进行任何更改，它们都将被自动提取并应用于相关的pod。\n\n更改也可以按计划或按需应用。Kube应用程序每次运行时都会记录其行为，并提供与Prometheus兼容的指标，以便用户及时了解影响集群的行为。\n\n# Kubetop\n\n有时最简单的工具反而是最有用的，比如Kubetop，它用Python编写，Kubetop会列出所有当前运行的节点，这些节点上所有的pod，这些pod中的所有容器，每个节点的CPU和内存利用率，类似于Unix/Linux top的命令。它不应该用来替代更精细的日志记录或报告工具，因为它产生的信息太简单了，但有时候简单会让阅读Kubernetes集群报告更节省时间。\n\n如果您只需要快速了解哪些因素和命令行影响了集群，这是一个很方便的选项。Kubernetes的kubectl也有类似的功能，但是Kubetop的输出格式更加整齐。\n\n# Kubectx/K8senv\n\nKubernetes有一个“上下文”的概念，用于引用具有不同配置数据的离散集群。用kubectl命令行工具在上下文之间切换可能是冗长和笨拙的，所以第三方提出了在flash中切换上下文的方法。\n\n一个简单的shell脚本，Kubectx可以为Kubernetes上下文分配短名称，并使用短名称在它们之间切换。将破折号（-）传递给kubectx，将被切换回以前的内容，而无需记住名称。该脚本还支持完成名称的选项卡，因此用户不必挖掘长名称并手动重新键入。\n\n另外一个shell脚本K8senv要简单得多，但功能远远不够强大。例如，它不能在当前和最后一个上下文之间进行翻转。\n\n# kubeadm-dind-cluster\n\n如果你想启动一个本地的单节点Kubernetes实例进行测试，那么Kubernetes提供了一个很好的默认组件：Minikube。但是对于那些想要测试和开发多节点集群Kubernetes的人还有一个选择：Mirantis的kubeadm-dind-cluster（KDC）。\n\nKDC通过使用Kubernetes的kubeadm应用程序来启动由Docker容器而不是VM组成的集群。这可以让您在使用Kubernetes时更快地重新启动集群，因此可以更快速地查看任何代码更改造成的影响，也可以在持续集成环境中使用KDC，而不会遇到嵌套虚拟化问题。KDC运行跨平台的Linux，MacOS，Windows，并且不需要Go安装，因为它使用了Dockerized构建的Kubernetes。","source":"_posts/四个Kubernetes集群管理工具.md","raw":"---\ntitle: 四个Kubernetes集群管理工具\nauthor: Zhang Fei\ndate: 2017-05-18 20:33:40\ntags:\n  - Kubernetes\n  - Docker\ncategories: [Essay]\n---\n几乎所有用过Kubernetes的人都会发现其缺点，随着大K在负载平衡和工作管理方面的重大改进，用户可以将注意力逐渐转移到其他地方了，这里有四个项目可以减轻Kubernetes集群管理的负载。\n\n![Kubernetes](http://p1.pstatp.com/large/212f0004094fad2d1aa6)\n\n# Kube-applier\n\nKubernetes成功的关键是其与除Google以外的IT厂商和产品的接触。云存储公司Box收购了Kubernetes，并开放了一些用于帮助其内部部署的项目，kube-applier就是这样一个项目。\n\n作为Kubernetes服务运行的Kube-applier，为Gube仓库中托管的Kubernetes集群提供了一组声明性配置文件，并将其持续应用于集群中的pod。无论何时对定义文件进行任何更改，它们都将被自动提取并应用于相关的pod。\n\n更改也可以按计划或按需应用。Kube应用程序每次运行时都会记录其行为，并提供与Prometheus兼容的指标，以便用户及时了解影响集群的行为。\n\n# Kubetop\n\n有时最简单的工具反而是最有用的，比如Kubetop，它用Python编写，Kubetop会列出所有当前运行的节点，这些节点上所有的pod，这些pod中的所有容器，每个节点的CPU和内存利用率，类似于Unix/Linux top的命令。它不应该用来替代更精细的日志记录或报告工具，因为它产生的信息太简单了，但有时候简单会让阅读Kubernetes集群报告更节省时间。\n\n如果您只需要快速了解哪些因素和命令行影响了集群，这是一个很方便的选项。Kubernetes的kubectl也有类似的功能，但是Kubetop的输出格式更加整齐。\n\n# Kubectx/K8senv\n\nKubernetes有一个“上下文”的概念，用于引用具有不同配置数据的离散集群。用kubectl命令行工具在上下文之间切换可能是冗长和笨拙的，所以第三方提出了在flash中切换上下文的方法。\n\n一个简单的shell脚本，Kubectx可以为Kubernetes上下文分配短名称，并使用短名称在它们之间切换。将破折号（-）传递给kubectx，将被切换回以前的内容，而无需记住名称。该脚本还支持完成名称的选项卡，因此用户不必挖掘长名称并手动重新键入。\n\n另外一个shell脚本K8senv要简单得多，但功能远远不够强大。例如，它不能在当前和最后一个上下文之间进行翻转。\n\n# kubeadm-dind-cluster\n\n如果你想启动一个本地的单节点Kubernetes实例进行测试，那么Kubernetes提供了一个很好的默认组件：Minikube。但是对于那些想要测试和开发多节点集群Kubernetes的人还有一个选择：Mirantis的kubeadm-dind-cluster（KDC）。\n\nKDC通过使用Kubernetes的kubeadm应用程序来启动由Docker容器而不是VM组成的集群。这可以让您在使用Kubernetes时更快地重新启动集群，因此可以更快速地查看任何代码更改造成的影响，也可以在持续集成环境中使用KDC，而不会遇到嵌套虚拟化问题。KDC运行跨平台的Linux，MacOS，Windows，并且不需要Go安装，因为它使用了Dockerized构建的Kubernetes。","slug":"四个Kubernetes集群管理工具","published":1,"updated":"2018-04-25T12:46:59.499Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2fj0nqh0026q4vgbe83a50a","content":"<p>几乎所有用过Kubernetes的人都会发现其缺点，随着大K在负载平衡和工作管理方面的重大改进，用户可以将注意力逐渐转移到其他地方了，这里有四个项目可以减轻Kubernetes集群管理的负载。</p><p><img src=\"http://p1.pstatp.com/large/212f0004094fad2d1aa6\" alt=\"Kubernetes\"></p><h1 id=\"Kube-applier\"><a href=\"#Kube-applier\" class=\"headerlink\" title=\"Kube-applier\"></a>Kube-applier</h1><p>Kubernetes成功的关键是其与除Google以外的IT厂商和产品的接触。云存储公司Box收购了Kubernetes，并开放了一些用于帮助其内部部署的项目，kube-applier就是这样一个项目。</p><a id=\"more\"></a>\n\n\n<p>作为Kubernetes服务运行的Kube-applier，为Gube仓库中托管的Kubernetes集群提供了一组声明性配置文件，并将其持续应用于集群中的pod。无论何时对定义文件进行任何更改，它们都将被自动提取并应用于相关的pod。</p>\n<p>更改也可以按计划或按需应用。Kube应用程序每次运行时都会记录其行为，并提供与Prometheus兼容的指标，以便用户及时了解影响集群的行为。</p>\n<h1 id=\"Kubetop\"><a href=\"#Kubetop\" class=\"headerlink\" title=\"Kubetop\"></a>Kubetop</h1><p>有时最简单的工具反而是最有用的，比如Kubetop，它用Python编写，Kubetop会列出所有当前运行的节点，这些节点上所有的pod，这些pod中的所有容器，每个节点的CPU和内存利用率，类似于Unix/Linux top的命令。它不应该用来替代更精细的日志记录或报告工具，因为它产生的信息太简单了，但有时候简单会让阅读Kubernetes集群报告更节省时间。</p>\n<p>如果您只需要快速了解哪些因素和命令行影响了集群，这是一个很方便的选项。Kubernetes的kubectl也有类似的功能，但是Kubetop的输出格式更加整齐。</p>\n<h1 id=\"Kubectx-K8senv\"><a href=\"#Kubectx-K8senv\" class=\"headerlink\" title=\"Kubectx/K8senv\"></a>Kubectx/K8senv</h1><p>Kubernetes有一个“上下文”的概念，用于引用具有不同配置数据的离散集群。用kubectl命令行工具在上下文之间切换可能是冗长和笨拙的，所以第三方提出了在flash中切换上下文的方法。</p>\n<p>一个简单的shell脚本，Kubectx可以为Kubernetes上下文分配短名称，并使用短名称在它们之间切换。将破折号（-）传递给kubectx，将被切换回以前的内容，而无需记住名称。该脚本还支持完成名称的选项卡，因此用户不必挖掘长名称并手动重新键入。</p>\n<p>另外一个shell脚本K8senv要简单得多，但功能远远不够强大。例如，它不能在当前和最后一个上下文之间进行翻转。</p>\n<h1 id=\"kubeadm-dind-cluster\"><a href=\"#kubeadm-dind-cluster\" class=\"headerlink\" title=\"kubeadm-dind-cluster\"></a>kubeadm-dind-cluster</h1><p>如果你想启动一个本地的单节点Kubernetes实例进行测试，那么Kubernetes提供了一个很好的默认组件：Minikube。但是对于那些想要测试和开发多节点集群Kubernetes的人还有一个选择：Mirantis的kubeadm-dind-cluster（KDC）。</p>\n<p>KDC通过使用Kubernetes的kubeadm应用程序来启动由Docker容器而不是VM组成的集群。这可以让您在使用Kubernetes时更快地重新启动集群，因此可以更快速地查看任何代码更改造成的影响，也可以在持续集成环境中使用KDC，而不会遇到嵌套虚拟化问题。KDC运行跨平台的Linux，MacOS，Windows，并且不需要Go安装，因为它使用了Dockerized构建的Kubernetes。</p>\n","site":{"data":{}},"excerpt":"<p>几乎所有用过Kubernetes的人都会发现其缺点，随着大K在负载平衡和工作管理方面的重大改进，用户可以将注意力逐渐转移到其他地方了，这里有四个项目可以减轻Kubernetes集群管理的负载。</p><p><img src=\"http://p1.pstatp.com/large/212f0004094fad2d1aa6\" alt=\"Kubernetes\"></p><h1 id=\"Kube-applier\"><a href=\"#Kube-applier\" class=\"headerlink\" title=\"Kube-applier\"></a>Kube-applier</h1><p>Kubernetes成功的关键是其与除Google以外的IT厂商和产品的接触。云存储公司Box收购了Kubernetes，并开放了一些用于帮助其内部部署的项目，kube-applier就是这样一个项目。</p>","more":"\n\n\n<p>作为Kubernetes服务运行的Kube-applier，为Gube仓库中托管的Kubernetes集群提供了一组声明性配置文件，并将其持续应用于集群中的pod。无论何时对定义文件进行任何更改，它们都将被自动提取并应用于相关的pod。</p>\n<p>更改也可以按计划或按需应用。Kube应用程序每次运行时都会记录其行为，并提供与Prometheus兼容的指标，以便用户及时了解影响集群的行为。</p>\n<h1 id=\"Kubetop\"><a href=\"#Kubetop\" class=\"headerlink\" title=\"Kubetop\"></a>Kubetop</h1><p>有时最简单的工具反而是最有用的，比如Kubetop，它用Python编写，Kubetop会列出所有当前运行的节点，这些节点上所有的pod，这些pod中的所有容器，每个节点的CPU和内存利用率，类似于Unix/Linux top的命令。它不应该用来替代更精细的日志记录或报告工具，因为它产生的信息太简单了，但有时候简单会让阅读Kubernetes集群报告更节省时间。</p>\n<p>如果您只需要快速了解哪些因素和命令行影响了集群，这是一个很方便的选项。Kubernetes的kubectl也有类似的功能，但是Kubetop的输出格式更加整齐。</p>\n<h1 id=\"Kubectx-K8senv\"><a href=\"#Kubectx-K8senv\" class=\"headerlink\" title=\"Kubectx/K8senv\"></a>Kubectx/K8senv</h1><p>Kubernetes有一个“上下文”的概念，用于引用具有不同配置数据的离散集群。用kubectl命令行工具在上下文之间切换可能是冗长和笨拙的，所以第三方提出了在flash中切换上下文的方法。</p>\n<p>一个简单的shell脚本，Kubectx可以为Kubernetes上下文分配短名称，并使用短名称在它们之间切换。将破折号（-）传递给kubectx，将被切换回以前的内容，而无需记住名称。该脚本还支持完成名称的选项卡，因此用户不必挖掘长名称并手动重新键入。</p>\n<p>另外一个shell脚本K8senv要简单得多，但功能远远不够强大。例如，它不能在当前和最后一个上下文之间进行翻转。</p>\n<h1 id=\"kubeadm-dind-cluster\"><a href=\"#kubeadm-dind-cluster\" class=\"headerlink\" title=\"kubeadm-dind-cluster\"></a>kubeadm-dind-cluster</h1><p>如果你想启动一个本地的单节点Kubernetes实例进行测试，那么Kubernetes提供了一个很好的默认组件：Minikube。但是对于那些想要测试和开发多节点集群Kubernetes的人还有一个选择：Mirantis的kubeadm-dind-cluster（KDC）。</p>\n<p>KDC通过使用Kubernetes的kubeadm应用程序来启动由Docker容器而不是VM组成的集群。这可以让您在使用Kubernetes时更快地重新启动集群，因此可以更快速地查看任何代码更改造成的影响，也可以在持续集成环境中使用KDC，而不会遇到嵌套虚拟化问题。KDC运行跨平台的Linux，MacOS，Windows，并且不需要Go安装，因为它使用了Dockerized构建的Kubernetes。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"http://p1.pstatp.com/large/212f0004094fad2d1aa6","popularPost_tmp_gaData":{"updated":"Wed Apr 25 2018 20:46:59 GMT+0800 (GMT+08:00)","title":"四个Kubernetes集群管理工具","path":"2017/05/18/四个Kubernetes集群管理工具/","eyeCatchImage":"http://p1.pstatp.com/large/212f0004094fad2d1aa6","excerpt":null,"date":"2017-05-18T12:33:40.000Z","pv":0,"totalPV":0,"categories":"Essay","tags":["Docker","Kubernetes"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1318},{"title":"基于Docker的CI/CD流水线实践","author":"Zhang Fei","date":"2017-07-07T14:56:38.000Z","_content":"# 概要\n\n随着DevOps理念不断的传播，大部分IT从业者对于DevOps本身也有了一定的了解和认识，然而企业内部想根据DevOps思想实践，这并不是一件很简单的事情。一方面由于企业内部的历史环境以及组织结构问题，另外一方面因为业界并没有一套标准的开源工具集可以借鉴（关于几家基于Docker创业的服务提供商暂时除外）。\n\n那么该篇内容主要讲解如何借助开源工具结合CI/CD的场景，将Docker融入到部署单元中去，进行持续集成、测试到最终的持续部署，开发人员最终只需要去关注业务的访问入口就可以知道业务是否正常，并可以通过一系列的监控工具去及时发现业务异常。\n\n在整个DevOps部署流水线中需要以下几个部分：CI部分、CD部分、服务调度(治理)部分、监控部分、日志部分。本篇文章将通过一个简单的go-web应用去进行基于Docker的CI/CD流水线的测试。\n\n![upload successful](/images/pasted-42.png)\n\n# 基于Docker的CI/CD的优势\n\n一个完整的流程入上图所示，用户（也就是开发人员）将包含Dockerfile的源码从本地push到Git服务器上，然后触发Jenkins进行构建源码，源码构建完成后紧接着进行Docker image的构建，一切构建完成之后，顺带将构建成功的image上传到企业内部的镜像仓库，到此刻为止，其实一个基本的CI（持续集成）已经算是结束，剩下的部分就是持续部署或者进行持续的交付开发产物了。在以前传统的软件发布模式中，持续集成的产物是编译打包好的代码，如果想要发布程序，发布系统需要在持续集成的制品库中去获得对应的代码，然后根据一系列的环境检查来准备应用的运行时环境，而在此过程中往往会涉及到比较多的基本组件依赖，所以在整体的发布周期内来看，还是有一些问题的。在Docker或者容器时代，我们将容器的镜像构建部分融入到持续集成（CI）环节，最终持续集成的产出物是一些已经处理好依赖关系，基本不需要人工进行二次干预的Docker image，而在CD环节，发布系统只需要设置和管理很少的信息就能够很快将image运行起来，快速地将业务发布出去。\n\n在上面整个环节中，其实无非就是增加了Docker的那一层处理，但其实在整个软件开发的生命周期中，它是产生了极大的影响的。首先，部署系统不需要为统一的部署框架去做更多逻辑抽象，业务研发在开发代码的过程中选择自己依赖的base image即可，最终运行起来的业务也就是你当时提供的base image的模样；其次，由于base image已经处理好了相关的依赖，所以当发布系统拿到业务的image的时候，发布操作将会变得异常迅速，这对于互联网时代可谓是非常重要的；最后一点，也是我感受最深的，就是研发构建好的image可以在任何的Docker环境中run起来，研发人员不需要再关系环境一致性的问题，他们在自己本地的测试环境能够运行起来的应用，那么到生成环境也一定可以。\n\n为什么第三点我感触比较深呢？因为以前经常有研发兄弟跑过来跟我们讲，我们代码在本地运行一切顺利，代码给你们上到生产就各种问题。所以如果在整个流程中使用Docker image来讲所有的环境固化，从此mm就再也不用担心和研发兄弟扯皮环境不一致的问题啦。\n\n# 基于Docker的CI/CD的开源方案实现\n\n## 一、自助式Git管理工具Gogs的部署安装\n\nGogs部署\n\nGogs部署在10.0.0.1主机上，映射到宿主机端口为32770\n\n```sh\n$ docker run -itd -p 32770:3000 -v /export/CI-CD/mygit:/data --name jdjr-gogs gogs:17-04-25\n```\n\nMySQL建库授权\n\nMySQL部署在10.0.0.2上，映射到宿主机端口为32771\n\n```sh\n$ docker run -itd -p 32771:3306 --name jdjr-mysql pandora-mysql\n```\n\n配置Gogs\n\n上面两步没有问题之后就可以直接访问:ip:32770 （也就是Gogs暴露的端口）进行相关的配置。\n\n配置数据库相关：\n\n![upload successful](/images/pasted-40.png)\n\n配置Git地址：\n\n![upload successful](/images/pasted-39.png)\n\n配置完成后进行初始化，并创建管理员用户后就可正常使用。\n\n如图，现在正在使用的本地Git。\n\n![upload successful](/images/pasted-38.png)\n\n现在就可以将源码托管在本地的Gogs仓库上了。\n\n## 二、Jenkins持续集成工具部署安装\n\nJenkins部署\n\nJenkins在官方的image基础上增加了go 1.7的编译环境，部署在10.0.0.2上，映射到宿主机端口32791。\n\n```sh\n$ docker run -itd -p 32791:8080 -p 32790:50000 -v /export/jenkins/:/var/jenkine_home/ --name jdjr-jenkins jdjr-jenkins\n```\n\n> 注意：需要将Jenkins相关数据以及编译环境映射到Docker宿主机上，因为后期编译完成后Jenkins容器需要docker build构建业务image。\n\nJenkins容器运行起来之后，就可以直接访问10.0.0.2:32791进行初始化安装配置了。\n\n在Web上面访问Jenkins地址进行初始化配置，需要写入ID进行解锁Jenkins（Web上会提示在哪个路径下存放，直接使用docker logs也可查看）；解锁后就是正常的安装相关的Plugins了，只要网络没有问题，一般都正常通过。\n\nJenkine安装成功后界面如下：\n\n![upload successful](/images/pasted-37.png)\n\n创建Jenkins项目，并配置构建脚本（也可通过相应的Plugins进行配置）。\n\n创建一个新的名为test的项目，配置相关的源码管理以及构建条件以及相关的后续操作。\n\n![upload successful](/images/pasted-36.png)\n\n![upload successful](/images/pasted-35.png)\n\n![upload successful](/images/pasted-34.png)\n\n配置Jenkins环境\n\n注意：由上图可以看出来，Jenkins进行构建image和持续部署测试的过程都是通过SSH到远端去执行的，因此需要再Jenkins容器中生成SSH公私钥对，并和Jenkins的宿主机以及持续部署测试的宿主机进行免密认证。虽然Jenkins本身其实支持了很多种Plugin来支持管理Docker的，比如说Docker build step plugin、Docker Build Publish Plugin，但是由于过多的Plugin会造成实际环境中的维护成本大大增加，因此我们选择简单粗暴的脚本方式，上图中的Execute shell只是简单的示例。\n\n```sh\n$ docker exec -it myjenkins bash\n```\n\n生成公私钥对之后，将公钥传给要远程部署的机器就OK了，目的是要让Jenkins容器能够免密登录远程服务器，并能执行sudo命令。\n\n## 三、通过配置Nginx反向代理来访问Git，Jenkins以及测试实例\n\n反向代理Nginx部署在10.0.0.4:80上。\n\n配置Nginx\n\n> 注意：centos6.8-jdjr-test-app:v2镜像默认是包含Nginx以及配置管理工具的。\n\n```sh\n$ docker run -itd --name biaoge-nginx centos6.8-jdjr-test-app:v2\n```\n\n> 注意：此时Git上的源码还没有编译部署，我只是暂时定义了一个端10.0.0.3:32768，等完成整个CI/CD流程后直接访问web.biao.com就可以看到源码部署的效果。\n\n测试访问\n\n在本地绑定如下hosts\n\n> 10.0.0.4 jenkins.biao.com\n\n访问mygit.biao.com上面的源码：\n\n![upload successful](/images/pasted-33.png)\n\n访问jenkins.biao.com上的构建任务：\n\n![upload successful](/images/pasted-32.png)\n\n注意：test项目在之前我们已经配置好了，所以可以直接触发构建部署。\n手动触发构建部署：\n\n![upload successful](/images/pasted-31.png)\n\n注意：在构建过程这里可以看到详细的构建过程，构建成功后便可以访问我们的goweb服务了。\n访问web.biao.com服务：\n\n![upload successful](/images/pasted-30.png)\n\n持续集成持续部署的效果\n\n更新源码中的部分内容，进行重新构建访问。\n\n修改web的源码\n在Jenkins上进行再次构建：\n\n![upload successful](/images/pasted-29.png)\n\n![upload successful](/images/pasted-28.png)\n\n再次访问web.biao.com服务：\n\n![upload successful](/images/pasted-27.png)\n\n对比前后两个Web，发现不仅欢迎语由“biaoge”变成了“逼格运维说”，而且第二行的字符串由4e7853008397变为0ce402beclle，也就是是之前的那个Container已经被销毁，我们现在访问的web.biao.com是重新编译后运行在新的container里面的实例。","source":"_posts/基于Docker的CI-CD流水线实践.md","raw":"---\ntitle: 基于Docker的CI/CD流水线实践\nauthor: Zhang Fei\ndate: 2017-07-07 22:56:38\ntags:\n  -  DevOps\ncategories:\n  - Collection\n---\n# 概要\n\n随着DevOps理念不断的传播，大部分IT从业者对于DevOps本身也有了一定的了解和认识，然而企业内部想根据DevOps思想实践，这并不是一件很简单的事情。一方面由于企业内部的历史环境以及组织结构问题，另外一方面因为业界并没有一套标准的开源工具集可以借鉴（关于几家基于Docker创业的服务提供商暂时除外）。\n\n那么该篇内容主要讲解如何借助开源工具结合CI/CD的场景，将Docker融入到部署单元中去，进行持续集成、测试到最终的持续部署，开发人员最终只需要去关注业务的访问入口就可以知道业务是否正常，并可以通过一系列的监控工具去及时发现业务异常。\n\n在整个DevOps部署流水线中需要以下几个部分：CI部分、CD部分、服务调度(治理)部分、监控部分、日志部分。本篇文章将通过一个简单的go-web应用去进行基于Docker的CI/CD流水线的测试。\n\n![upload successful](/images/pasted-42.png)\n\n# 基于Docker的CI/CD的优势\n\n一个完整的流程入上图所示，用户（也就是开发人员）将包含Dockerfile的源码从本地push到Git服务器上，然后触发Jenkins进行构建源码，源码构建完成后紧接着进行Docker image的构建，一切构建完成之后，顺带将构建成功的image上传到企业内部的镜像仓库，到此刻为止，其实一个基本的CI（持续集成）已经算是结束，剩下的部分就是持续部署或者进行持续的交付开发产物了。在以前传统的软件发布模式中，持续集成的产物是编译打包好的代码，如果想要发布程序，发布系统需要在持续集成的制品库中去获得对应的代码，然后根据一系列的环境检查来准备应用的运行时环境，而在此过程中往往会涉及到比较多的基本组件依赖，所以在整体的发布周期内来看，还是有一些问题的。在Docker或者容器时代，我们将容器的镜像构建部分融入到持续集成（CI）环节，最终持续集成的产出物是一些已经处理好依赖关系，基本不需要人工进行二次干预的Docker image，而在CD环节，发布系统只需要设置和管理很少的信息就能够很快将image运行起来，快速地将业务发布出去。\n\n在上面整个环节中，其实无非就是增加了Docker的那一层处理，但其实在整个软件开发的生命周期中，它是产生了极大的影响的。首先，部署系统不需要为统一的部署框架去做更多逻辑抽象，业务研发在开发代码的过程中选择自己依赖的base image即可，最终运行起来的业务也就是你当时提供的base image的模样；其次，由于base image已经处理好了相关的依赖，所以当发布系统拿到业务的image的时候，发布操作将会变得异常迅速，这对于互联网时代可谓是非常重要的；最后一点，也是我感受最深的，就是研发构建好的image可以在任何的Docker环境中run起来，研发人员不需要再关系环境一致性的问题，他们在自己本地的测试环境能够运行起来的应用，那么到生成环境也一定可以。\n\n为什么第三点我感触比较深呢？因为以前经常有研发兄弟跑过来跟我们讲，我们代码在本地运行一切顺利，代码给你们上到生产就各种问题。所以如果在整个流程中使用Docker image来讲所有的环境固化，从此mm就再也不用担心和研发兄弟扯皮环境不一致的问题啦。\n\n# 基于Docker的CI/CD的开源方案实现\n\n## 一、自助式Git管理工具Gogs的部署安装\n\nGogs部署\n\nGogs部署在10.0.0.1主机上，映射到宿主机端口为32770\n\n```sh\n$ docker run -itd -p 32770:3000 -v /export/CI-CD/mygit:/data --name jdjr-gogs gogs:17-04-25\n```\n\nMySQL建库授权\n\nMySQL部署在10.0.0.2上，映射到宿主机端口为32771\n\n```sh\n$ docker run -itd -p 32771:3306 --name jdjr-mysql pandora-mysql\n```\n\n配置Gogs\n\n上面两步没有问题之后就可以直接访问:ip:32770 （也就是Gogs暴露的端口）进行相关的配置。\n\n配置数据库相关：\n\n![upload successful](/images/pasted-40.png)\n\n配置Git地址：\n\n![upload successful](/images/pasted-39.png)\n\n配置完成后进行初始化，并创建管理员用户后就可正常使用。\n\n如图，现在正在使用的本地Git。\n\n![upload successful](/images/pasted-38.png)\n\n现在就可以将源码托管在本地的Gogs仓库上了。\n\n## 二、Jenkins持续集成工具部署安装\n\nJenkins部署\n\nJenkins在官方的image基础上增加了go 1.7的编译环境，部署在10.0.0.2上，映射到宿主机端口32791。\n\n```sh\n$ docker run -itd -p 32791:8080 -p 32790:50000 -v /export/jenkins/:/var/jenkine_home/ --name jdjr-jenkins jdjr-jenkins\n```\n\n> 注意：需要将Jenkins相关数据以及编译环境映射到Docker宿主机上，因为后期编译完成后Jenkins容器需要docker build构建业务image。\n\nJenkins容器运行起来之后，就可以直接访问10.0.0.2:32791进行初始化安装配置了。\n\n在Web上面访问Jenkins地址进行初始化配置，需要写入ID进行解锁Jenkins（Web上会提示在哪个路径下存放，直接使用docker logs也可查看）；解锁后就是正常的安装相关的Plugins了，只要网络没有问题，一般都正常通过。\n\nJenkine安装成功后界面如下：\n\n![upload successful](/images/pasted-37.png)\n\n创建Jenkins项目，并配置构建脚本（也可通过相应的Plugins进行配置）。\n\n创建一个新的名为test的项目，配置相关的源码管理以及构建条件以及相关的后续操作。\n\n![upload successful](/images/pasted-36.png)\n\n![upload successful](/images/pasted-35.png)\n\n![upload successful](/images/pasted-34.png)\n\n配置Jenkins环境\n\n注意：由上图可以看出来，Jenkins进行构建image和持续部署测试的过程都是通过SSH到远端去执行的，因此需要再Jenkins容器中生成SSH公私钥对，并和Jenkins的宿主机以及持续部署测试的宿主机进行免密认证。虽然Jenkins本身其实支持了很多种Plugin来支持管理Docker的，比如说Docker build step plugin、Docker Build Publish Plugin，但是由于过多的Plugin会造成实际环境中的维护成本大大增加，因此我们选择简单粗暴的脚本方式，上图中的Execute shell只是简单的示例。\n\n```sh\n$ docker exec -it myjenkins bash\n```\n\n生成公私钥对之后，将公钥传给要远程部署的机器就OK了，目的是要让Jenkins容器能够免密登录远程服务器，并能执行sudo命令。\n\n## 三、通过配置Nginx反向代理来访问Git，Jenkins以及测试实例\n\n反向代理Nginx部署在10.0.0.4:80上。\n\n配置Nginx\n\n> 注意：centos6.8-jdjr-test-app:v2镜像默认是包含Nginx以及配置管理工具的。\n\n```sh\n$ docker run -itd --name biaoge-nginx centos6.8-jdjr-test-app:v2\n```\n\n> 注意：此时Git上的源码还没有编译部署，我只是暂时定义了一个端10.0.0.3:32768，等完成整个CI/CD流程后直接访问web.biao.com就可以看到源码部署的效果。\n\n测试访问\n\n在本地绑定如下hosts\n\n> 10.0.0.4 jenkins.biao.com\n\n访问mygit.biao.com上面的源码：\n\n![upload successful](/images/pasted-33.png)\n\n访问jenkins.biao.com上的构建任务：\n\n![upload successful](/images/pasted-32.png)\n\n注意：test项目在之前我们已经配置好了，所以可以直接触发构建部署。\n手动触发构建部署：\n\n![upload successful](/images/pasted-31.png)\n\n注意：在构建过程这里可以看到详细的构建过程，构建成功后便可以访问我们的goweb服务了。\n访问web.biao.com服务：\n\n![upload successful](/images/pasted-30.png)\n\n持续集成持续部署的效果\n\n更新源码中的部分内容，进行重新构建访问。\n\n修改web的源码\n在Jenkins上进行再次构建：\n\n![upload successful](/images/pasted-29.png)\n\n![upload successful](/images/pasted-28.png)\n\n再次访问web.biao.com服务：\n\n![upload successful](/images/pasted-27.png)\n\n对比前后两个Web，发现不仅欢迎语由“biaoge”变成了“逼格运维说”，而且第二行的字符串由4e7853008397变为0ce402beclle，也就是是之前的那个Container已经被销毁，我们现在访问的web.biao.com是重新编译后运行在新的container里面的实例。","slug":"基于Docker的CI-CD流水线实践","published":1,"updated":"2018-04-25T12:46:59.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2fj0nqi0029q4vg3c5kayb6","content":"<h1 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h1><p>随着DevOps理念不断的传播，大部分IT从业者对于DevOps本身也有了一定的了解和认识，然而企业内部想根据DevOps思想实践，这并不是一件很简单的事情。一方面由于企业内部的历史环境以及组织结构问题，另外一方面因为业界并没有一套标准的开源工具集可以借鉴（关于几家基于Docker创业的服务提供商暂时除外）。</p><a id=\"more\"></a>\n<p>那么该篇内容主要讲解如何借助开源工具结合CI/CD的场景，将Docker融入到部署单元中去，进行持续集成、测试到最终的持续部署，开发人员最终只需要去关注业务的访问入口就可以知道业务是否正常，并可以通过一系列的监控工具去及时发现业务异常。</p>\n<p>在整个DevOps部署流水线中需要以下几个部分：CI部分、CD部分、服务调度(治理)部分、监控部分、日志部分。本篇文章将通过一个简单的go-web应用去进行基于Docker的CI/CD流水线的测试。</p>\n<p><img src=\"/images/pasted-42.png\" alt=\"upload successful\"></p>\n<h1 id=\"基于Docker的CI-CD的优势\"><a href=\"#基于Docker的CI-CD的优势\" class=\"headerlink\" title=\"基于Docker的CI/CD的优势\"></a>基于Docker的CI/CD的优势</h1><p>一个完整的流程入上图所示，用户（也就是开发人员）将包含Dockerfile的源码从本地push到Git服务器上，然后触发Jenkins进行构建源码，源码构建完成后紧接着进行Docker image的构建，一切构建完成之后，顺带将构建成功的image上传到企业内部的镜像仓库，到此刻为止，其实一个基本的CI（持续集成）已经算是结束，剩下的部分就是持续部署或者进行持续的交付开发产物了。在以前传统的软件发布模式中，持续集成的产物是编译打包好的代码，如果想要发布程序，发布系统需要在持续集成的制品库中去获得对应的代码，然后根据一系列的环境检查来准备应用的运行时环境，而在此过程中往往会涉及到比较多的基本组件依赖，所以在整体的发布周期内来看，还是有一些问题的。在Docker或者容器时代，我们将容器的镜像构建部分融入到持续集成（CI）环节，最终持续集成的产出物是一些已经处理好依赖关系，基本不需要人工进行二次干预的Docker image，而在CD环节，发布系统只需要设置和管理很少的信息就能够很快将image运行起来，快速地将业务发布出去。</p>\n<p>在上面整个环节中，其实无非就是增加了Docker的那一层处理，但其实在整个软件开发的生命周期中，它是产生了极大的影响的。首先，部署系统不需要为统一的部署框架去做更多逻辑抽象，业务研发在开发代码的过程中选择自己依赖的base image即可，最终运行起来的业务也就是你当时提供的base image的模样；其次，由于base image已经处理好了相关的依赖，所以当发布系统拿到业务的image的时候，发布操作将会变得异常迅速，这对于互联网时代可谓是非常重要的；最后一点，也是我感受最深的，就是研发构建好的image可以在任何的Docker环境中run起来，研发人员不需要再关系环境一致性的问题，他们在自己本地的测试环境能够运行起来的应用，那么到生成环境也一定可以。</p>\n<p>为什么第三点我感触比较深呢？因为以前经常有研发兄弟跑过来跟我们讲，我们代码在本地运行一切顺利，代码给你们上到生产就各种问题。所以如果在整个流程中使用Docker image来讲所有的环境固化，从此mm就再也不用担心和研发兄弟扯皮环境不一致的问题啦。</p>\n<h1 id=\"基于Docker的CI-CD的开源方案实现\"><a href=\"#基于Docker的CI-CD的开源方案实现\" class=\"headerlink\" title=\"基于Docker的CI/CD的开源方案实现\"></a>基于Docker的CI/CD的开源方案实现</h1><h2 id=\"一、自助式Git管理工具Gogs的部署安装\"><a href=\"#一、自助式Git管理工具Gogs的部署安装\" class=\"headerlink\" title=\"一、自助式Git管理工具Gogs的部署安装\"></a>一、自助式Git管理工具Gogs的部署安装</h2><p>Gogs部署</p>\n<p>Gogs部署在10.0.0.1主机上，映射到宿主机端口为32770</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -itd -p 32770:3000 -v /<span class=\"built_in\">export</span>/CI-CD/mygit:/data --name jdjr-gogs gogs:17-04-25</span><br></pre></td></tr></table></figure>\n\n<p>MySQL建库授权</p>\n<p>MySQL部署在10.0.0.2上，映射到宿主机端口为32771</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -itd -p 32771:3306 --name jdjr-mysql pandora-mysql</span><br></pre></td></tr></table></figure>\n\n<p>配置Gogs</p>\n<p>上面两步没有问题之后就可以直接访问:ip:32770 （也就是Gogs暴露的端口）进行相关的配置。</p>\n<p>配置数据库相关：</p>\n<p><img src=\"/images/pasted-40.png\" alt=\"upload successful\"></p>\n<p>配置Git地址：</p>\n<p><img src=\"/images/pasted-39.png\" alt=\"upload successful\"></p>\n<p>配置完成后进行初始化，并创建管理员用户后就可正常使用。</p>\n<p>如图，现在正在使用的本地Git。</p>\n<p><img src=\"/images/pasted-38.png\" alt=\"upload successful\"></p>\n<p>现在就可以将源码托管在本地的Gogs仓库上了。</p>\n<h2 id=\"二、Jenkins持续集成工具部署安装\"><a href=\"#二、Jenkins持续集成工具部署安装\" class=\"headerlink\" title=\"二、Jenkins持续集成工具部署安装\"></a>二、Jenkins持续集成工具部署安装</h2><p>Jenkins部署</p>\n<p>Jenkins在官方的image基础上增加了go 1.7的编译环境，部署在10.0.0.2上，映射到宿主机端口32791。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -itd -p 32791:8080 -p 32790:50000 -v /<span class=\"built_in\">export</span>/jenkins/:/var/jenkine_home/ --name jdjr-jenkins jdjr-jenkins</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：需要将Jenkins相关数据以及编译环境映射到Docker宿主机上，因为后期编译完成后Jenkins容器需要docker build构建业务image。</p>\n</blockquote>\n<p>Jenkins容器运行起来之后，就可以直接访问10.0.0.2:32791进行初始化安装配置了。</p>\n<p>在Web上面访问Jenkins地址进行初始化配置，需要写入ID进行解锁Jenkins（Web上会提示在哪个路径下存放，直接使用docker logs也可查看）；解锁后就是正常的安装相关的Plugins了，只要网络没有问题，一般都正常通过。</p>\n<p>Jenkine安装成功后界面如下：</p>\n<p><img src=\"/images/pasted-37.png\" alt=\"upload successful\"></p>\n<p>创建Jenkins项目，并配置构建脚本（也可通过相应的Plugins进行配置）。</p>\n<p>创建一个新的名为test的项目，配置相关的源码管理以及构建条件以及相关的后续操作。</p>\n<p><img src=\"/images/pasted-36.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-35.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-34.png\" alt=\"upload successful\"></p>\n<p>配置Jenkins环境</p>\n<p>注意：由上图可以看出来，Jenkins进行构建image和持续部署测试的过程都是通过SSH到远端去执行的，因此需要再Jenkins容器中生成SSH公私钥对，并和Jenkins的宿主机以及持续部署测试的宿主机进行免密认证。虽然Jenkins本身其实支持了很多种Plugin来支持管理Docker的，比如说Docker build step plugin、Docker Build Publish Plugin，但是由于过多的Plugin会造成实际环境中的维护成本大大增加，因此我们选择简单粗暴的脚本方式，上图中的Execute shell只是简单的示例。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -it myjenkins bash</span><br></pre></td></tr></table></figure>\n\n<p>生成公私钥对之后，将公钥传给要远程部署的机器就OK了，目的是要让Jenkins容器能够免密登录远程服务器，并能执行sudo命令。</p>\n<h2 id=\"三、通过配置Nginx反向代理来访问Git，Jenkins以及测试实例\"><a href=\"#三、通过配置Nginx反向代理来访问Git，Jenkins以及测试实例\" class=\"headerlink\" title=\"三、通过配置Nginx反向代理来访问Git，Jenkins以及测试实例\"></a>三、通过配置Nginx反向代理来访问Git，Jenkins以及测试实例</h2><p>反向代理Nginx部署在10.0.0.4:80上。</p>\n<p>配置Nginx</p>\n<blockquote>\n<p>注意：centos6.8-jdjr-test-app:v2镜像默认是包含Nginx以及配置管理工具的。</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -itd --name biaoge-nginx centos6.8-jdjr-test-app:v2</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：此时Git上的源码还没有编译部署，我只是暂时定义了一个端10.0.0.3:32768，等完成整个CI/CD流程后直接访问web.biao.com就可以看到源码部署的效果。</p>\n</blockquote>\n<p>测试访问</p>\n<p>在本地绑定如下hosts</p>\n<blockquote>\n<p>10.0.0.4 jenkins.biao.com</p>\n</blockquote>\n<p>访问mygit.biao.com上面的源码：</p>\n<p><img src=\"/images/pasted-33.png\" alt=\"upload successful\"></p>\n<p>访问jenkins.biao.com上的构建任务：</p>\n<p><img src=\"/images/pasted-32.png\" alt=\"upload successful\"></p>\n<p>注意：test项目在之前我们已经配置好了，所以可以直接触发构建部署。<br>手动触发构建部署：</p>\n<p><img src=\"/images/pasted-31.png\" alt=\"upload successful\"></p>\n<p>注意：在构建过程这里可以看到详细的构建过程，构建成功后便可以访问我们的goweb服务了。<br>访问web.biao.com服务：</p>\n<p><img src=\"/images/pasted-30.png\" alt=\"upload successful\"></p>\n<p>持续集成持续部署的效果</p>\n<p>更新源码中的部分内容，进行重新构建访问。</p>\n<p>修改web的源码<br>在Jenkins上进行再次构建：</p>\n<p><img src=\"/images/pasted-29.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-28.png\" alt=\"upload successful\"></p>\n<p>再次访问web.biao.com服务：</p>\n<p><img src=\"/images/pasted-27.png\" alt=\"upload successful\"></p>\n<p>对比前后两个Web，发现不仅欢迎语由“biaoge”变成了“逼格运维说”，而且第二行的字符串由4e7853008397变为0ce402beclle，也就是是之前的那个Container已经被销毁，我们现在访问的web.biao.com是重新编译后运行在新的container里面的实例。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h1><p>随着DevOps理念不断的传播，大部分IT从业者对于DevOps本身也有了一定的了解和认识，然而企业内部想根据DevOps思想实践，这并不是一件很简单的事情。一方面由于企业内部的历史环境以及组织结构问题，另外一方面因为业界并没有一套标准的开源工具集可以借鉴（关于几家基于Docker创业的服务提供商暂时除外）。</p>","more":"\n<p>那么该篇内容主要讲解如何借助开源工具结合CI/CD的场景，将Docker融入到部署单元中去，进行持续集成、测试到最终的持续部署，开发人员最终只需要去关注业务的访问入口就可以知道业务是否正常，并可以通过一系列的监控工具去及时发现业务异常。</p>\n<p>在整个DevOps部署流水线中需要以下几个部分：CI部分、CD部分、服务调度(治理)部分、监控部分、日志部分。本篇文章将通过一个简单的go-web应用去进行基于Docker的CI/CD流水线的测试。</p>\n<p><img src=\"/images/pasted-42.png\" alt=\"upload successful\"></p>\n<h1 id=\"基于Docker的CI-CD的优势\"><a href=\"#基于Docker的CI-CD的优势\" class=\"headerlink\" title=\"基于Docker的CI/CD的优势\"></a>基于Docker的CI/CD的优势</h1><p>一个完整的流程入上图所示，用户（也就是开发人员）将包含Dockerfile的源码从本地push到Git服务器上，然后触发Jenkins进行构建源码，源码构建完成后紧接着进行Docker image的构建，一切构建完成之后，顺带将构建成功的image上传到企业内部的镜像仓库，到此刻为止，其实一个基本的CI（持续集成）已经算是结束，剩下的部分就是持续部署或者进行持续的交付开发产物了。在以前传统的软件发布模式中，持续集成的产物是编译打包好的代码，如果想要发布程序，发布系统需要在持续集成的制品库中去获得对应的代码，然后根据一系列的环境检查来准备应用的运行时环境，而在此过程中往往会涉及到比较多的基本组件依赖，所以在整体的发布周期内来看，还是有一些问题的。在Docker或者容器时代，我们将容器的镜像构建部分融入到持续集成（CI）环节，最终持续集成的产出物是一些已经处理好依赖关系，基本不需要人工进行二次干预的Docker image，而在CD环节，发布系统只需要设置和管理很少的信息就能够很快将image运行起来，快速地将业务发布出去。</p>\n<p>在上面整个环节中，其实无非就是增加了Docker的那一层处理，但其实在整个软件开发的生命周期中，它是产生了极大的影响的。首先，部署系统不需要为统一的部署框架去做更多逻辑抽象，业务研发在开发代码的过程中选择自己依赖的base image即可，最终运行起来的业务也就是你当时提供的base image的模样；其次，由于base image已经处理好了相关的依赖，所以当发布系统拿到业务的image的时候，发布操作将会变得异常迅速，这对于互联网时代可谓是非常重要的；最后一点，也是我感受最深的，就是研发构建好的image可以在任何的Docker环境中run起来，研发人员不需要再关系环境一致性的问题，他们在自己本地的测试环境能够运行起来的应用，那么到生成环境也一定可以。</p>\n<p>为什么第三点我感触比较深呢？因为以前经常有研发兄弟跑过来跟我们讲，我们代码在本地运行一切顺利，代码给你们上到生产就各种问题。所以如果在整个流程中使用Docker image来讲所有的环境固化，从此mm就再也不用担心和研发兄弟扯皮环境不一致的问题啦。</p>\n<h1 id=\"基于Docker的CI-CD的开源方案实现\"><a href=\"#基于Docker的CI-CD的开源方案实现\" class=\"headerlink\" title=\"基于Docker的CI/CD的开源方案实现\"></a>基于Docker的CI/CD的开源方案实现</h1><h2 id=\"一、自助式Git管理工具Gogs的部署安装\"><a href=\"#一、自助式Git管理工具Gogs的部署安装\" class=\"headerlink\" title=\"一、自助式Git管理工具Gogs的部署安装\"></a>一、自助式Git管理工具Gogs的部署安装</h2><p>Gogs部署</p>\n<p>Gogs部署在10.0.0.1主机上，映射到宿主机端口为32770</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -itd -p 32770:3000 -v /<span class=\"built_in\">export</span>/CI-CD/mygit:/data --name jdjr-gogs gogs:17-04-25</span><br></pre></td></tr></table></figure>\n\n<p>MySQL建库授权</p>\n<p>MySQL部署在10.0.0.2上，映射到宿主机端口为32771</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -itd -p 32771:3306 --name jdjr-mysql pandora-mysql</span><br></pre></td></tr></table></figure>\n\n<p>配置Gogs</p>\n<p>上面两步没有问题之后就可以直接访问:ip:32770 （也就是Gogs暴露的端口）进行相关的配置。</p>\n<p>配置数据库相关：</p>\n<p><img src=\"/images/pasted-40.png\" alt=\"upload successful\"></p>\n<p>配置Git地址：</p>\n<p><img src=\"/images/pasted-39.png\" alt=\"upload successful\"></p>\n<p>配置完成后进行初始化，并创建管理员用户后就可正常使用。</p>\n<p>如图，现在正在使用的本地Git。</p>\n<p><img src=\"/images/pasted-38.png\" alt=\"upload successful\"></p>\n<p>现在就可以将源码托管在本地的Gogs仓库上了。</p>\n<h2 id=\"二、Jenkins持续集成工具部署安装\"><a href=\"#二、Jenkins持续集成工具部署安装\" class=\"headerlink\" title=\"二、Jenkins持续集成工具部署安装\"></a>二、Jenkins持续集成工具部署安装</h2><p>Jenkins部署</p>\n<p>Jenkins在官方的image基础上增加了go 1.7的编译环境，部署在10.0.0.2上，映射到宿主机端口32791。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -itd -p 32791:8080 -p 32790:50000 -v /<span class=\"built_in\">export</span>/jenkins/:/var/jenkine_home/ --name jdjr-jenkins jdjr-jenkins</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：需要将Jenkins相关数据以及编译环境映射到Docker宿主机上，因为后期编译完成后Jenkins容器需要docker build构建业务image。</p>\n</blockquote>\n<p>Jenkins容器运行起来之后，就可以直接访问10.0.0.2:32791进行初始化安装配置了。</p>\n<p>在Web上面访问Jenkins地址进行初始化配置，需要写入ID进行解锁Jenkins（Web上会提示在哪个路径下存放，直接使用docker logs也可查看）；解锁后就是正常的安装相关的Plugins了，只要网络没有问题，一般都正常通过。</p>\n<p>Jenkine安装成功后界面如下：</p>\n<p><img src=\"/images/pasted-37.png\" alt=\"upload successful\"></p>\n<p>创建Jenkins项目，并配置构建脚本（也可通过相应的Plugins进行配置）。</p>\n<p>创建一个新的名为test的项目，配置相关的源码管理以及构建条件以及相关的后续操作。</p>\n<p><img src=\"/images/pasted-36.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-35.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-34.png\" alt=\"upload successful\"></p>\n<p>配置Jenkins环境</p>\n<p>注意：由上图可以看出来，Jenkins进行构建image和持续部署测试的过程都是通过SSH到远端去执行的，因此需要再Jenkins容器中生成SSH公私钥对，并和Jenkins的宿主机以及持续部署测试的宿主机进行免密认证。虽然Jenkins本身其实支持了很多种Plugin来支持管理Docker的，比如说Docker build step plugin、Docker Build Publish Plugin，但是由于过多的Plugin会造成实际环境中的维护成本大大增加，因此我们选择简单粗暴的脚本方式，上图中的Execute shell只是简单的示例。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -it myjenkins bash</span><br></pre></td></tr></table></figure>\n\n<p>生成公私钥对之后，将公钥传给要远程部署的机器就OK了，目的是要让Jenkins容器能够免密登录远程服务器，并能执行sudo命令。</p>\n<h2 id=\"三、通过配置Nginx反向代理来访问Git，Jenkins以及测试实例\"><a href=\"#三、通过配置Nginx反向代理来访问Git，Jenkins以及测试实例\" class=\"headerlink\" title=\"三、通过配置Nginx反向代理来访问Git，Jenkins以及测试实例\"></a>三、通过配置Nginx反向代理来访问Git，Jenkins以及测试实例</h2><p>反向代理Nginx部署在10.0.0.4:80上。</p>\n<p>配置Nginx</p>\n<blockquote>\n<p>注意：centos6.8-jdjr-test-app:v2镜像默认是包含Nginx以及配置管理工具的。</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -itd --name biaoge-nginx centos6.8-jdjr-test-app:v2</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：此时Git上的源码还没有编译部署，我只是暂时定义了一个端10.0.0.3:32768，等完成整个CI/CD流程后直接访问web.biao.com就可以看到源码部署的效果。</p>\n</blockquote>\n<p>测试访问</p>\n<p>在本地绑定如下hosts</p>\n<blockquote>\n<p>10.0.0.4 jenkins.biao.com</p>\n</blockquote>\n<p>访问mygit.biao.com上面的源码：</p>\n<p><img src=\"/images/pasted-33.png\" alt=\"upload successful\"></p>\n<p>访问jenkins.biao.com上的构建任务：</p>\n<p><img src=\"/images/pasted-32.png\" alt=\"upload successful\"></p>\n<p>注意：test项目在之前我们已经配置好了，所以可以直接触发构建部署。<br>手动触发构建部署：</p>\n<p><img src=\"/images/pasted-31.png\" alt=\"upload successful\"></p>\n<p>注意：在构建过程这里可以看到详细的构建过程，构建成功后便可以访问我们的goweb服务了。<br>访问web.biao.com服务：</p>\n<p><img src=\"/images/pasted-30.png\" alt=\"upload successful\"></p>\n<p>持续集成持续部署的效果</p>\n<p>更新源码中的部分内容，进行重新构建访问。</p>\n<p>修改web的源码<br>在Jenkins上进行再次构建：</p>\n<p><img src=\"/images/pasted-29.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-28.png\" alt=\"upload successful\"></p>\n<p>再次访问web.biao.com服务：</p>\n<p><img src=\"/images/pasted-27.png\" alt=\"upload successful\"></p>\n<p>对比前后两个Web，发现不仅欢迎语由“biaoge”变成了“逼格运维说”，而且第二行的字符串由4e7853008397变为0ce402beclle，也就是是之前的那个Container已经被销毁，我们现在访问的web.biao.com是重新编译后运行在新的container里面的实例。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"/images/pasted-42.png","popularPost_tmp_gaData":{"updated":"Wed Apr 25 2018 20:46:59 GMT+0800 (GMT+08:00)","title":"基于Docker的CI/CD流水线实践","path":"2017/07/07/基于Docker的CI-CD流水线实践/","eyeCatchImage":"/images/pasted-42.png","excerpt":null,"date":"2017-07-07T14:56:38.000Z","pv":0,"totalPV":0,"categories":"Collection","tags":["DevOps"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":3286},{"title":"快速切换hosts文件的开源程序SwitchHosts","author":"Zhang Fei","date":"2017-07-07T14:44:50.000Z","_content":"SwitchHosts 是一款用于快速切换 hosts 文件的开源小程序，基于 MIT 协议开源。拥有Windows版, Linux版和Mac OS 版。基于 Electron 开发，同时使用了 React、Ant Design 以及 CodeMirror 等框架/库。需要 Node.js 环境。\n\n![upload successful](/images/pasted-25.png)\n\n功能特性包括：\n\n- 快速切换 hosts\n- hosts 文件语法高亮\n- 在线/本地 hosts 方案选择\n- 系统托盘图标快速切换\n- Host文件编辑时，点击行号快速切换注释\n- macOS: 支持 Alfred workflow 快速切换\n\n> Website https://oldj.github.io/SwitchHosts\n> Github https://github.com/oldj/SwitchHosts","source":"_posts/快速切换hosts文件的开源程序SwitchHosts.md","raw":"---\ntitle: 快速切换hosts文件的开源程序SwitchHosts\nauthor: Zhang Fei\ndate: 2017-07-07 22:44:50\ntags:\n  - Hosts\n  - Software\ncategories:\n  - Collection\n  - Software\n---\nSwitchHosts 是一款用于快速切换 hosts 文件的开源小程序，基于 MIT 协议开源。拥有Windows版, Linux版和Mac OS 版。基于 Electron 开发，同时使用了 React、Ant Design 以及 CodeMirror 等框架/库。需要 Node.js 环境。\n\n![upload successful](/images/pasted-25.png)\n\n功能特性包括：\n\n- 快速切换 hosts\n- hosts 文件语法高亮\n- 在线/本地 hosts 方案选择\n- 系统托盘图标快速切换\n- Host文件编辑时，点击行号快速切换注释\n- macOS: 支持 Alfred workflow 快速切换\n\n> Website https://oldj.github.io/SwitchHosts\n> Github https://github.com/oldj/SwitchHosts","slug":"快速切换hosts文件的开源程序SwitchHosts","published":1,"updated":"2018-04-25T12:46:59.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2fj0nqk002dq4vg8wqs3hn5","content":"<p>SwitchHosts 是一款用于快速切换 hosts 文件的开源小程序，基于 MIT 协议开源。拥有Windows版, Linux版和Mac OS 版。基于 Electron 开发，同时使用了 React、Ant Design 以及 CodeMirror 等框架/库。需要 Node.js 环境。</p><p><img src=\"/images/pasted-25.png\" alt=\"upload successful\"></p><p>功能特性包括：</p><a id=\"more\"></a>\n\n\n<ul>\n<li>快速切换 hosts</li>\n<li>hosts 文件语法高亮</li>\n<li>在线/本地 hosts 方案选择</li>\n<li>系统托盘图标快速切换</li>\n<li>Host文件编辑时，点击行号快速切换注释</li>\n<li>macOS: 支持 Alfred workflow 快速切换</li>\n</ul>\n<blockquote>\n<p>Website <a href=\"https://oldj.github.io/SwitchHosts\" target=\"_blank\" rel=\"noopener\">https://oldj.github.io/SwitchHosts</a><br>Github <a href=\"https://github.com/oldj/SwitchHosts\" target=\"_blank\" rel=\"noopener\">https://github.com/oldj/SwitchHosts</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>SwitchHosts 是一款用于快速切换 hosts 文件的开源小程序，基于 MIT 协议开源。拥有Windows版, Linux版和Mac OS 版。基于 Electron 开发，同时使用了 React、Ant Design 以及 CodeMirror 等框架/库。需要 Node.js 环境。</p><p><img src=\"/images/pasted-25.png\" alt=\"upload successful\"></p><p>功能特性包括：</p>","more":"\n\n\n<ul>\n<li>快速切换 hosts</li>\n<li>hosts 文件语法高亮</li>\n<li>在线/本地 hosts 方案选择</li>\n<li>系统托盘图标快速切换</li>\n<li>Host文件编辑时，点击行号快速切换注释</li>\n<li>macOS: 支持 Alfred workflow 快速切换</li>\n</ul>\n<blockquote>\n<p>Website <a href=\"https://oldj.github.io/SwitchHosts\" target=\"_blank\" rel=\"noopener\">https://oldj.github.io/SwitchHosts</a><br>Github <a href=\"https://github.com/oldj/SwitchHosts\" target=\"_blank\" rel=\"noopener\">https://github.com/oldj/SwitchHosts</a></p>\n</blockquote>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"/images/pasted-25.png","popularPost_tmp_gaData":{"updated":"Wed Apr 25 2018 20:46:59 GMT+0800 (GMT+08:00)","title":"快速切换hosts文件的开源程序SwitchHosts","path":"2017/07/07/快速切换hosts文件的开源程序SwitchHosts/","eyeCatchImage":"/images/pasted-25.png","excerpt":null,"date":"2017-07-07T14:44:50.000Z","pv":0,"totalPV":0,"categories":"Collection > Software","tags":["Hosts","Software"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":311},{"title":"怎样在复杂代码中找bug？","date":"2017-04-20T14:32:00.000Z","_content":"# 避免错误\n\n## 1、缺少必要的注释\n\n大段的if-else缺少注释，让维护者无法快速分辨分支逻辑。特定地方存在hack或复杂逻辑的代码，缺少注释会让后来者不明所以。为了你好，也为了后来者好，请务必加上代码。说不准以后还是由你来维护这段代码。\n\n## 2、不变和变化的部分拆分\n\n程序员中流传着一句话，此处不要写死，将来必改。有经验的程序员会将一些业务层的逻辑抽象出来，写成配置文件，好处就是若后续需求有改变，只需改配置文件即可，肯定不会引入bug。\n\n## 3、忽视测试部分\n\n程序员中又流传着一句话，没有测试的代码等于没写。虽不敢全部赞同，却也有几分道理。从测试用例驱动开发，持续集成，每次编译自动跑测试用例，能够保证系统的稳定同时也减轻测试成本。自己改的的部分做好自测，理解需求，做一个有责任心的工程师。\n\n## 4、直接操作数据\n\n你应该通过方法去操作数据，而不是直接操作数据,这样能够保证你总能操作数据正确。例如一个类中定义的属性发生变化了，代码中所有涉及到直接操作该属性的代码都需要修改。如果通过方法操作该属性，则仅需修改操作方法，对于外部调用者，类属性变化被屏蔽了，遵循了解耦的原则，代码稳定性大大提高。\n\n## 5、缺乏文档或文档质量低下\n\n前期文档很重要，不论是框架的API使用手册，还是需求或设计文档，以及各种既定流程的规范，不同种类的模板及核对表，等等这些文档，对于项目来说都是非常重要的资源。而往往有些项目，这类文档就是交由非软件行业的人员来编写，或者前期根本不打算在文档上浪费时间。\n\n## 6、无尽的需求变更，永远追不上的进度\n\n这是最常见也是最可怕的，因为无论怎样，我们都无法完成它。客户可能认为改个程序，就像改个Excel一样简单省事，甚至会使用可动用的一切权利和资源来推行变更。好吧，我承认这样的客户我遇到过很多。当我向客户解释过变更的代价并提供备选方案后，也就只能等待客户的选择了，这多少有些运数的成分，但也是无奈之举。\n\n## 7、仅仅靠加班应对进度落后\n\n进度落后并不可怕，可怕的是仅靠加班来追赶进度。这是问题的关键，长时间的赶工仍然无法赶上进度，这只意味着项目有某种更深层次的问题，已经不是单开赶工可以解决的了。留意那些长时间加班的项目，他们往往在管理上存在很大问题，发现这些问题，在你成为PM时，不要犯类似错误。\n\n# 怎样在复杂代码中找bug？\n\n1. 放大现象，有些bug现象不太明显，那么就想办法增大它的破坏性，把现象放大。这只是个思路，具体怎么放大只能根据具体的代码来定。比如：美剧《豪斯医生》里有一集，怀疑病人心肺有问题，就让病人去跑步机上跑步，加重心肺负担，从而放大症状。\n\n2. 二分法定位，把程序逻辑一点点注释掉，看看还会不会出问题，类似二分查找的方法，逐步缩小问题范围。\n\n3. 模拟现场，有时候我会问自己，如果我要实现bug描述的现象我要怎么写代码才行？比如：我遇到一个死锁问题，但是检查代码发现所有的锁都是配对的，没有忘记解锁的地方，而且锁很简单就是一个普通的临界段，保护几行赋值语句而已。这样的代码怎么写才能让他死锁呢？我想如果让我故意制造这样一个现象，只有在上锁的时候强制杀掉线程了，既然这样就可以去看看有谁强杀线程了没有。\n\n4. 制作工具，针对某些bug编写一些调试辅助工具。比如，我那个系统没有完善的崩溃报告，虽然也有dump，但是分析出来的callstack经常不准。于是我为解决崩溃问题编写了个工具，会自动扫描代码，在每个函数入口和出口插入log，以此来定位崩溃点。\n\n5. 掩盖问题，虽然这样做有点不厚道，但是有时不得不这么做。有些bug找不到真正的root cause，但是又要在规定时间内解决，那么我们就可以治疗症状而不去找病因。比如用try catch掩盖一些奇怪的崩溃。不到万不得已不要这么干，未来可能会付出更大代价。\n\n减少 bug 的第一步，是提升自己的程序员素养，努力不给自己和别人找麻烦。\n\n程序员新人怎样在复杂代码中找bug？\n\n另外，团队协作也很重要，前期的技术方案和设计评审、代码审查，对减少一些重大的错误和弱智的 bug 都非常有好处。\n\n与几个有经验的程序员一起评审一个技术方案，常常会发现一些重大的问题，比如为什么用缓存，为什么做持久化，高并发下怎么应对，这部分设计支持线程重入吗，这个循环为什么设置成10分钟，这个超时设置为什么是60秒，传输协议加密了吗，等等。很多方案可能会仅限于解决当前的问题，但有经验的程序员却能透过时间的重重迷雾，发现这个方案在未来某个时间点可能爆发的问题。这就是评审的力量。","source":"_posts/怎样在复杂代码中找bug？.md","raw":"---\ntitle: 怎样在复杂代码中找bug？\ntags: [Coding]\ncategories:\n  - Essay\ndate: 2017-04-20 22:32:00\n---\n# 避免错误\n\n## 1、缺少必要的注释\n\n大段的if-else缺少注释，让维护者无法快速分辨分支逻辑。特定地方存在hack或复杂逻辑的代码，缺少注释会让后来者不明所以。为了你好，也为了后来者好，请务必加上代码。说不准以后还是由你来维护这段代码。\n\n## 2、不变和变化的部分拆分\n\n程序员中流传着一句话，此处不要写死，将来必改。有经验的程序员会将一些业务层的逻辑抽象出来，写成配置文件，好处就是若后续需求有改变，只需改配置文件即可，肯定不会引入bug。\n\n## 3、忽视测试部分\n\n程序员中又流传着一句话，没有测试的代码等于没写。虽不敢全部赞同，却也有几分道理。从测试用例驱动开发，持续集成，每次编译自动跑测试用例，能够保证系统的稳定同时也减轻测试成本。自己改的的部分做好自测，理解需求，做一个有责任心的工程师。\n\n## 4、直接操作数据\n\n你应该通过方法去操作数据，而不是直接操作数据,这样能够保证你总能操作数据正确。例如一个类中定义的属性发生变化了，代码中所有涉及到直接操作该属性的代码都需要修改。如果通过方法操作该属性，则仅需修改操作方法，对于外部调用者，类属性变化被屏蔽了，遵循了解耦的原则，代码稳定性大大提高。\n\n## 5、缺乏文档或文档质量低下\n\n前期文档很重要，不论是框架的API使用手册，还是需求或设计文档，以及各种既定流程的规范，不同种类的模板及核对表，等等这些文档，对于项目来说都是非常重要的资源。而往往有些项目，这类文档就是交由非软件行业的人员来编写，或者前期根本不打算在文档上浪费时间。\n\n## 6、无尽的需求变更，永远追不上的进度\n\n这是最常见也是最可怕的，因为无论怎样，我们都无法完成它。客户可能认为改个程序，就像改个Excel一样简单省事，甚至会使用可动用的一切权利和资源来推行变更。好吧，我承认这样的客户我遇到过很多。当我向客户解释过变更的代价并提供备选方案后，也就只能等待客户的选择了，这多少有些运数的成分，但也是无奈之举。\n\n## 7、仅仅靠加班应对进度落后\n\n进度落后并不可怕，可怕的是仅靠加班来追赶进度。这是问题的关键，长时间的赶工仍然无法赶上进度，这只意味着项目有某种更深层次的问题，已经不是单开赶工可以解决的了。留意那些长时间加班的项目，他们往往在管理上存在很大问题，发现这些问题，在你成为PM时，不要犯类似错误。\n\n# 怎样在复杂代码中找bug？\n\n1. 放大现象，有些bug现象不太明显，那么就想办法增大它的破坏性，把现象放大。这只是个思路，具体怎么放大只能根据具体的代码来定。比如：美剧《豪斯医生》里有一集，怀疑病人心肺有问题，就让病人去跑步机上跑步，加重心肺负担，从而放大症状。\n\n2. 二分法定位，把程序逻辑一点点注释掉，看看还会不会出问题，类似二分查找的方法，逐步缩小问题范围。\n\n3. 模拟现场，有时候我会问自己，如果我要实现bug描述的现象我要怎么写代码才行？比如：我遇到一个死锁问题，但是检查代码发现所有的锁都是配对的，没有忘记解锁的地方，而且锁很简单就是一个普通的临界段，保护几行赋值语句而已。这样的代码怎么写才能让他死锁呢？我想如果让我故意制造这样一个现象，只有在上锁的时候强制杀掉线程了，既然这样就可以去看看有谁强杀线程了没有。\n\n4. 制作工具，针对某些bug编写一些调试辅助工具。比如，我那个系统没有完善的崩溃报告，虽然也有dump，但是分析出来的callstack经常不准。于是我为解决崩溃问题编写了个工具，会自动扫描代码，在每个函数入口和出口插入log，以此来定位崩溃点。\n\n5. 掩盖问题，虽然这样做有点不厚道，但是有时不得不这么做。有些bug找不到真正的root cause，但是又要在规定时间内解决，那么我们就可以治疗症状而不去找病因。比如用try catch掩盖一些奇怪的崩溃。不到万不得已不要这么干，未来可能会付出更大代价。\n\n减少 bug 的第一步，是提升自己的程序员素养，努力不给自己和别人找麻烦。\n\n程序员新人怎样在复杂代码中找bug？\n\n另外，团队协作也很重要，前期的技术方案和设计评审、代码审查，对减少一些重大的错误和弱智的 bug 都非常有好处。\n\n与几个有经验的程序员一起评审一个技术方案，常常会发现一些重大的问题，比如为什么用缓存，为什么做持久化，高并发下怎么应对，这部分设计支持线程重入吗，这个循环为什么设置成10分钟，这个超时设置为什么是60秒，传输协议加密了吗，等等。很多方案可能会仅限于解决当前的问题，但有经验的程序员却能透过时间的重重迷雾，发现这个方案在未来某个时间点可能爆发的问题。这就是评审的力量。","slug":"怎样在复杂代码中找bug？","published":1,"updated":"2018-04-25T12:46:59.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2fj0nql002gq4vgd131bn4x","content":"<h1 id=\"避免错误\"><a href=\"#避免错误\" class=\"headerlink\" title=\"避免错误\"></a>避免错误</h1><h2 id=\"1、缺少必要的注释\"><a href=\"#1、缺少必要的注释\" class=\"headerlink\" title=\"1、缺少必要的注释\"></a>1、缺少必要的注释</h2><p>大段的if-else缺少注释，让维护者无法快速分辨分支逻辑。特定地方存在hack或复杂逻辑的代码，缺少注释会让后来者不明所以。为了你好，也为了后来者好，请务必加上代码。说不准以后还是由你来维护这段代码。</p><h2 id=\"2、不变和变化的部分拆分\"><a href=\"#2、不变和变化的部分拆分\" class=\"headerlink\" title=\"2、不变和变化的部分拆分\"></a>2、不变和变化的部分拆分</h2><p>程序员中流传着一句话，此处不要写死，将来必改。有经验的程序员会将一些业务层的逻辑抽象出来，写成配置文件，好处就是若后续需求有改变，只需改配置文件即可，肯定不会引入bug。</p><a id=\"more\"></a>\n\n<h2 id=\"3、忽视测试部分\"><a href=\"#3、忽视测试部分\" class=\"headerlink\" title=\"3、忽视测试部分\"></a>3、忽视测试部分</h2><p>程序员中又流传着一句话，没有测试的代码等于没写。虽不敢全部赞同，却也有几分道理。从测试用例驱动开发，持续集成，每次编译自动跑测试用例，能够保证系统的稳定同时也减轻测试成本。自己改的的部分做好自测，理解需求，做一个有责任心的工程师。</p>\n<h2 id=\"4、直接操作数据\"><a href=\"#4、直接操作数据\" class=\"headerlink\" title=\"4、直接操作数据\"></a>4、直接操作数据</h2><p>你应该通过方法去操作数据，而不是直接操作数据,这样能够保证你总能操作数据正确。例如一个类中定义的属性发生变化了，代码中所有涉及到直接操作该属性的代码都需要修改。如果通过方法操作该属性，则仅需修改操作方法，对于外部调用者，类属性变化被屏蔽了，遵循了解耦的原则，代码稳定性大大提高。</p>\n<h2 id=\"5、缺乏文档或文档质量低下\"><a href=\"#5、缺乏文档或文档质量低下\" class=\"headerlink\" title=\"5、缺乏文档或文档质量低下\"></a>5、缺乏文档或文档质量低下</h2><p>前期文档很重要，不论是框架的API使用手册，还是需求或设计文档，以及各种既定流程的规范，不同种类的模板及核对表，等等这些文档，对于项目来说都是非常重要的资源。而往往有些项目，这类文档就是交由非软件行业的人员来编写，或者前期根本不打算在文档上浪费时间。</p>\n<h2 id=\"6、无尽的需求变更，永远追不上的进度\"><a href=\"#6、无尽的需求变更，永远追不上的进度\" class=\"headerlink\" title=\"6、无尽的需求变更，永远追不上的进度\"></a>6、无尽的需求变更，永远追不上的进度</h2><p>这是最常见也是最可怕的，因为无论怎样，我们都无法完成它。客户可能认为改个程序，就像改个Excel一样简单省事，甚至会使用可动用的一切权利和资源来推行变更。好吧，我承认这样的客户我遇到过很多。当我向客户解释过变更的代价并提供备选方案后，也就只能等待客户的选择了，这多少有些运数的成分，但也是无奈之举。</p>\n<h2 id=\"7、仅仅靠加班应对进度落后\"><a href=\"#7、仅仅靠加班应对进度落后\" class=\"headerlink\" title=\"7、仅仅靠加班应对进度落后\"></a>7、仅仅靠加班应对进度落后</h2><p>进度落后并不可怕，可怕的是仅靠加班来追赶进度。这是问题的关键，长时间的赶工仍然无法赶上进度，这只意味着项目有某种更深层次的问题，已经不是单开赶工可以解决的了。留意那些长时间加班的项目，他们往往在管理上存在很大问题，发现这些问题，在你成为PM时，不要犯类似错误。</p>\n<h1 id=\"怎样在复杂代码中找bug？\"><a href=\"#怎样在复杂代码中找bug？\" class=\"headerlink\" title=\"怎样在复杂代码中找bug？\"></a>怎样在复杂代码中找bug？</h1><ol>\n<li><p>放大现象，有些bug现象不太明显，那么就想办法增大它的破坏性，把现象放大。这只是个思路，具体怎么放大只能根据具体的代码来定。比如：美剧《豪斯医生》里有一集，怀疑病人心肺有问题，就让病人去跑步机上跑步，加重心肺负担，从而放大症状。</p>\n</li>\n<li><p>二分法定位，把程序逻辑一点点注释掉，看看还会不会出问题，类似二分查找的方法，逐步缩小问题范围。</p>\n</li>\n<li><p>模拟现场，有时候我会问自己，如果我要实现bug描述的现象我要怎么写代码才行？比如：我遇到一个死锁问题，但是检查代码发现所有的锁都是配对的，没有忘记解锁的地方，而且锁很简单就是一个普通的临界段，保护几行赋值语句而已。这样的代码怎么写才能让他死锁呢？我想如果让我故意制造这样一个现象，只有在上锁的时候强制杀掉线程了，既然这样就可以去看看有谁强杀线程了没有。</p>\n</li>\n<li><p>制作工具，针对某些bug编写一些调试辅助工具。比如，我那个系统没有完善的崩溃报告，虽然也有dump，但是分析出来的callstack经常不准。于是我为解决崩溃问题编写了个工具，会自动扫描代码，在每个函数入口和出口插入log，以此来定位崩溃点。</p>\n</li>\n<li><p>掩盖问题，虽然这样做有点不厚道，但是有时不得不这么做。有些bug找不到真正的root cause，但是又要在规定时间内解决，那么我们就可以治疗症状而不去找病因。比如用try catch掩盖一些奇怪的崩溃。不到万不得已不要这么干，未来可能会付出更大代价。</p>\n</li>\n</ol>\n<p>减少 bug 的第一步，是提升自己的程序员素养，努力不给自己和别人找麻烦。</p>\n<p>程序员新人怎样在复杂代码中找bug？</p>\n<p>另外，团队协作也很重要，前期的技术方案和设计评审、代码审查，对减少一些重大的错误和弱智的 bug 都非常有好处。</p>\n<p>与几个有经验的程序员一起评审一个技术方案，常常会发现一些重大的问题，比如为什么用缓存，为什么做持久化，高并发下怎么应对，这部分设计支持线程重入吗，这个循环为什么设置成10分钟，这个超时设置为什么是60秒，传输协议加密了吗，等等。很多方案可能会仅限于解决当前的问题，但有经验的程序员却能透过时间的重重迷雾，发现这个方案在未来某个时间点可能爆发的问题。这就是评审的力量。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"避免错误\"><a href=\"#避免错误\" class=\"headerlink\" title=\"避免错误\"></a>避免错误</h1><h2 id=\"1、缺少必要的注释\"><a href=\"#1、缺少必要的注释\" class=\"headerlink\" title=\"1、缺少必要的注释\"></a>1、缺少必要的注释</h2><p>大段的if-else缺少注释，让维护者无法快速分辨分支逻辑。特定地方存在hack或复杂逻辑的代码，缺少注释会让后来者不明所以。为了你好，也为了后来者好，请务必加上代码。说不准以后还是由你来维护这段代码。</p><h2 id=\"2、不变和变化的部分拆分\"><a href=\"#2、不变和变化的部分拆分\" class=\"headerlink\" title=\"2、不变和变化的部分拆分\"></a>2、不变和变化的部分拆分</h2><p>程序员中流传着一句话，此处不要写死，将来必改。有经验的程序员会将一些业务层的逻辑抽象出来，写成配置文件，好处就是若后续需求有改变，只需改配置文件即可，肯定不会引入bug。</p>","more":"\n\n<h2 id=\"3、忽视测试部分\"><a href=\"#3、忽视测试部分\" class=\"headerlink\" title=\"3、忽视测试部分\"></a>3、忽视测试部分</h2><p>程序员中又流传着一句话，没有测试的代码等于没写。虽不敢全部赞同，却也有几分道理。从测试用例驱动开发，持续集成，每次编译自动跑测试用例，能够保证系统的稳定同时也减轻测试成本。自己改的的部分做好自测，理解需求，做一个有责任心的工程师。</p>\n<h2 id=\"4、直接操作数据\"><a href=\"#4、直接操作数据\" class=\"headerlink\" title=\"4、直接操作数据\"></a>4、直接操作数据</h2><p>你应该通过方法去操作数据，而不是直接操作数据,这样能够保证你总能操作数据正确。例如一个类中定义的属性发生变化了，代码中所有涉及到直接操作该属性的代码都需要修改。如果通过方法操作该属性，则仅需修改操作方法，对于外部调用者，类属性变化被屏蔽了，遵循了解耦的原则，代码稳定性大大提高。</p>\n<h2 id=\"5、缺乏文档或文档质量低下\"><a href=\"#5、缺乏文档或文档质量低下\" class=\"headerlink\" title=\"5、缺乏文档或文档质量低下\"></a>5、缺乏文档或文档质量低下</h2><p>前期文档很重要，不论是框架的API使用手册，还是需求或设计文档，以及各种既定流程的规范，不同种类的模板及核对表，等等这些文档，对于项目来说都是非常重要的资源。而往往有些项目，这类文档就是交由非软件行业的人员来编写，或者前期根本不打算在文档上浪费时间。</p>\n<h2 id=\"6、无尽的需求变更，永远追不上的进度\"><a href=\"#6、无尽的需求变更，永远追不上的进度\" class=\"headerlink\" title=\"6、无尽的需求变更，永远追不上的进度\"></a>6、无尽的需求变更，永远追不上的进度</h2><p>这是最常见也是最可怕的，因为无论怎样，我们都无法完成它。客户可能认为改个程序，就像改个Excel一样简单省事，甚至会使用可动用的一切权利和资源来推行变更。好吧，我承认这样的客户我遇到过很多。当我向客户解释过变更的代价并提供备选方案后，也就只能等待客户的选择了，这多少有些运数的成分，但也是无奈之举。</p>\n<h2 id=\"7、仅仅靠加班应对进度落后\"><a href=\"#7、仅仅靠加班应对进度落后\" class=\"headerlink\" title=\"7、仅仅靠加班应对进度落后\"></a>7、仅仅靠加班应对进度落后</h2><p>进度落后并不可怕，可怕的是仅靠加班来追赶进度。这是问题的关键，长时间的赶工仍然无法赶上进度，这只意味着项目有某种更深层次的问题，已经不是单开赶工可以解决的了。留意那些长时间加班的项目，他们往往在管理上存在很大问题，发现这些问题，在你成为PM时，不要犯类似错误。</p>\n<h1 id=\"怎样在复杂代码中找bug？\"><a href=\"#怎样在复杂代码中找bug？\" class=\"headerlink\" title=\"怎样在复杂代码中找bug？\"></a>怎样在复杂代码中找bug？</h1><ol>\n<li><p>放大现象，有些bug现象不太明显，那么就想办法增大它的破坏性，把现象放大。这只是个思路，具体怎么放大只能根据具体的代码来定。比如：美剧《豪斯医生》里有一集，怀疑病人心肺有问题，就让病人去跑步机上跑步，加重心肺负担，从而放大症状。</p>\n</li>\n<li><p>二分法定位，把程序逻辑一点点注释掉，看看还会不会出问题，类似二分查找的方法，逐步缩小问题范围。</p>\n</li>\n<li><p>模拟现场，有时候我会问自己，如果我要实现bug描述的现象我要怎么写代码才行？比如：我遇到一个死锁问题，但是检查代码发现所有的锁都是配对的，没有忘记解锁的地方，而且锁很简单就是一个普通的临界段，保护几行赋值语句而已。这样的代码怎么写才能让他死锁呢？我想如果让我故意制造这样一个现象，只有在上锁的时候强制杀掉线程了，既然这样就可以去看看有谁强杀线程了没有。</p>\n</li>\n<li><p>制作工具，针对某些bug编写一些调试辅助工具。比如，我那个系统没有完善的崩溃报告，虽然也有dump，但是分析出来的callstack经常不准。于是我为解决崩溃问题编写了个工具，会自动扫描代码，在每个函数入口和出口插入log，以此来定位崩溃点。</p>\n</li>\n<li><p>掩盖问题，虽然这样做有点不厚道，但是有时不得不这么做。有些bug找不到真正的root cause，但是又要在规定时间内解决，那么我们就可以治疗症状而不去找病因。比如用try catch掩盖一些奇怪的崩溃。不到万不得已不要这么干，未来可能会付出更大代价。</p>\n</li>\n</ol>\n<p>减少 bug 的第一步，是提升自己的程序员素养，努力不给自己和别人找麻烦。</p>\n<p>程序员新人怎样在复杂代码中找bug？</p>\n<p>另外，团队协作也很重要，前期的技术方案和设计评审、代码审查，对减少一些重大的错误和弱智的 bug 都非常有好处。</p>\n<p>与几个有经验的程序员一起评审一个技术方案，常常会发现一些重大的问题，比如为什么用缓存，为什么做持久化，高并发下怎么应对，这部分设计支持线程重入吗，这个循环为什么设置成10分钟，这个超时设置为什么是60秒，传输协议加密了吗，等等。很多方案可能会仅限于解决当前的问题，但有经验的程序员却能透过时间的重重迷雾，发现这个方案在未来某个时间点可能爆发的问题。这就是评审的力量。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Apr 25 2018 20:46:59 GMT+0800 (GMT+08:00)","title":"怎样在复杂代码中找bug？","path":"2017/04/20/怎样在复杂代码中找bug？/","eyeCatchImage":null,"excerpt":null,"date":"2017-04-20T14:32:00.000Z","pv":0,"totalPV":0,"categories":"Essay","tags":["Coding"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1814},{"title":"Spring为REST API实现异常处理","date":"2017-08-12T16:30:24.000Z","_content":"> 在Spring 3.2之前，在Spring MVC应用程序中处理异常的两种主要方法是：HandlerExceptionResolver或@ExceptionHandler注释。这两个都有一些明显的缺点。3.2之后，我们现在有了新的@ControllerAdvice注释来解决前面两个解决方案的局限性。所有这些都有一个共同点 - 他们处理分离问题非常好。应用程序可以正常抛出异常以指示某种类型的异常 - 然后将单独处理异常。\n\n# 解决方案1 - 控制器级别@ExceptionHandler\n\n在@Controller class中定义一个方法来处理异常, 并加上@ExceptionHandler annotation：\n\n```java\n@RestController\npublic class FooController{\n    //...\n    @ExceptionHandler({ CustomException1.class, CustomException2.class })\n    public void handleException() {\n        //\n    }\n}\n```\n\n主要缺点: @ExceptionHandler注释方法只对该该Controller有效, 不能全局使用。\n\n# 解决方案2 - HandlerExceptionResolver\n\n定义一个  HandlerExceptionResolver 统一处理决应用程序抛出的任何异常。\n\n## Spring 3.1 ExceptionHandlerExceptionResolve\n\n默认在DispatcherServlet中启用, @ExceptionHandler就是通过它实现的\n\n## Spring 3.0 DefaultHandlerExceptionResolver\n\n默认在DispatcherServlet中启用, 他会将Spring的异常解析为相应的HTTP status codes, e.g. 400, 500 ...\n[完整的异常和对应的HTTP status code](http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/mvc.html#mvc-ann-rest-spring-mvc-exceptions), 但是他没有设置任何的response body.\n\n## Spring 3.0 ResponseStatusExceptionResolver\n\n默认在DispatcherServlet中启用, 自定义异常的@ResponseStatus注释，并将这些异常映射到HTTP状态代码:\n\n```java\n@ResponseStatus(value = HttpStatus.NOT_FOUND)\npubli class ResourceNotFoundException extends RuntimeException {\n    public ResourceNotFoundException() {\n        super();\n    }\n    public ResourceNotFoundException(String message, Throwable cause) {\n        super(message, cause);\n    }\n    public ResourceNotFoundException(String message) {\n        super(message);\n    }\n    public ResourceNotFoundException(Throwable cause) {\n        super(cause);\n    }\n}\n```\n\n## 自定义HandlerExceptionResolver\n\n```java\n@Component\npublic class RestResponseStatusExceptionResolver extends AbstractHandlerExceptionResolver {\n\n    @Override\n    protected ModelAndView doResolveException\n      (HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) {\n        try {\n            if (ex instanceof IllegalArgumentException) {\n                return handleIllegalArgument((IllegalArgumentException) ex, response, handler);\n            }\n            ...\n        } catch (Exception handlerException) {\n            logger.warn(\"Handling of [\" + ex.getClass().getName() + \"]\n              resulted in Exception\", handlerException);\n        }\n        return null;\n    }\n\n    private ModelAndView handleIllegalArgument\n      (IllegalArgumentException ex, HttpServletResponse response) throws IOException {\n        response.sendError(HttpServletResponse.SC_CONFLICT);\n        String accept = request.getHeader(HttpHeaders.ACCEPT);\n        ...\n        return new ModelAndView();\n    }\n}\n```\n\n# 解决方案3 - 使用@ControllerAdvice(@RestControllerAdvice)注解(需要Spring 3.2及以上de版本)\n\n@ControllerAdvice注释来支持全局@ExceptionHandler。\n\n```java\n@ControllerAdvice\npublic class RestResponseEntityExceptionHandler extends ResponseEntityExceptionHandler {\n\n    @ExceptionHandler(value = { IllegalArgumentException.class, IllegalStateException.class })\n    @ResponseBody\n    protected ResponseEntity<Object> handleConflict(RuntimeException ex, WebRequest request) {\n        String bodyOfResponse = \"This should be application specific\";\n        return handleExceptionInternal(ex, bodyOfResponse,\n          new HttpHeaders(), HttpStatus.CONFLICT, request);\n    }\n}\n```\n\n解决@ExceptionHandler不能全局处理。\n\n>> 原文链接: [http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/mvc.html#mvc-ann-rest-spring-mvc-exceptions](http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/mvc.html#mvc-ann-rest-spring-mvc-exceptions)","source":"_posts/Spring为REST API实现异常处理.md","raw":"---\ntitle: Spring为REST API实现异常处理\ndate: 2017-08-13 00:30:24\ntags:\n  - Java\n  - Spring\n  - Spring Boot\n  - Rest API\ncategories:\n  - Collection\n---\n> 在Spring 3.2之前，在Spring MVC应用程序中处理异常的两种主要方法是：HandlerExceptionResolver或@ExceptionHandler注释。这两个都有一些明显的缺点。3.2之后，我们现在有了新的@ControllerAdvice注释来解决前面两个解决方案的局限性。所有这些都有一个共同点 - 他们处理分离问题非常好。应用程序可以正常抛出异常以指示某种类型的异常 - 然后将单独处理异常。\n\n# 解决方案1 - 控制器级别@ExceptionHandler\n\n在@Controller class中定义一个方法来处理异常, 并加上@ExceptionHandler annotation：\n\n```java\n@RestController\npublic class FooController{\n    //...\n    @ExceptionHandler({ CustomException1.class, CustomException2.class })\n    public void handleException() {\n        //\n    }\n}\n```\n\n主要缺点: @ExceptionHandler注释方法只对该该Controller有效, 不能全局使用。\n\n# 解决方案2 - HandlerExceptionResolver\n\n定义一个  HandlerExceptionResolver 统一处理决应用程序抛出的任何异常。\n\n## Spring 3.1 ExceptionHandlerExceptionResolve\n\n默认在DispatcherServlet中启用, @ExceptionHandler就是通过它实现的\n\n## Spring 3.0 DefaultHandlerExceptionResolver\n\n默认在DispatcherServlet中启用, 他会将Spring的异常解析为相应的HTTP status codes, e.g. 400, 500 ...\n[完整的异常和对应的HTTP status code](http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/mvc.html#mvc-ann-rest-spring-mvc-exceptions), 但是他没有设置任何的response body.\n\n## Spring 3.0 ResponseStatusExceptionResolver\n\n默认在DispatcherServlet中启用, 自定义异常的@ResponseStatus注释，并将这些异常映射到HTTP状态代码:\n\n```java\n@ResponseStatus(value = HttpStatus.NOT_FOUND)\npubli class ResourceNotFoundException extends RuntimeException {\n    public ResourceNotFoundException() {\n        super();\n    }\n    public ResourceNotFoundException(String message, Throwable cause) {\n        super(message, cause);\n    }\n    public ResourceNotFoundException(String message) {\n        super(message);\n    }\n    public ResourceNotFoundException(Throwable cause) {\n        super(cause);\n    }\n}\n```\n\n## 自定义HandlerExceptionResolver\n\n```java\n@Component\npublic class RestResponseStatusExceptionResolver extends AbstractHandlerExceptionResolver {\n\n    @Override\n    protected ModelAndView doResolveException\n      (HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) {\n        try {\n            if (ex instanceof IllegalArgumentException) {\n                return handleIllegalArgument((IllegalArgumentException) ex, response, handler);\n            }\n            ...\n        } catch (Exception handlerException) {\n            logger.warn(\"Handling of [\" + ex.getClass().getName() + \"]\n              resulted in Exception\", handlerException);\n        }\n        return null;\n    }\n\n    private ModelAndView handleIllegalArgument\n      (IllegalArgumentException ex, HttpServletResponse response) throws IOException {\n        response.sendError(HttpServletResponse.SC_CONFLICT);\n        String accept = request.getHeader(HttpHeaders.ACCEPT);\n        ...\n        return new ModelAndView();\n    }\n}\n```\n\n# 解决方案3 - 使用@ControllerAdvice(@RestControllerAdvice)注解(需要Spring 3.2及以上de版本)\n\n@ControllerAdvice注释来支持全局@ExceptionHandler。\n\n```java\n@ControllerAdvice\npublic class RestResponseEntityExceptionHandler extends ResponseEntityExceptionHandler {\n\n    @ExceptionHandler(value = { IllegalArgumentException.class, IllegalStateException.class })\n    @ResponseBody\n    protected ResponseEntity<Object> handleConflict(RuntimeException ex, WebRequest request) {\n        String bodyOfResponse = \"This should be application specific\";\n        return handleExceptionInternal(ex, bodyOfResponse,\n          new HttpHeaders(), HttpStatus.CONFLICT, request);\n    }\n}\n```\n\n解决@ExceptionHandler不能全局处理。\n\n>> 原文链接: [http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/mvc.html#mvc-ann-rest-spring-mvc-exceptions](http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/mvc.html#mvc-ann-rest-spring-mvc-exceptions)","slug":"Spring为REST API实现异常处理","published":1,"updated":"2018-04-25T12:46:59.498Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2fj0nqn002kq4vgdeidbsmb","content":"<blockquote>\n<p>在Spring 3.2之前，在Spring MVC应用程序中处理异常的两种主要方法是：HandlerExceptionResolver或@ExceptionHandler注释。这两个都有一些明显的缺点。3.2之后，我们现在有了新的@ControllerAdvice注释来解决前面两个解决方案的局限性。所有这些都有一个共同点 - 他们处理分离问题非常好。应用程序可以正常抛出异常以指示某种类型的异常 - 然后将单独处理异常。</p>\n</blockquote><a id=\"more\"></a>\n<h1 id=\"解决方案1-控制器级别-ExceptionHandler\"><a href=\"#解决方案1-控制器级别-ExceptionHandler\" class=\"headerlink\" title=\"解决方案1 - 控制器级别@ExceptionHandler\"></a>解决方案1 - 控制器级别@ExceptionHandler</h1><p>在@Controller class中定义一个方法来处理异常, 并加上@ExceptionHandler annotation：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooController</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler</span>(&#123; CustomException1.class, CustomException2.class &#125;)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleException</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>主要缺点: @ExceptionHandler注释方法只对该该Controller有效, 不能全局使用。</p>\n<h1 id=\"解决方案2-HandlerExceptionResolver\"><a href=\"#解决方案2-HandlerExceptionResolver\" class=\"headerlink\" title=\"解决方案2 - HandlerExceptionResolver\"></a>解决方案2 - HandlerExceptionResolver</h1><p>定义一个  HandlerExceptionResolver 统一处理决应用程序抛出的任何异常。</p>\n<h2 id=\"Spring-3-1-ExceptionHandlerExceptionResolve\"><a href=\"#Spring-3-1-ExceptionHandlerExceptionResolve\" class=\"headerlink\" title=\"Spring 3.1 ExceptionHandlerExceptionResolve\"></a>Spring 3.1 ExceptionHandlerExceptionResolve</h2><p>默认在DispatcherServlet中启用, @ExceptionHandler就是通过它实现的</p>\n<h2 id=\"Spring-3-0-DefaultHandlerExceptionResolver\"><a href=\"#Spring-3-0-DefaultHandlerExceptionResolver\" class=\"headerlink\" title=\"Spring 3.0 DefaultHandlerExceptionResolver\"></a>Spring 3.0 DefaultHandlerExceptionResolver</h2><p>默认在DispatcherServlet中启用, 他会将Spring的异常解析为相应的HTTP status codes, e.g. 400, 500 …<br><a href=\"http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/mvc.html#mvc-ann-rest-spring-mvc-exceptions\" target=\"_blank\" rel=\"noopener\">完整的异常和对应的HTTP status code</a>, 但是他没有设置任何的response body.</p>\n<h2 id=\"Spring-3-0-ResponseStatusExceptionResolver\"><a href=\"#Spring-3-0-ResponseStatusExceptionResolver\" class=\"headerlink\" title=\"Spring 3.0 ResponseStatusExceptionResolver\"></a>Spring 3.0 ResponseStatusExceptionResolver</h2><p>默认在DispatcherServlet中启用, 自定义异常的@ResponseStatus注释，并将这些异常映射到HTTP状态代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ResponseStatus</span>(value = HttpStatus.NOT_FOUND)</span><br><span class=\"line\">publi <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceNotFoundException</span> <span class=\"keyword\">extends</span> <span class=\"title\">RuntimeException</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResourceNotFoundException</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResourceNotFoundException</span><span class=\"params\">(String message, Throwable cause)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(message, cause);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResourceNotFoundException</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResourceNotFoundException</span><span class=\"params\">(Throwable cause)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(cause);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自定义HandlerExceptionResolver\"><a href=\"#自定义HandlerExceptionResolver\" class=\"headerlink\" title=\"自定义HandlerExceptionResolver\"></a>自定义HandlerExceptionResolver</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RestResponseStatusExceptionResolver</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractHandlerExceptionResolver</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> ModelAndView doResolveException</span><br><span class=\"line\">      (HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ex <span class=\"keyword\">instanceof</span> IllegalArgumentException) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> handleIllegalArgument((IllegalArgumentException) ex, response, handler);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception handlerException) &#123;</span><br><span class=\"line\">            logger.warn(<span class=\"string\">\"Handling of [\"</span> + ex.getClass().getName() + <span class=\"string\">\"]</span></span><br><span class=\"line\"><span class=\"string\">              resulted in Exception\"</span>, handlerException);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ModelAndView handleIllegalArgument</span><br><span class=\"line\">      (IllegalArgumentException ex, HttpServletResponse response) <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        response.sendError(HttpServletResponse.SC_CONFLICT);</span><br><span class=\"line\">        String accept = request.getHeader(HttpHeaders.ACCEPT);</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"解决方案3-使用-ControllerAdvice-RestControllerAdvice-注解-需要Spring-3-2及以上de版本\"><a href=\"#解决方案3-使用-ControllerAdvice-RestControllerAdvice-注解-需要Spring-3-2及以上de版本\" class=\"headerlink\" title=\"解决方案3 - 使用@ControllerAdvice(@RestControllerAdvice)注解(需要Spring 3.2及以上de版本)\"></a>解决方案3 - 使用@ControllerAdvice(@RestControllerAdvice)注解(需要Spring 3.2及以上de版本)</h1><p>@ControllerAdvice注释来支持全局@ExceptionHandler。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RestResponseEntityExceptionHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">ResponseEntityExceptionHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler</span>(value = &#123; IllegalArgumentException.class, IllegalStateException.class &#125;)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> ResponseEntity&lt;Object&gt; <span class=\"title\">handleConflict</span><span class=\"params\">(RuntimeException ex, WebRequest request)</span> </span>&#123;</span><br><span class=\"line\">        String bodyOfResponse = <span class=\"string\">\"This should be application specific\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> handleExceptionInternal(ex, bodyOfResponse,</span><br><span class=\"line\">          <span class=\"keyword\">new</span> HttpHeaders(), HttpStatus.CONFLICT, request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解决@ExceptionHandler不能全局处理。</p>\n<blockquote>\n<blockquote>\n<p>原文链接: <a href=\"http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/mvc.html#mvc-ann-rest-spring-mvc-exceptions\" target=\"_blank\" rel=\"noopener\">http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/mvc.html#mvc-ann-rest-spring-mvc-exceptions</a></p>\n</blockquote>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>在Spring 3.2之前，在Spring MVC应用程序中处理异常的两种主要方法是：HandlerExceptionResolver或@ExceptionHandler注释。这两个都有一些明显的缺点。3.2之后，我们现在有了新的@ControllerAdvice注释来解决前面两个解决方案的局限性。所有这些都有一个共同点 - 他们处理分离问题非常好。应用程序可以正常抛出异常以指示某种类型的异常 - 然后将单独处理异常。</p>\n</blockquote>","more":"\n<h1 id=\"解决方案1-控制器级别-ExceptionHandler\"><a href=\"#解决方案1-控制器级别-ExceptionHandler\" class=\"headerlink\" title=\"解决方案1 - 控制器级别@ExceptionHandler\"></a>解决方案1 - 控制器级别@ExceptionHandler</h1><p>在@Controller class中定义一个方法来处理异常, 并加上@ExceptionHandler annotation：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooController</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler</span>(&#123; CustomException1.class, CustomException2.class &#125;)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleException</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>主要缺点: @ExceptionHandler注释方法只对该该Controller有效, 不能全局使用。</p>\n<h1 id=\"解决方案2-HandlerExceptionResolver\"><a href=\"#解决方案2-HandlerExceptionResolver\" class=\"headerlink\" title=\"解决方案2 - HandlerExceptionResolver\"></a>解决方案2 - HandlerExceptionResolver</h1><p>定义一个  HandlerExceptionResolver 统一处理决应用程序抛出的任何异常。</p>\n<h2 id=\"Spring-3-1-ExceptionHandlerExceptionResolve\"><a href=\"#Spring-3-1-ExceptionHandlerExceptionResolve\" class=\"headerlink\" title=\"Spring 3.1 ExceptionHandlerExceptionResolve\"></a>Spring 3.1 ExceptionHandlerExceptionResolve</h2><p>默认在DispatcherServlet中启用, @ExceptionHandler就是通过它实现的</p>\n<h2 id=\"Spring-3-0-DefaultHandlerExceptionResolver\"><a href=\"#Spring-3-0-DefaultHandlerExceptionResolver\" class=\"headerlink\" title=\"Spring 3.0 DefaultHandlerExceptionResolver\"></a>Spring 3.0 DefaultHandlerExceptionResolver</h2><p>默认在DispatcherServlet中启用, 他会将Spring的异常解析为相应的HTTP status codes, e.g. 400, 500 …<br><a href=\"http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/mvc.html#mvc-ann-rest-spring-mvc-exceptions\" target=\"_blank\" rel=\"noopener\">完整的异常和对应的HTTP status code</a>, 但是他没有设置任何的response body.</p>\n<h2 id=\"Spring-3-0-ResponseStatusExceptionResolver\"><a href=\"#Spring-3-0-ResponseStatusExceptionResolver\" class=\"headerlink\" title=\"Spring 3.0 ResponseStatusExceptionResolver\"></a>Spring 3.0 ResponseStatusExceptionResolver</h2><p>默认在DispatcherServlet中启用, 自定义异常的@ResponseStatus注释，并将这些异常映射到HTTP状态代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ResponseStatus</span>(value = HttpStatus.NOT_FOUND)</span><br><span class=\"line\">publi <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceNotFoundException</span> <span class=\"keyword\">extends</span> <span class=\"title\">RuntimeException</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResourceNotFoundException</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResourceNotFoundException</span><span class=\"params\">(String message, Throwable cause)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(message, cause);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResourceNotFoundException</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResourceNotFoundException</span><span class=\"params\">(Throwable cause)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(cause);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自定义HandlerExceptionResolver\"><a href=\"#自定义HandlerExceptionResolver\" class=\"headerlink\" title=\"自定义HandlerExceptionResolver\"></a>自定义HandlerExceptionResolver</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RestResponseStatusExceptionResolver</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractHandlerExceptionResolver</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> ModelAndView doResolveException</span><br><span class=\"line\">      (HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ex <span class=\"keyword\">instanceof</span> IllegalArgumentException) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> handleIllegalArgument((IllegalArgumentException) ex, response, handler);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception handlerException) &#123;</span><br><span class=\"line\">            logger.warn(<span class=\"string\">\"Handling of [\"</span> + ex.getClass().getName() + <span class=\"string\">\"]</span></span><br><span class=\"line\"><span class=\"string\">              resulted in Exception\"</span>, handlerException);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ModelAndView handleIllegalArgument</span><br><span class=\"line\">      (IllegalArgumentException ex, HttpServletResponse response) <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        response.sendError(HttpServletResponse.SC_CONFLICT);</span><br><span class=\"line\">        String accept = request.getHeader(HttpHeaders.ACCEPT);</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"解决方案3-使用-ControllerAdvice-RestControllerAdvice-注解-需要Spring-3-2及以上de版本\"><a href=\"#解决方案3-使用-ControllerAdvice-RestControllerAdvice-注解-需要Spring-3-2及以上de版本\" class=\"headerlink\" title=\"解决方案3 - 使用@ControllerAdvice(@RestControllerAdvice)注解(需要Spring 3.2及以上de版本)\"></a>解决方案3 - 使用@ControllerAdvice(@RestControllerAdvice)注解(需要Spring 3.2及以上de版本)</h1><p>@ControllerAdvice注释来支持全局@ExceptionHandler。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RestResponseEntityExceptionHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">ResponseEntityExceptionHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler</span>(value = &#123; IllegalArgumentException.class, IllegalStateException.class &#125;)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> ResponseEntity&lt;Object&gt; <span class=\"title\">handleConflict</span><span class=\"params\">(RuntimeException ex, WebRequest request)</span> </span>&#123;</span><br><span class=\"line\">        String bodyOfResponse = <span class=\"string\">\"This should be application specific\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> handleExceptionInternal(ex, bodyOfResponse,</span><br><span class=\"line\">          <span class=\"keyword\">new</span> HttpHeaders(), HttpStatus.CONFLICT, request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解决@ExceptionHandler不能全局处理。</p>\n<blockquote>\n<blockquote>\n<p>原文链接: <a href=\"http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/mvc.html#mvc-ann-rest-spring-mvc-exceptions\" target=\"_blank\" rel=\"noopener\">http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/mvc.html#mvc-ann-rest-spring-mvc-exceptions</a></p>\n</blockquote>\n</blockquote>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Apr 25 2018 20:46:59 GMT+0800 (GMT+08:00)","title":"Spring为REST API实现异常处理","path":"2017/08/13/Spring为REST API实现异常处理/","eyeCatchImage":null,"excerpt":null,"date":"2017-08-12T16:30:24.000Z","pv":0,"totalPV":0,"categories":"Collection","tags":["Java","Spring","Spring Boot","Rest API"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2983}],"PostAsset":[],"PostCategory":[{"post_id":"ck2fj0nny0002q4vgbfs9a5t4","category_id":"ck2fj0no70005q4vg6u934bm6","_id":"ck2fj0nox000hq4vg1k394xcj"},{"post_id":"ck2fj0no40004q4vgdr8ceks8","category_id":"ck2fj0no70005q4vg6u934bm6","_id":"ck2fj0np6000nq4vg2u9f19h2"},{"post_id":"ck2fj0not000fq4vg9bdk2k7j","category_id":"ck2fj0no70005q4vg6u934bm6","_id":"ck2fj0np8000rq4vg3h98aga6"},{"post_id":"ck2fj0noc0008q4vg3s0w1i8k","category_id":"ck2fj0no70005q4vg6u934bm6","_id":"ck2fj0npa000uq4vg7sm86pi4"},{"post_id":"ck2fj0np7000qq4vg90oo4894","category_id":"ck2fj0np5000mq4vg6dkq47my","_id":"ck2fj0npg0011q4vg1mzsfx09"},{"post_id":"ck2fj0noe0009q4vg83kv3frk","category_id":"ck2fj0np5000mq4vg6dkq47my","_id":"ck2fj0npk0015q4vgcvanc8qi"},{"post_id":"ck2fj0np9000tq4vg5tsg2ne4","category_id":"ck2fj0np5000mq4vg6dkq47my","_id":"ck2fj0npn0018q4vgeemu5si8"},{"post_id":"ck2fj0npc000yq4vges2tdqzg","category_id":"ck2fj0np5000mq4vg6dkq47my","_id":"ck2fj0nps001dq4vg5c8xb6ng"},{"post_id":"ck2fj0nog000aq4vg63l27kfk","category_id":"ck2fj0np5000mq4vg6dkq47my","_id":"ck2fj0npv001gq4vghkfbg1d9"},{"post_id":"ck2fj0npf0010q4vgfjoc0qzs","category_id":"ck2fj0np5000mq4vg6dkq47my","_id":"ck2fj0npy001jq4vg6st304x7"},{"post_id":"ck2fj0npi0014q4vghl574afi","category_id":"ck2fj0no70005q4vg6u934bm6","_id":"ck2fj0nq1001nq4vg1x78d0e9"},{"post_id":"ck2fj0nol000dq4vg97u4cqd5","category_id":"ck2fj0np5000mq4vg6dkq47my","_id":"ck2fj0nq3001qq4vgdti38j6u"},{"post_id":"ck2fj0npm0017q4vg92yjf1we","category_id":"ck2fj0np5000mq4vg6dkq47my","_id":"ck2fj0nq6001tq4vgg5wd5jvm"},{"post_id":"ck2fj0npp001cq4vgduxg13yj","category_id":"ck2fj0no70005q4vg6u934bm6","_id":"ck2fj0nq9001wq4vg7gwg6x5u"},{"post_id":"ck2fj0np0000jq4vgflwe6yro","category_id":"ck2fj0np5000mq4vg6dkq47my","_id":"ck2fj0nqd001zq4vg7nhd5boz"},{"post_id":"ck2fj0npu001fq4vgaik7a2ii","category_id":"ck2fj0no70005q4vg6u934bm6","_id":"ck2fj0nqe0021q4vge9ns6xbx"},{"post_id":"ck2fj0npx001iq4vga6w137br","category_id":"ck2fj0np5000mq4vg6dkq47my","_id":"ck2fj0nqh0025q4vgf3j78n2c"},{"post_id":"ck2fj0np4000lq4vg8i6j18sj","category_id":"ck2fj0np5000mq4vg6dkq47my","_id":"ck2fj0nqi0027q4vg5prg0wnl"},{"post_id":"ck2fj0npz001mq4vg2u04gdet","category_id":"ck2fj0no70005q4vg6u934bm6","_id":"ck2fj0nqj002aq4vg8pizgoe6"},{"post_id":"ck2fj0nq2001pq4vgg3ef9prv","category_id":"ck2fj0no70005q4vg6u934bm6","_id":"ck2fj0nql002eq4vg57zhaqb4"},{"post_id":"ck2fj0nq4001sq4vgafy62w1c","category_id":"ck2fj0np5000mq4vg6dkq47my","_id":"ck2fj0nqm002hq4vg4pkh3hiy"},{"post_id":"ck2fj0nq7001vq4vgd5l10066","category_id":"ck2fj0np5000mq4vg6dkq47my","_id":"ck2fj0nqo002mq4vgfar23jlv"},{"post_id":"ck2fj0nqc001yq4vga8aee4d0","category_id":"ck2fj0no70005q4vg6u934bm6","_id":"ck2fj0nqp002oq4vgefzf20fv"},{"post_id":"ck2fj0nqd0020q4vg9q480uip","category_id":"ck2fj0np5000mq4vg6dkq47my","_id":"ck2fj0nqq002rq4vg21smb6ix"},{"post_id":"ck2fj0nqf0024q4vgajl3hm7u","category_id":"ck2fj0no70005q4vg6u934bm6","_id":"ck2fj0nqq002sq4vg410daz7w"},{"post_id":"ck2fj0nqh0026q4vgbe83a50a","category_id":"ck2fj0np5000mq4vg6dkq47my","_id":"ck2fj0nqr002uq4vgas0dh8p8"},{"post_id":"ck2fj0nqi0029q4vg3c5kayb6","category_id":"ck2fj0no70005q4vg6u934bm6","_id":"ck2fj0nqr002wq4vge2u166bb"},{"post_id":"ck2fj0nql002gq4vgd131bn4x","category_id":"ck2fj0np5000mq4vg6dkq47my","_id":"ck2fj0nqt002yq4vgc18ba3x1"},{"post_id":"ck2fj0nqn002kq4vgdeidbsmb","category_id":"ck2fj0no70005q4vg6u934bm6","_id":"ck2fj0nqt0030q4vg3wks4x58"},{"post_id":"ck2fj0nqk002dq4vg8wqs3hn5","category_id":"ck2fj0no70005q4vg6u934bm6","_id":"ck2fj0nqu0032q4vg6pvo3cq4"},{"post_id":"ck2fj0nqk002dq4vg8wqs3hn5","category_id":"ck2fj0nqo002lq4vg9kf28zde","_id":"ck2fj0nqv0034q4vg9gu68ivy"}],"PostTag":[{"post_id":"ck2fj0nog000aq4vg63l27kfk","tag_id":"ck2fj0noa0006q4vg9n8bgu4h","_id":"ck2fj0not000eq4vg80bb3r1y"},{"post_id":"ck2fj0nny0002q4vgbfs9a5t4","tag_id":"ck2fj0noa0006q4vg9n8bgu4h","_id":"ck2fj0np4000kq4vgcirr3c7c"},{"post_id":"ck2fj0nny0002q4vgbfs9a5t4","tag_id":"ck2fj0noi000cq4vg0obtf6la","_id":"ck2fj0np6000oq4vgepzrgai0"},{"post_id":"ck2fj0no40004q4vgdr8ceks8","tag_id":"ck2fj0noa0006q4vg9n8bgu4h","_id":"ck2fj0np8000sq4vgdpk33tel"},{"post_id":"ck2fj0np7000qq4vg90oo4894","tag_id":"ck2fj0np6000pq4vggst1cu36","_id":"ck2fj0npc000xq4vg2ltef23x"},{"post_id":"ck2fj0np9000tq4vg5tsg2ne4","tag_id":"ck2fj0np6000pq4vggst1cu36","_id":"ck2fj0npf000zq4vgclpz2l2e"},{"post_id":"ck2fj0noc0008q4vg3s0w1i8k","tag_id":"ck2fj0np6000pq4vggst1cu36","_id":"ck2fj0npl0016q4vg0ze93pvw"},{"post_id":"ck2fj0noc0008q4vg3s0w1i8k","tag_id":"ck2fj0npc000wq4vg9nwabswy","_id":"ck2fj0npo001aq4vgfhuvfy9v"},{"post_id":"ck2fj0npi0014q4vghl574afi","tag_id":"ck2fj0np6000pq4vggst1cu36","_id":"ck2fj0npt001eq4vggj3n8u18"},{"post_id":"ck2fj0noe0009q4vg83kv3frk","tag_id":"ck2fj0np6000pq4vggst1cu36","_id":"ck2fj0npz001lq4vga2k7fujf"},{"post_id":"ck2fj0noe0009q4vg83kv3frk","tag_id":"ck2fj0npp001bq4vg0h7o7r9f","_id":"ck2fj0nq2001oq4vg72imbjn4"},{"post_id":"ck2fj0nol000dq4vg97u4cqd5","tag_id":"ck2fj0npy001kq4vgg5xu4y1t","_id":"ck2fj0nq6001uq4vg97x012p8"},{"post_id":"ck2fj0nqc001yq4vga8aee4d0","tag_id":"ck2fj0np6000pq4vggst1cu36","_id":"ck2fj0nqf0022q4vg34y3bph9"},{"post_id":"ck2fj0nqf0024q4vgajl3hm7u","tag_id":"ck2fj0noa0006q4vg9n8bgu4h","_id":"ck2fj0nqi0028q4vg8uoictwh"},{"post_id":"ck2fj0not000fq4vg9bdk2k7j","tag_id":"ck2fj0nq3001rq4vg4sosfpmp","_id":"ck2fj0nqk002cq4vgh3zn01ta"},{"post_id":"ck2fj0not000fq4vg9bdk2k7j","tag_id":"ck2fj0nqb001xq4vg6hboeoae","_id":"ck2fj0nql002fq4vg15h830zq"},{"post_id":"ck2fj0not000fq4vg9bdk2k7j","tag_id":"ck2fj0nqf0023q4vg4php857j","_id":"ck2fj0nqn002jq4vggvos0eho"},{"post_id":"ck2fj0np0000jq4vgflwe6yro","tag_id":"ck2fj0np6000pq4vggst1cu36","_id":"ck2fj0nqp002nq4vg1bbrgest"},{"post_id":"ck2fj0np4000lq4vg8i6j18sj","tag_id":"ck2fj0np6000pq4vggst1cu36","_id":"ck2fj0nqq002qq4vg2ato80tw"},{"post_id":"ck2fj0npc000yq4vges2tdqzg","tag_id":"ck2fj0nqp002pq4vg5wd9467k","_id":"ck2fj0nqr002vq4vg3leddrjn"},{"post_id":"ck2fj0npf0010q4vgfjoc0qzs","tag_id":"ck2fj0nqp002pq4vg5wd9467k","_id":"ck2fj0nqt002zq4vg2py4aqeo"},{"post_id":"ck2fj0npm0017q4vg92yjf1we","tag_id":"ck2fj0nqp002pq4vg5wd9467k","_id":"ck2fj0nqv0033q4vg4zhgc6x9"},{"post_id":"ck2fj0npp001cq4vgduxg13yj","tag_id":"ck2fj0nqp002pq4vg5wd9467k","_id":"ck2fj0nqw0037q4vg7kfgbglo"},{"post_id":"ck2fj0npp001cq4vgduxg13yj","tag_id":"ck2fj0nqv0035q4vgdioz4sev","_id":"ck2fj0nqx0038q4vg8hdfbipq"},{"post_id":"ck2fj0npu001fq4vgaik7a2ii","tag_id":"ck2fj0np6000pq4vggst1cu36","_id":"ck2fj0nqy003bq4vg1j5v7lww"},{"post_id":"ck2fj0npu001fq4vgaik7a2ii","tag_id":"ck2fj0nqw0036q4vggsg9fyfr","_id":"ck2fj0nqz003cq4vg6pwu6zkw"},{"post_id":"ck2fj0npu001fq4vgaik7a2ii","tag_id":"ck2fj0nqx0039q4vg5252gii2","_id":"ck2fj0nqz003eq4vg6jinap4j"},{"post_id":"ck2fj0npx001iq4vga6w137br","tag_id":"ck2fj0nqp002pq4vg5wd9467k","_id":"ck2fj0nr0003fq4vgceer8jx4"},{"post_id":"ck2fj0npz001mq4vg2u04gdet","tag_id":"ck2fj0np6000pq4vggst1cu36","_id":"ck2fj0nr3003jq4vg0hy46tu9"},{"post_id":"ck2fj0npz001mq4vg2u04gdet","tag_id":"ck2fj0nqw0036q4vggsg9fyfr","_id":"ck2fj0nr3003kq4vgabe17nn8"},{"post_id":"ck2fj0npz001mq4vg2u04gdet","tag_id":"ck2fj0nqx0039q4vg5252gii2","_id":"ck2fj0nr5003mq4vg6m6r9dvf"},{"post_id":"ck2fj0npz001mq4vg2u04gdet","tag_id":"ck2fj0nr2003hq4vgais37ps6","_id":"ck2fj0nr5003nq4vggzq6dgdy"},{"post_id":"ck2fj0nq2001pq4vgg3ef9prv","tag_id":"ck2fj0np6000pq4vggst1cu36","_id":"ck2fj0nr9003pq4vg4saegpu7"},{"post_id":"ck2fj0nq2001pq4vgg3ef9prv","tag_id":"ck2fj0nqw0036q4vggsg9fyfr","_id":"ck2fj0nr9003qq4vg37ue6fga"},{"post_id":"ck2fj0nq2001pq4vgg3ef9prv","tag_id":"ck2fj0nqx0039q4vg5252gii2","_id":"ck2fj0nra003sq4vg2y716uaz"},{"post_id":"ck2fj0nq4001sq4vgafy62w1c","tag_id":"ck2fj0nqw0036q4vggsg9fyfr","_id":"ck2fj0nra003tq4vge19j72ds"},{"post_id":"ck2fj0nq4001sq4vgafy62w1c","tag_id":"ck2fj0np6000pq4vggst1cu36","_id":"ck2fj0nrb003vq4vgg6qedllp"},{"post_id":"ck2fj0nq7001vq4vgd5l10066","tag_id":"ck2fj0np6000pq4vggst1cu36","_id":"ck2fj0nrb003wq4vgh45xghqd"},{"post_id":"ck2fj0nq7001vq4vgd5l10066","tag_id":"ck2fj0nqw0036q4vggsg9fyfr","_id":"ck2fj0nrc003yq4vgfl7wag1i"},{"post_id":"ck2fj0nqh0026q4vgbe83a50a","tag_id":"ck2fj0nra003uq4vgc4cu1cmf","_id":"ck2fj0nre003zq4vg06sd33ih"},{"post_id":"ck2fj0nqh0026q4vgbe83a50a","tag_id":"ck2fj0noa0006q4vg9n8bgu4h","_id":"ck2fj0nrg0041q4vgcl64gkis"},{"post_id":"ck2fj0nqi0029q4vg3c5kayb6","tag_id":"ck2fj0nrc003xq4vgc5obfs1y","_id":"ck2fj0nrg0042q4vg0oks5w91"},{"post_id":"ck2fj0nqk002dq4vg8wqs3hn5","tag_id":"ck2fj0nre0040q4vge9gq47yj","_id":"ck2fj0nri0045q4vg1e905zyp"},{"post_id":"ck2fj0nqk002dq4vg8wqs3hn5","tag_id":"ck2fj0nrh0043q4vgfx1ydf0h","_id":"ck2fj0nri0046q4vg5jetdq29"},{"post_id":"ck2fj0nql002gq4vgd131bn4x","tag_id":"ck2fj0nrh0044q4vghff58f3w","_id":"ck2fj0nrj0048q4vg5kv750qu"},{"post_id":"ck2fj0nqn002kq4vgdeidbsmb","tag_id":"ck2fj0np6000pq4vggst1cu36","_id":"ck2fj0nrm004bq4vggktte7hg"},{"post_id":"ck2fj0nqn002kq4vgdeidbsmb","tag_id":"ck2fj0nqw0036q4vggsg9fyfr","_id":"ck2fj0nrm004cq4vgb3ek05ry"},{"post_id":"ck2fj0nqn002kq4vgdeidbsmb","tag_id":"ck2fj0nqx0039q4vg5252gii2","_id":"ck2fj0nrm004dq4vgeoap08yp"},{"post_id":"ck2fj0nqn002kq4vgdeidbsmb","tag_id":"ck2fj0nrl004aq4vgboam3zrb","_id":"ck2fj0nrn004eq4vgfkm27u1o"}],"Tag":[{"name":"Docker","_id":"ck2fj0noa0006q4vg9n8bgu4h"},{"name":"Docker Swarm","_id":"ck2fj0noi000cq4vg0obtf6la"},{"name":"Java","_id":"ck2fj0np6000pq4vggst1cu36"},{"name":"Jstl","_id":"ck2fj0npc000wq4vg9nwabswy"},{"name":"ElasticSearch","_id":"ck2fj0npp001bq4vg0h7o7r9f"},{"name":"Git","_id":"ck2fj0npy001kq4vgg5xu4y1t"},{"name":"IDE","_id":"ck2fj0nq3001rq4vg4sosfpmp"},{"name":"JetBrains","_id":"ck2fj0nqb001xq4vg6hboeoae"},{"name":"IntelliJ IDEA","_id":"ck2fj0nqf0023q4vg4php857j"},{"name":"Mysql","_id":"ck2fj0nqp002pq4vg5wd9467k"},{"name":"Shell","_id":"ck2fj0nqv0035q4vgdioz4sev"},{"name":"Spring","_id":"ck2fj0nqw0036q4vggsg9fyfr"},{"name":"Spring Boot","_id":"ck2fj0nqx0039q4vg5252gii2"},{"name":"Monitor","_id":"ck2fj0nr2003hq4vgais37ps6"},{"name":"Kubernetes","_id":"ck2fj0nra003uq4vgc4cu1cmf"},{"name":"DevOps","_id":"ck2fj0nrc003xq4vgc5obfs1y"},{"name":"Hosts","_id":"ck2fj0nre0040q4vge9gq47yj"},{"name":"Software","_id":"ck2fj0nrh0043q4vgfx1ydf0h"},{"name":"Coding","_id":"ck2fj0nrh0044q4vghff58f3w"},{"name":"Rest API","_id":"ck2fj0nrl004aq4vgboam3zrb"}]}}